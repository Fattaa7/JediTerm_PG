{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_hud_psa_ds3_test-bench-verification.txt"}, "page_content": "Test Bench Verification\nStart Up Procedures\nDone using: \"3_HUD_PSA_D3\" r13, CteDev project, StartupProcedure in Task Tree\nDone using: \"3_HUD_PSA_D3\" r13, CteDev project, StartupProcedure in Task Tree\nVerifies UART communication between:CASTLE FPGA and  SerializerCASTLE FPGA and \nDeserializerHere is the start up procedures as per the serializer datasheet.\nVerifies UART communication between:\nCASTLE FPGA and  Serializer\nCASTLE FPGA and  Serializer\nCASTLE FPGA and Deserializer\nCASTLE FPGA and Deserializer\nHere is the start up procedures as per the serializer datasheet.\nHere is the start up procedures as per the serializer datasheet.\npublic void task(){\nItfCameraUART camUart = exu.modMM().objCameraUART();\n/*\n* Set BWS to 32 bits in serializer\n* */\ncamUart.afcSend(\"79 80 07 01 30\");\nexu.pause(50);\n/*\n* Enables configuration link by\nsetting CLINKEN = 1 (if not enabled\nautomatically) and gets an acknowledge.\nWaits for link to be established (~3ms).\n*/\ncamUart.afcSend(\"79 80 04 01 C7\");\nexu.pause(50);\n/*\n* Writes one link configuration bit (DRS,\nBWS, or EDC) in the deserializer and\ngets an acknowledge.\nSet DRS = 1, as per \"AC ELECTRICAL CHARACTERISTICS\" table in data sheet\n*/\ncamUart.afcSend(\"79 90 14 01 10\");\nexu.pause(50);\n/*\n* Writes corresponding serializer\nlink configuration bit and gets an\nacknowledge.\nSet DRS = 0, as per \"AC ELECTRICAL CHARACTERISTICS\" table in data sheet\n*/\ncamUart.afcSend(\"79 80 07 01 30\");\nexu.pause(50);\n/*\n* Enables video link by setting SEREN\n= 1 (if not enabled automatically).\nCannot get an acknowledge (or gets\na dummy acknowledge) if loss-oflock\noccurred. Waits for link to be\nestablished (~3ms).\n*/\ncamUart.afcSend(\"79 80 04 01 C7\");\nexu.pause(50);\n}\nAnd here is the UART communication corresponding:\nAnd here is the UART communication corresponding:\nAnd here is the UART communication corresponding:\nAnd here is oscilloscope traces for the UART commincation during startup \nprocedure:D2 is the Tx line from FPGA to SerializerD7 is the Rx line from Serializer\nto FPGA\nAnd here is oscilloscope traces for the UART commincation during startup \nprocedure:D2 is the Tx line from FPGA to SerializerD7 is the Rx line from Serializer\nto FPGA\nAnd here is oscilloscope traces for the UART commincation during startup procedure:\nD2 is the Tx line from FPGA to Serializer\nD2 is the Tx line from FPGA to Serializer\nD7 is the Rx line from Serializer to FPGA\nD7 is the Rx line from Serializer to FPGA\nCommunication With ECU MicroController\nDone using: \"3_HUD_PSA_D3\" r13, CteDev project.\nDone using: \"3_HUD_PSA_D3\" r13, CteDev project.\nVerifies UART communication between:CASTLE FPGA and  ECU Micro-controller through \nSerDes\nVerifies UART communication between:\nCASTLE FPGA and  ECU Micro-controller through SerDes\nCASTLE FPGA and  ECU Micro-controller through SerDes\nHere is how we can do a read request from CASTLE to ECU micro-controller over SerDes\nUART:\nHere is how we can do a read request from CASTLE to ECU micro-controller over SerDes\nUART:\nWhere:SYNC = 0x97DEV ADDR = 0xA5Message ID = 0x20DLC = 3 (2 bytes data + 1 CRC)\nWhere:SYNC = 0x97DEV ADDR = 0xA5Message ID = 0x20DLC = 3 (2 bytes data + 1 CRC)\nWhere:\nSYNC = 0x97DEV ADDR = 0xA5Message ID = 0x20DLC = 3 (2 bytes data + 1 CRC)\nSYNC = 0x97\nSYNC = 0x97\nDEV ADDR = 0xA5\nDEV ADDR = 0xA5\nMessage ID = 0x20\nMessage ID = 0x20\nDLC = 3 (2 bytes data + 1 CRC)\nDLC = 3 (2 bytes data + 1 CRC)\nVideo Timing Verification\nDone using: \"3_HUD_PSA_D3\" r14, CteDev project. From Task Tree => run \n\"StartupProcedure\"\nDone using: \"3_HUD_PSA_D3\" r14, CteDev project. From Task Tree => run \n\"StartupProcedure\"\nDeserializer Clock = 8.9 MHz\nDeserializer Clock = 8.9 MHz\nSerializer Clk = 2x8.9 MHz\nSerializer Clk = 2x8.9 MHz\nVSync, FPS = 62.7 Hz\nVSync, FPS = 62.7 Hz\n1: DE 2: HSync\n1: DE 2: HSync\nNote: Hsync and Vsync shall be inverted before sending, this is done in r23\nNote: Hsync and Vsync shall be inverted before sending, this is done in r23\nStreaming an image\nUsing r23 an image is streamed, as follows:\nFrom Task tree: Test Node: LoadFrame(CAM_FrameBuffer_0, cam_0.bmp);\nFrom Task tree: Test Node: StartupProcedure();", "type": "Document"}}