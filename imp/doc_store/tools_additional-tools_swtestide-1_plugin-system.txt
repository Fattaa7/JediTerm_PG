{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_additional-tools_swtestide-1_plugin-system.txt"}, "page_content": "Plugin System\nThe SwTestIDE (>=4.3) is providing a plugin system to load external .net Dynamic \nLink Libraries (dlls) and their provided GUI. The dlls can be written in C++, C# or \nVB.net and may access all of the IDE framework classes. Additionally there is the \nposibility to map events  (using the IDE core application and its GUI) which are \noccuring on the CASTLE CAN to each loaded, dedicated plugin.\nA usecase for that can be e.g:\nWork with \"Virtual PIMs\" on PC side - to handle difficult, calculation intensive or \nframework external things (e.g. video streaming to the DUT, stream comparing \nsupported by opencv or triggering external (P2 - development) applications)\nThe \"Virtual PIM\" or Plugin DLL is working in this case as a slave of the host PIM \nruinning in HIL mode.\nThe IDE framework is already providing basic operations like CAN intercaction. The \nPlugin may also use the COM server.\nThe general idea behind is: Splitting up the responsability for the IDE development \ninto several smaller but highly specialized, dedicated plugin packages.\nRemarks:\nThis feature can be combined with a CASTLE firmware which is implementing a router \nfunctionality to route commands out of the HIL mode to a 2nd TP on CASTLE CAN to \nimprove the information exchange between a running HIL test and the dedicated \nplugin.", "type": "Document"}}