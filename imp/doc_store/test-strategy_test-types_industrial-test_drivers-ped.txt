{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-strategy_test-types_industrial-test_drivers-ped.txt"}, "page_content": "PED (Production Equipment Driver)\nResposability for software components that are used to drive/ interact with \nequipment used on production side test setups (such as RPA, and EOLT) is at \ntheIndustrial (Test) Development Team.\nHowever best practice is to leverage work done at earlier test stages often driven \nas well by RnD\nHowever the Castle System itself is often used on its on to interact with a all \nkinds of different sub systems (including the device under test) as well.\nPEDs are either:\nsubject to be integrated into theProduction Frameworkdireclty. Such integration \nideally requires the PED to support easy integration (as Custom Step Type)intoNI \nTestStand As Test Managment System(TMS). Here a Labview native implementation is the\nprefered choise.\nsubject to be integrated into theProduction Frameworkdireclty. Such integration \nideally requires the PED to support easy integration (as Custom Step Type)intoNI \nTestStand As Test Managment System(TMS). Here a Labview native implementation is the\nprefered choise.\nsubject tobe integratedright into Castle Framework (dependent onreal time \nconstrainseither in Java, C or hardware i.e. as IP core)\nsubject tobe integratedright into Castle Framework (dependent onreal time \nconstrainseither in Java, C or hardware i.e. as IP core)", "type": "Document"}}