{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "home_user-guide_gradlesetuptousenexus.txt"}, "page_content": "Gradle setup to use Nexus\nGradle can download dependencies from different repositories. While this is working \ngreat with internet resources, the Valeo infrastructure needs 2 manual steps to \nwork. In CoreALM we have a \"Nexus\" server, which can store files (artifacts) that \ncan be consumed byGradle (or maven).\n1. Have a Java truststore with the Java known certificates including the Valeo \ncertificate in a known place.\nE.g. C:\\Users\\fbenoit1\\cacerts\nThe filecacerts is attachedto this article. In those example names, cacerts is just \na file not a folder.\n2. Have a gradle configuration file in your gradle home directory:\nExample: C:\\Users\\fbenoit1\\.gradle\\gradle.properties\nYou can use the gradle.properties templateattached in gradle.7zotherwise use content\nbelow\nContent:\nnexusCastle5Username=fbenoit1\nnexusCastle5Password=secure # Alwaysupdate your password here\n# Nexus master server\nnexusCastle5RepoUrl=https://forge-nexus.vnet.valeo.com/nexus\nsystemProp.javax.net.ssl.trustStore=c:\\\\Users\\\\fbenoit1\\\\cacerts\nsystemProp.javax.net.ssl.trustStorePassword=changeit\nThe trustStore password is 'changit', don't change it :-)\nGradle Eclipse support\nTo use gradle in Eclipse, the Buildship plugin is used.\nhttps://marketplace.eclipse.org/content/buildship-gradle-integration\nUse the Eclipse Marketplace, search for \"Buildship\" and install it.\nFor Encryption, please follow below steps\n1. Ensure Maven Credentials Are Encrypted\nFirst, make sure you've followed these steps:\nGenerate a Master Password:mvn --encrypt-master-password\nGenerate a Master Password:mvn --encrypt-master-password\nStore it in~/.m2/settings-security.xml:<settingsSecurity>\nStore it in~/.m2/settings-security.xml:<settingsSecurity>\n<master>{ENCRYPTED_MASTER_PASSWORD}</master>\n</settingsSecurity>\nEncrypt Your Nexus Password:mvn --encrypt-password ##your_password##\nEncrypt Your Nexus Password:mvn --encrypt-password ##your_password##\nStore it in~/.m2/settings.xml:<settings>\nStore it in~/.m2/settings.xml:<settings>\n<servers>\n<server>\n<id>nexus-repo</id>\n<username>your_username</username>\n<password>{ENCRYPTED_PASSWORD}</password>\n</server>\n</servers>\n</settings>\n2. Gradle Script (build.gradle or init.gradle) to Read Encrypted Credentials\nimport org.apache.maven.settings.building.DefaultSettingsBuilderFactory\nimport java.io.File\ndef getMavenCredential(String serverId, String credentialType) {\nFile settingsFile = new File(System.getProperty(\"user.home\"), \".m2/settings.xml\")\nif (!settingsFile.exists()) {\nprintln \"Maven settings.xml not found!\"\nreturn null\n}\ndef settingsBuilder = new DefaultSettingsBuilderFactory().newInstance()\ndef settingsRequest = new \norg.apache.maven.settings.building.DefaultSettingsBuildingRequest()\nsettingsRequest.setUserSettingsFile(settingsFile)\ndef settings = settingsBuilder.build(settingsRequest).getEffectiveSettings()\ndef server = settings.servers.find { it.id == serverId }\nreturn server ? (credentialType == \"username\" ? server.username : server.password) :\nnull\n}\next.nexusUsername = getMavenCredential(\"nexus-repo\", \"username\") ?: \"\"\next.nexusPassword = getMavenCredential(\"nexus-repo\", \"password\") ?: \"\"\n3.Deployment in(build.gradle)\nbuildscript {\nrepositories {\nmaven {\ncredentials {\nusernamerootProject.ext.nexusUser\npasswordrootProject.ext.nexusPassword\n}\nurl \"${nexusCastle5RepoUrl}/repository/c5/\"\n}\nmavenLocal()\n}\ndependencies {\nclasspath 'com.valeo.castle5:gradle.castle.artifacts:2.+'\n}\n}", "type": "Document"}}