{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "general-topics_autosar_autosar42containersecuredpdus.txt"}, "page_content": "Autosar 4.2+ Container+Secured PDUs\nPost date: Feb 19, 2018 1:54:53 PM\nWith Autosar 4.2 there comes the new feature of container and secured pdus (onboard \nsecurity).\nHere are some basics to get an understanding.\nContainer PDUs\nEach PDU has a 24-bit PDU-ID assigned.\nThis is the number Canoe shows in the ID column for PDUs.\nIf a frame just contains a PDU in the regular way, this PDU-ID is not visible.\nNow with container PDUs, the bus is more working with a \"frame in frame\" feature.\nEach ECU has only so many frames, as its bandwidth requirements are demanding.\nIn most cases, a ECU will just have a single send frame, beside the NM/Diag/XCP \nframes.\nThen this send frame contains a single container pdu, and the content of this \ncontainer is dynamic.\nEach contained PDU in the container PDU has a 4 byte header:\n3-byte the PDU-ID, 1-byte the length of the following PDU until the next header \nstarts.\nIf the head is all zeros, there is nothing more to follow.\nSCCM_CHASSIS_Container_ST3\n1E 84 02 04 D0 7D E2 FF 39 18 00 08 BF 68 30 0F 9C 2F 45 EA 1E 84 01 0C BA B2 E2 FF \n7F FF FF FF 9C 60 19 9A 00 00 00 00 00 00 ...\n|  SCCM_CHASSIS_Container_ST3_StWhl_Angl_Stat_fast_ST3   -   1E8402   4   D0 7D E2 \nFF\n|  SCCM_CHASSIS_Container_ST3_PT4_SCCM_TSL_Stat_ST3      -   391800   8   BF 68 30 \n0F 9C 2F 45 EA\n|  SCCM_CHASSIS_Container_ST3_StWhl_Angl_Stat_ST3        -   1E8401   C   BA B2 E2 \nFF 7F FF FF FF 9C 60 19 9A\nIn this example the headers are green, you see the PDU-ID and DLC also in the listed\nPDUs below.\nFor the Container PDUs we can have short header or long header\nShort Header\nHeader size is 32 bit as described above.\n* Header Id 24 bit\n* Dlc 8 bit.\nLong Header\nHeader size is 64 bit as described above.\n* Header Id 32 bit\n* Dlc 32 bit.\nSecured PDUs\nThose container can contain \"normal\" PDUs as we know them, containing the \napplication signals (ISignalPdu), or secured pdu.\nThe secured PDU surrounds the ISignalIPdu by attaching 4-bytes authentification \nblock to it.\nIn this example you see a secured PDU transmitted in a container.\nThe authentication block contains\n- 1-byte lowest byte of used freshness value\n- 3-byte the first bytes of a calculated CMAC.\nEIS_CHASSIS_Container_ST3\n00 80 00 08 85 CC 9D 84 9D 49 C3 D2 00 00 00 00 ...\n|  EIS_CHASSIS_Container_ST3_Ign_Stat_ST3   -   8000   8   85 CC 9D 84 9D 49 C3 D2\nFor each PDU, there is a 16-bit DATA-ID (different to the PDU-ID).\nEach PDU syncronizes to the global tick counter of the car and uses it as the 5-byte\nfreshness value.\nThen for each transmitted PDU, a calculation take place:\n<DATA-ID (2-bytes)> <PDU-PAYLOAD> <FRESHNESS-VALUE (5-bytes)>\nnow run a AES-CMAC with the PDU specific key of this data\nSecured Local Tick Count\nIn the car, there is a virtual security master (VSM) sending its tick counter to all\nECUs.\nThis information is 14-bytes long, but it is transported over a 8-byte pdu.\nIn the trance it looks like this:\nEIS_CHASSIS_Container_ST3_VSS_TP_SecTickCount_Lvl1_ST3\n[+] 0.994908   00 00 01 8B CF 29 BF 09\n[+] 0.005000   01 B9 54 AF 3F 25 A8 F5\n[+] 0.994908   00 00 01 8B CF 2A 23 1A\n[+] 0.005000   01 11 DA EE 03 02 83 14\n[+] 0.994908   00 00 01 8B CF 2A 87 7D\n[+] 0.005000   01 FA B3 F8 7E FE 7A E2\n[+] 0.994908   00 00 01 8B CF 2A EB 56\n[+] 0.005000   01 E5 A0 CA E8 2E 9B C3\nAlsways 2 sent PDUs belong together.\nThe first byte indicates the right sequence 00 and 01\nExample:\n[+] 0.994908   00 00 01 8B CF 2A 23 1A\n[+] 0.005000   01 11 DA EE 03 02 83 14\nThis means to transport this payload\n00 01 8B CF 2A 23 1A 11 DA EE 03 02 83 14\n1-byte resevered 00\n5-bytes tick count\n8-bytes CMAC\nThe tick counter is counter with 100ms resolution encoding an absolute date and \ntime.\nTo avoid replay attacks in the car, each ECU saves the last tick counter it has seen\nin NVM.\nA test cannot re-use the same counters in a second test run.\nSo it makes sense to initialize the current date/time to be use for the starting \ntick counter in a test.\nIn TCM_Daimler_MRA2, there is an object SSA which implements this functionality.", "type": "Document"}}