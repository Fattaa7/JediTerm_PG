{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_itc_1.txt"}, "page_content": "starting-a\n-project ---\n1 - Starting a project\nTo start a project, all starts with creating a Lab-PCB.\nThis is a board, for testing purpose. The Castle HW provides an interface for such a\nPCB.\nChecklist\nGet the module (DUT) schematicCreate an empty IO table for the used HW (ask Frank or\nUlrich to do this)Identify the signals that are needed to be stimulated or measured \nby Castle. Find in the IO table the needed resources.Fill the IO tableDiscuss with \nthe firmware developer. Enforce such a meeting.Then continue with the Lab-PCB \nschematicsApply theTCM Bi-Bi Lab-PCB Design Guide and Check ListWhen doing a Lab-PCB\nlayout, have all relevant signals on the top layers. Keep in mind, that \nchanges/patches will happen.\nGet the module (DUT) schematic\nGet the module (DUT) schematic\nCreate an empty IO table for the used HW (ask Frank or Ulrich to do this)\nCreate an empty IO table for the used HW (ask Frank or Ulrich to do this)\nIdentify the signals that are needed to be stimulated or measured by Castle. Find in\nthe IO table the needed resources.\nIdentify the signals that are needed to be stimulated or measured by Castle. Find in\nthe IO table the needed resources.\nFill the IO table\nFill the IO table\nDiscuss with the firmware developer. Enforce such a meeting.\nDiscuss with the firmware developer. Enforce such a meeting.\nThen continue with the Lab-PCB schematics\nThen continue with the Lab-PCB schematics\nApply theTCM Bi-Bi Lab-PCB Design Guide and Check List\nApply theTCM Bi-Bi Lab-PCB Design Guide and Check List\nWhen doing a Lab-PCB layout, have all relevant signals on the top layers. Keep in \nmind, that changes/patches will happen.\nWhen doing a Lab-PCB layout, have all relevant signals on the top layers. Keep in \nmind, that changes/patches will happen.\nIO Table\nSwitches are normally acting like relays. To save the count of connection IOs, some \nshare a common pin.\nIn the IO table, you might find a SW0..3 in a group having a single line COM1, which\nmeans, switch 0..3 have a single common pin.\nFor the EPIP 1.x, there are SPI-controlled and FPGA-controlled switches. \nSPI-Controlled are slow and can only be updated through software action with a \nlatency of <= 1.5ms. FPGA controlled switches can be updated immediately by SW or \nFPGA logic.\nAnalog output are by default not having an enable switch, that means, they might \ndrive actively all the time. Ask yourself how this influences your signal.\nProtection\nOutputs of Castle can often drive higher currents.\nBut sometimes there are scenarios where the ECU/DUT shall be going to sleep and \nswitches off it's own power supply while Castle is still driving IOs.\nTake care to protect the ECU/DUT by HW if possible.\nE.g. put serial resistors (or at least a 0 Ohm for possible later application) into \nthe line.\nLayout\nMost important, prepare for changes and for measuring.\nHave ground pins, where you can connect the scope.\nHave your signals easily accessible for measuring.\nHave your signals easily dis-connectable. E.g. wires on the top layer that can be \ndisconnected with a knife.\nIf connected to GND, especially here take care that you do connect with a single \nwire (vs. area) that can be disconnected.\nDon't use vertical 4-mm connectors, as they are too deep towards the Castle boards:\nUse only short plastic legs for the Lab-PCB\nLatest \"Blank lab pcb layout\" for TCM projects is kept inhere\nPeople you may contact\nIn Bietigheim:\nAasish Valappilekandi, Matthieu SURZUR, Ulrich Schneider\nIn Veszprem:\nworked on this for SWS_BMW_35UPMFL: Andras Bognar, Tamas Kriston\nIn Shenzhen:\nworked on this for SWS_PSA_VCI: tbd\nIn Cairo:\ntbd", "type": "Document"}}