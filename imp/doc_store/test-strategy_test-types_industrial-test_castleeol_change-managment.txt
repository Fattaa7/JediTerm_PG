{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-strategy_test-types_industrial-test_castleeol_change-managment.txt"}, "page_content": "Change Managment\nRecommendation for Software Change Management Handling when working on EOL test \ndevelopment:\nThe plant is supposed to use the content of CastleEol_UPA_Ecu2010 1:1 at the machine\nrunning the EOLT in the production\nfor every part number that is produced - there shall be a configuration available in\nthis repo. (part number folder)\nGood practice if you are working on EOL maintenance (or in general at items in SCM \nfor EOL)  is:\nStep 1:\nOpen an activity tracker in the Castle project and assign it to yourself - list in \nthe tracker the tasks that you have to do\nStep 2:\nOpen a gerrit change for a new config (sub folder in the Partnumber folder) in the \nrepo  CastleEol_UPA_Ecu2010.\nIn the commit message mention the artifactid which you generated at step 1 - to let \nthe people know why u are doing a change\nand to have proper reference\nStep 3:\nNext step is to do necessary adaptations on the Castle User Project repo (specific \nfor the OEM) - here u find the EOL java Lib where the actual functionality will be \nimplemented i.e:c5prjusr_upa_- ensure to use the user project (usr in the name) and \nopen there a Gerrit change as well.\nIn the commit message mention again the artifact id which you generated at step 1 - \nto let the people know why u are doing a change  and to have proper reference\nEnsure everything works locally well when using the change created in step 2 and the\nchange in step 3.\nBy testing it  together with the binaries of the latest CastelEOL tool which you can\nget (for ULS) from here:\nhttps://sites.google.com/a/valeo.com/castle-project/castle-5/castleeol\nStep 4:\ninvite for a review on the changes that u opened. (you can do this basically at any \npoint in time if you are uncertain with something or need help)\npersons to invite can be anybody that is familiar with the related repo content for \nthe related project\n(can be firmware owner, swtest responsibles,  DV/PV responsibles or just colleagues,\nor Thomas  - just to satisfy 4 eyes principle and ensure certain (minimal) coding \nquality)\nOnce u receive a +2 with both of ur changes:  submit them (and merge if necessary)\nin any email threads mention the artifact id\nStep 5:\nTest all together again after the merging with the related hashes  and set the \ntracker (created during step 1) to \"implemented\"\nThen send a notification with the respective hashes to the plant via email\nFor uls/ecuthe responsible in Wemding is i.e Harald Greiner - the plant will then \nhandle deployment to production machine\nRemarks:\nBest practice is to do small iterative changes if not all is ready and i.e. a new \nfirmware release arrived then rebase the change or just merge before deployment and \nopen another change with same artifact ID.Who pays? - the logical answer is: the one\nwith the interest for the change:If there is a new DUT software released then the \nSwPM should be able to provide the STR codeSome genaral knowledge about GIT and \nGERRIT usage and some basic SCM usecases (like the one mentioned above) can be \nfoundhere\nBest practice is to do small iterative changes if not all is ready and i.e. a new \nfirmware release arrived then rebase the change or just merge before deployment and \nopen another change with same artifact ID.\nBest practice is to do small iterative changes if not all is ready and i.e. a new \nfirmware release arrived then rebase the change or just merge before deployment and \nopen another change with same artifact ID.\nWho pays? - the logical answer is: the one with the interest for the change:\nWho pays? - the logical answer is: the one with the interest for the change:\nIf there is a new DUT software released then the SwPM should be able to provide the \nSTR code\nIf there is a new DUT software released then the SwPM should be able to provide the \nSTR code\nSome genaral knowledge about GIT and GERRIT usage and some basic SCM usecases (like \nthe one mentioned above) can be foundhere\nSome genaral knowledge about GIT and GERRIT usage and some basic SCM usecases (like \nthe one mentioned above) can be foundhere", "type": "Document"}}