{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_networking-ethernet_best-practices_ethernetsocketethernetserversocketoverview.txt"}, "page_content": "EthernetSocket/EthernetServerSocket Overview\nPost date: Nov 3, 2020 12:35:17 PM\nThese updates are already onGerritbut not merged to Git yet.\nEthernetDevice\nThere're 2 EthernetDevices corresponding to backplane and dut transceivers\nEthernetDeviceBp/EthernetDeviceDut0\nThe most commonly used APIs are the following:\nSetFailure to make OpenCircuitFailureSetLinkStatus to force broadr link status \n(Up/Down) based on user inputSetMasterConfiguartion to determine whether Castle is \nMaster or Slave. It's following the same configuration of Comm if already configured\nin c5ac.GetLinkStatus to check phy link up/down\nSetFailure to make OpenCircuitFailure\nSetFailure to make OpenCircuitFailure\nSetLinkStatus to force broadr link status (Up/Down) based on user input\nSetLinkStatus to force broadr link status (Up/Down) based on user input\nSetMasterConfiguartion to determine whether Castle is Master or Slave. It's \nfollowing the same configuration of Comm if already configured in c5ac.\nSetMasterConfiguartion to determine whether Castle is Master or Slave. It's \nfollowing the same configuration of Comm if already configured in c5ac.\nGetLinkStatus to check phy link up/down\nGetLinkStatus to check phy link up/down\nEthernetNetworkInterface\nEach of these EthernetDevices has 4 EthernetNetworkInterfaces.\nThe most commonly used APIs are the following:\nConfigure to set SourceMacAddress, SourceIP, SubnetMask and VlanIdSetDestMac to \navoid having ARP messagesRemove that's better to call it between tests for higher \nstability\nConfigure to set SourceMacAddress, SourceIP, SubnetMask and VlanId\nConfigure to set SourceMacAddress, SourceIP, SubnetMask and VlanId\nSetDestMac to avoid having ARP messages\nSetDestMac to avoid having ARP messages\nRemove that's better to call it between tests for higher stability\nRemove that's better to call it between tests for higher stability\nPingSend API in Ping Interface can be used to ensure correct NetworkInterface \nconfiguration.\nEthernetSocket\nTo be able to have UDP or TCPClient EthernetSockets for sending raw packets\nThe most commonly used APIs are the following:\nConfigure to set SourceIP, SourcePort, DestinationIP, DestinationPort, \nTpType(UDP/TCPClient) and VlanId and based on this configuration it'll be mapped to \ncorresponding NetworkInterfaceSendOnce, SendPerTimer and SendPerTimerOffClose for \nclosing the TCP Connection(send FIN) or the UDP Connection(Connectionless) with the \nparameterMSLFor TCP, there're TcpConnect for establishing TCP Connection (send SYN),\nTcpRst for closing the TCP Connection(send RST), CheckTcpConnectionEstablished, \nConfigureFastAck (Rx side), ConfigureNagleAlgorithm (Tx side) and TcpReconnect for \nresetting the TCP connection after RstTimeout\nConfigure to set SourceIP, SourcePort, DestinationIP, DestinationPort, \nTpType(UDP/TCPClient) and VlanId and based on this configuration it'll be mapped to \ncorresponding NetworkInterface\nConfigure to set SourceIP, SourcePort, DestinationIP, DestinationPort, \nTpType(UDP/TCPClient) and VlanId and based on this configuration it'll be mapped to \ncorresponding NetworkInterface\nSendOnce, SendPerTimer and SendPerTimerOff\nSendOnce, SendPerTimer and SendPerTimerOff\nClose for closing the TCP Connection(send FIN) or the UDP Connection(Connectionless)\nwith the parameterMSL\nClose for closing the TCP Connection(send FIN) or the UDP Connection(Connectionless)\nwith the parameterMSL\nFor TCP, there're TcpConnect for establishing TCP Connection (send SYN), TcpRst for \nclosing the TCP Connection(send RST), CheckTcpConnectionEstablished, \nConfigureFastAck (Rx side), ConfigureNagleAlgorithm (Tx side) and TcpReconnect for \nresetting the TCP connection after RstTimeout\nFor TCP, there're TcpConnect for establishing TCP Connection (send SYN), TcpRst for \nclosing the TCP Connection(send RST), CheckTcpConnectionEstablished, \nConfigureFastAck (Rx side), ConfigureNagleAlgorithm (Tx side) and TcpReconnect for \nresetting the TCP connection after RstTimeout\nEthernetServerSocket\nTo be able to have TCPServer EthernetSockets for sending raw packets\nEach EthernetServerSocket can serve up to 4 TCP EthernetSockets on 4 \nServerSocketConnections\nThe most commonly used APIs are the following:\nConfigure to set SourceIP, SourcePort and VlanId and based on this configuration \nit'll be mapped to corresponding NetworkInterface. Destination Socket is dynamic \naccepting any DestinationIP, DestinationPort and TpType is \nTCPServerServerSocketConnection >> SendOnce, SendPerTimer and SendPerTimerOff and \nTCP all EthernetSocket APIs mentioned before except TcpConnect and TcpReconnectClose\nto stop listening to any new EthernetSocket TCPClients\nConfigure to set SourceIP, SourcePort and VlanId and based on this configuration \nit'll be mapped to corresponding NetworkInterface. Destination Socket is dynamic \naccepting any DestinationIP, DestinationPort and TpType is TCPServer\nConfigure to set SourceIP, SourcePort and VlanId and based on this configuration \nit'll be mapped to corresponding NetworkInterface. Destination Socket is dynamic \naccepting any DestinationIP, DestinationPort and TpType is TCPServer\nServerSocketConnection >> SendOnce, SendPerTimer and SendPerTimerOff and TCP all \nEthernetSocket APIs mentioned before except TcpConnect and TcpReconnect\nServerSocketConnection >> SendOnce, SendPerTimer and SendPerTimerOff and TCP all \nEthernetSocket APIs mentioned before except TcpConnect and TcpReconnect\nClose to stop listening to any new EthernetSocket TCPClients\nClose to stop listening to any new EthernetSocket TCPClients\nAfter migration to Application Configurator, you need to add different objects from \nEthernetSocket and EthernetServerSocket in the ApplModule as follow:\n<Object Name=\"EthernetSocket0\" Interface=\"EthernetSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>\n<Object Name=\"EthernetSocket1\" Interface=\"EthernetSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>\n<Object Name=\"EthernetSocket2\" Interface=\"EthernetSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>\n<Object Name=\"EthernetSocket3\" Interface=\"EthernetSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>\n<Object Name=\"EthernetServerSocket0\" Interface=\"EthernetServerSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>\n<Object Name=\"EthernetServerSocket1\" Interface=\"EthernetServerSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>\n<Object Name=\"EthernetServerSocket2\" Interface=\"EthernetServerSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>\n<Object Name=\"EthernetServerSocket3\" Interface=\"EthernetServerSocket\">\n<Doc></Doc>\n<Option Type=\"sysgen\" Name=\"ObjInit\" Value=\"\"></Option>\n</Object>", "type": "Document"}}