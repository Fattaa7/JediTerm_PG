{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "general-topics_ethernet_tls-in-castle.txt"}, "page_content": "TLS in castle\nTerminologies and Acronyms :\nTLS:transport layer security protocol\nHashing:The process of transforming any given key or a string of characters into \nanother value\nSSL:secure socket layer\nWhy TLS ?\nTLS offers three main features:\nauthenticity: builds trust in the other side (e.g If a browser trying to connect to \ngoogle.com, It needs to confirms It's actually google site. Not anything else)\nauthenticity: builds trust in the other side (e.g If a browser trying to connect to \ngoogle.com, It needs to confirms It's actually google site. Not anything else)\nIntegrity: To make sure data sent exactly equals the data received (i.e there's no \ndropping in data packets)\nIntegrity: To make sure data sent exactly equals the data received (i.e there's no \ndropping in data packets)\nencryption: To cipher the plain text sent from each side (client and server)\nencryption: To cipher the plain text sent from each side (client and server)\nTLS overview:\nTransport Layer Security(TLS) is acryptographic protocoldesigned to provide \ncommunications security over a computer network. Theprotocolis widely used in \napplications such asemail,instant messaging, andvoice over IP, but its use in \nsecuringHTTPSremains the most publicly visible.\nTLSStandards:\nRFC8446: \"The Transport Layer Security (TLS) Protocol Version 1.3\"\nRFC8446: \"The Transport Layer Security (TLS) Protocol Version 1.3\"\nRFC5246: \"The Transport Layer Security (TLS) Protocol Version 1.2\". (Used in castle)\nRFC5246: \"The Transport Layer Security (TLS) Protocol Version 1.2\". (Used in castle)\nTLSVersions:\nSSL 1.0, SSL 2.0, SSL 3.0\nSSL 1.0, SSL 2.0, SSL 3.0\nTLS 1.0, TLS 1.1, TLS 1.2, TLS 1.3\nTLS 1.0, TLS 1.1, TLS 1.2, TLS 1.3\nTLSprotocol details:\nProtocol details\nTLSimplementation in castle:\ncastle uses openssl open source security library to implement TLS.\nopenssl  is a robust, commercial-grade, full-featured toolkit for general-purpose \ncryptography and secure communication.\nTLS is a client-server communication type.\nTLS is located in a layer between TCP and Application layers in TCP/IP network stack\nso we can use it with any application (http, ftp,..etc)\nIf we are using http protocol, trying to secure our browsing using TLS, then it will\nbe called Https (S: stands for security). If we are using Ftp protocol trying to \nsecure our files transfer using TLS, then it will be called ftps and the same \napplies for the other App protocols.", "type": "Document"}}