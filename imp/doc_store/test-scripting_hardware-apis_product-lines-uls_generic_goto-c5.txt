{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_product-lines-uls_generic_goto-c5.txt"}, "page_content": "user-guide ---\nGoTo [C5] - User Guide\nHere are the steps to launch GoTo [C5] :\n1- DownloadUPA_VALEO_GENERICproject. (Please refer toCastle 5 installation guideto \nknow how to download a certain project)\n2- Castle5 project should look like the below figure\nRunupdate-archives.cmdto update all exported libraries which compatible with this \nfirmware version\nRunupdate-archives.cmdto update all exported libraries which compatible with this \nfirmware version\nConnect Castle to your machine via its Ethernet cable either directly to your \nEthernet port or via D-Link USB to Ethernet converter, Note that you must have a \nstatic IP (192.168.144.1) as mentioned earlier.\nConnect Castle to your machine via its Ethernet cable either directly to your \nEthernet port or via D-Link USB to Ethernet converter, Note that you must have a \nstatic IP (192.168.144.1) as mentioned earlier.\nRunUPA_VALEO_GENERIC_64B_TS.cmdand make sure that you can launch Castle CTE\nRunUPA_VALEO_GENERIC_64B_TS.cmdand make sure that you can launch Castle CTE\n3- After CTE opened it will look like below figure\n4- GoTo can provide simulation for Ak or HP sensors (you can select between them by \ncalling the corresponding Initialization API)\nHint :\nIn case of AK sensors : you have to call Init_System_AK_Sensors first before turn on\nKL15 & KL30 from goto panel\n5- The current APIs Implemented are the most general ones needed.\n(Clamp15_off , Clamp15_on , Clamp30_off , Clamp30_on , Init_System_AK_Sensors , \nInit_System_HP_Sensors , .. etc)\nand all of them are implemented in java classbench_test.javaexisting in the \nfollowing path >> 3_UPA_VALEO_GENERIC\\UPA_VALEO_GENERIC_Cte\\prj\\src\\prj\\lib\n6- You can add any extra APIs to group a lot of needed steps in one function to be \neasy to call by\nAdd a java class like bench_test.java  (for ex: JLR_test.java)\nthen add the following implementation inCteSetup.javato create a library node in cte\ntree (exist on right side in cte view)\n@Override\npublic void fillTaskRootNode( IExuTypes exuType, TaskTreeNodeRoot root ){\nroot.addChild(new TaskTreeLibrary(prj.lib.bench_test.class));\n>>>root.addChild(new TaskTreeLibrary(prj.lib.JLR_test.class));<<<\n}\nCteSetup.javaexisting in the following path >> \n3_UPA_VALEO_GENERIC\\UPA_VALEO_GENERIC_Cte\\prj\\src\\prj\\cte\nHere are the primary steps to debug on GoTo [C5] :\nIf all connections are connected correctly and you still can not launch the project \non cte\nfor example :\n1- Replace the PIM with another one and use the same GoTo housing\nIf the issue is solved -> then, the problem in the PIM\n2- Make sure that Ethernet cables are connected correctly between (PIM module , \nClock module and Ethernet switch) inside the Goto housing\nThis step should be done by H/W lab engineer\nIf all connections are connected correctly, VS6 configuration is correct and \nfirmware project is launched, but no communication on PC-CAN channel\n1- Measure the equivalent resistance of CAN bus, it should be ~120 ohm (using \nAvometer - measure the resistance between Pin 2 & 7)\nIn case of not, Ask H/W lab engineer to check the connections of PC-CAN inside the \nGoto housing\nUseful Links :\nCastle - Goto - VS6 User Training\nCastle - Goto - VS6 User Training", "type": "Document"}}