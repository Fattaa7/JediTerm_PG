{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_vector_canoe_automatedcanframecyclictimetestusingcapl.txt"}, "page_content": "Automated CAN frame cyclic time test using CAPL\nPost date: Aug 12, 2018 1:10:41 PM\nAbstract:\nThe usage of CAN module in CASTLE-5 became more complex and is in high demand from \nmany validation teams hence, testing and debugging this module became more and more \ncomplex.Test automation is the most reliable way to debug, test and, reproduce bugs \non firmware engineers benches.\nThis topic discusses how to detect issues in the CAN frames cyclic times using CAPL \nautomated test.\nMotivation:\nMany validation teams reported anomalies in CASTLE-5 CAN module.The messages \nsent/received by CASTLE were dropped for a short time period and then \nresent/received normally.This causes some ECUs to report lost communication dtcs and\nsometimes they enter reset mode and the testing activites are blocked on this issue.\nLegacy debugging method:\nTo debug such issue, a firmware engineer had to monitor a CAN Frame manually by \nobservation of the graph window in CANOE, which isn't a reliable method where the \nhuman error factor is relatively high.\nAutomated test using CAPL:\nTo overcome the previously mentioned manual method, the following section describes \nhow to setup a CAPL test module:\ninsert new CAPL test module in your network.\ninsert new CAPL test module in your network.\ninsert new CAPL test module in your network.\nRigh-click on the inserted node and select edit , to start writing the CAPL code \nsnippet which implements the test.\nRigh-click on the inserted node and select edit , to start writing the CAPL code \nsnippet which implements the test.\nRigh-click on the inserted node and select edit , to start writing the CAPL code \nsnippet which implements the test.\nstart writing your test implementation using CAPL.\nstart writing your test implementation using CAPL.\nstart writing your test implementation using CAPL.\nNotes:\nACAPLtest module structure consists of atestcasewhich has to be called in amain test\nroutine.\nACAPLtest module structure consists of atestcasewhich has to be called in amain test\nroutine.\nACAPLtest module structure consists of atestcasewhich has to be called in amain test\nroutine.\nCANOEhas some built-in APIs which make this test implementation a lot easier than \ncreating it form scratch as follows:\nCANOEhas some built-in APIs which make this test implementation a lot easier than \ncreating it form scratch as follows:\ndword ChkCreate_MsgRelOccurrenceViolation(Message observedMsg, double \naMinRelCycleTime, double aMaxRelCycleTime, char[] aCallback)\nwhere:\nMessage:Is a CAN messages located in the database file included in \nyourCANOEconfiguration.\nMessage:Is a CAN messages located in the database file included in \nyourCANOEconfiguration.\nMessage:Is a CAN messages located in the database file included in \nyourCANOEconfiguration.\naMinRelCycleTime:this parameter accepts values in the range (0 - 1) which represents\na percentage of adbcparameter parsed byCANOEnamed\"GenMsgDelayTime\".It defines the \nminimum time between two message transmissions.0 means , this parameter won't be \nchecked and, 1 means 100% of this parameteri,eif the parameter value is 20 indbcthen\nthe min cyclic time in this test is set to 20.\naMinRelCycleTime:this parameter accepts values in the range (0 - 1) which represents\na percentage of adbcparameter parsed byCANOEnamed\"GenMsgDelayTime\".It defines the \nminimum time between two message transmissions.0 means , this parameter won't be \nchecked and, 1 means 100% of this parameteri,eif the parameter value is 20 indbcthen\nthe min cyclic time in this test is set to 20.\naMaxRelCycleTime:this parameter accepts values in the range (1 - INF) which \nrepresents a percentage of adbcparameter parsed byCANOEnamed\"GenMsgCycleTime\".It \ndefines the fixed periodicity for cyclic message transmissions. 1 means 100% of this\nparameteri,eif this parameter value is 30 indbcthen the maximum allowable cyclic \ntime in this test is set to 30.\naMaxRelCycleTime:this parameter accepts values in the range (1 - INF) which \nrepresents a percentage of adbcparameter parsed byCANOEnamed\"GenMsgCycleTime\".It \ndefines the fixed periodicity for cyclic message transmissions. 1 means 100% of this\nparameteri,eif this parameter value is 30 indbcthen the maximum allowable cyclic \ntime in this test is set to 30.\naCallback:Is an optional parameter. ( for more info please readCAPLhelp fromCANOE).\naCallback:Is an optional parameter. ( for more info please readCAPLhelp fromCANOE).\n3. Upon start of the simulation, this test will be executed and a report with each \ntest case status will be generated.", "type": "Document"}}