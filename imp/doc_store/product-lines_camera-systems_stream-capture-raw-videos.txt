{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_stream-capture-raw-videos.txt"}, "page_content": "Stream / Capture RAW Videos\nIntroduction to RAW Video FormatCamera`s Original or Raw Formats are the untouched \nmedia that image sensor produces.A digital camera uses an array of millions of tiny \nlight cavities or \"photosites\" to record an image.When you press the shutter button \nand the exposure begins, all photosites are uncovered to collect photons and store \nthose as an electrical signal.Once the exposure finishes, the camera closes all \nphotosites.Then tries to assess how many photons fell into each cavity by measuring \nthe strength of the electrical signal.Signals are then quantified as digital values,\nwith a precision that is determined by the bit depth (RAW8/10/12/16)Such digital \nvalues are the RAW format product of the camera\nIntroduction to RAW Video Format\nCamera`s Original or Raw Formats are the untouched media that image sensor \nproduces.A digital camera uses an array of millions of tiny light cavities or \n\"photosites\" to record an image.When you press the shutter button and the exposure \nbegins, all photosites are uncovered to collect photons and store those as an \nelectrical signal.Once the exposure finishes, the camera closes all photosites.Then \ntries to assess how many photons fell into each cavity by measuring the strength of \nthe electrical signal.Signals are then quantified as digital values, with a \nprecision that is determined by the bit depth (RAW8/10/12/16)Such digital values are\nthe RAW format product of the camera\nCamera`s Original or Raw Formats are the untouched media that image sensor produces.\nCamera`s Original or Raw Formats are the untouched media that image sensor produces.\nA digital camera uses an array of millions of tiny light cavities or \"photosites\" to\nrecord an image.\nA digital camera uses an array of millions of tiny light cavities or \"photosites\" to\nrecord an image.\nWhen you press the shutter button and the exposure begins, all photosites are \nuncovered to collect photons and store those as an electrical signal.\nWhen you press the shutter button and the exposure begins, all photosites are \nuncovered to collect photons and store those as an electrical signal.\nOnce the exposure finishes, the camera closes all photosites.\nOnce the exposure finishes, the camera closes all photosites.\nThen tries to assess how many photons fell into each cavity by measuring the \nstrength of the electrical signal.\nThen tries to assess how many photons fell into each cavity by measuring the \nstrength of the electrical signal.\nSignals are then quantified as digital values, with a precision that is determined \nby the bit depth (RAW8/10/12/16)\nSignals are then quantified as digital values, with a precision that is determined \nby the bit depth (RAW8/10/12/16)\nSuch digital values are the RAW format product of the camera\nSuch digital values are the RAW format product of the camera\nRAW video format is adopted in multiple automotive projects (FUS_Geely & FUS_HKM for\ninstance).in such projects, Castle 5 is used to simulate the Camera (Stream Feature)\nand the HU Display (Capture Feature).Both feature need special handling to be \nrealized, different than handling other video formats (RGB & YUV).\nRAW video format is adopted in multiple automotive projects (FUS_Geely & FUS_HKM for\ninstance).\nRAW video format is adopted in multiple automotive projects (FUS_Geely & FUS_HKM for\ninstance).\nin such projects, Castle 5 is used to simulate the Camera (Stream Feature) and the \nHU Display (Capture Feature).\nin such projects, Castle 5 is used to simulate the Camera (Stream Feature) and the \nHU Display (Capture Feature).\nBoth feature need special handling to be realized, different than handling other \nvideo formats (RGB & YUV).\nBoth feature need special handling to be realized, different than handling other \nvideo formats (RGB & YUV).\nStreaming RAW VideosFirst of all we need a ready RAW format video / frames on PC to \nbe streamed to Castle.Vosstrexsimulation tool provides such feature and could be \nconfigured to produce RAW videos.Please refer to thisarticlefor further \ndocumentation on Vosstrex SVS Fisheye Cameras Configs.In case you are working with \nCastle 5 static streaming feature, you can also make use of Vosstrex RAW video \nformat output.We have developed a Windows utility that can capture static frames \nfrom Vosstrex with requested format.TODO : insert tool wiki link.Once the streaming \nvideo / static frames are ready on PC, we then can use the Load APIs to load the \nstream to SDram (Castle 5)Or start Vosstrex Video Streamer executable (streaming \nsolution).Both ways, RAW image bytes are transferred to VDMA to be streamed to ECU.A\nremarkable note here is that VDMA processes your RAW byte array from SDram on byte \nbasis (byte by byte).At initialization time, VDMA is passed a pointer to index zero \nof the byte array in SDram.Then in runtime, VDMA processes array elements \nincrementally and maps them to it`s AXIS output.Array[0] -> Array[1] -> Array[2] -> \nArray[4] etc.\nStreaming RAW Videos\nFirst of all we need a ready RAW format video / frames on PC to be streamed to \nCastle.Vosstrexsimulation tool provides such feature and could be configured to \nproduce RAW videos.Please refer to thisarticlefor further documentation on Vosstrex \nSVS Fisheye Cameras Configs.In case you are working with Castle 5 static streaming \nfeature, you can also make use of Vosstrex RAW video format output.We have developed\na Windows utility that can capture static frames from Vosstrex with requested \nformat.TODO : insert tool wiki link.Once the streaming video / static frames are \nready on PC, we then can use the Load APIs to load the stream to SDram (Castle 5)Or \nstart Vosstrex Video Streamer executable (streaming solution).Both ways, RAW image \nbytes are transferred to VDMA to be streamed to ECU.A remarkable note here is that \nVDMA processes your RAW byte array from SDram on byte basis (byte by byte).At \ninitialization time, VDMA is passed a pointer to index zero of the byte array in \nSDram.Then in runtime, VDMA processes array elements incrementally and maps them to \nit`s AXIS output.Array[0] -> Array[1] -> Array[2] -> Array[4] etc.\nFirst of all we need a ready RAW format video / frames on PC to be streamed to \nCastle.\nFirst of all we need a ready RAW format video / frames on PC to be streamed to \nCastle.\nVosstrexsimulation tool provides such feature and could be configured to produce RAW\nvideos.\nVosstrexsimulation tool provides such feature and could be configured to produce RAW\nvideos.\nPlease refer to thisarticlefor further documentation on Vosstrex SVS Fisheye Cameras\nConfigs.\nPlease refer to thisarticlefor further documentation on Vosstrex SVS Fisheye Cameras\nConfigs.\nIn case you are working with Castle 5 static streaming feature, you can also make \nuse of Vosstrex RAW video format output.\nIn case you are working with Castle 5 static streaming feature, you can also make \nuse of Vosstrex RAW video format output.\nWe have developed a Windows utility that can capture static frames from Vosstrex \nwith requested format.\nWe have developed a Windows utility that can capture static frames from Vosstrex \nwith requested format.\nTODO : insert tool wiki link.\nTODO : insert tool wiki link.\nOnce the streaming video / static frames are ready on PC, we then can use the Load \nAPIs to load the stream to SDram (Castle 5)\nOnce the streaming video / static frames are ready on PC, we then can use the Load \nAPIs to load the stream to SDram (Castle 5)\nOr start Vosstrex Video Streamer executable (streaming solution).\nOr start Vosstrex Video Streamer executable (streaming solution).\nBoth ways, RAW image bytes are transferred to VDMA to be streamed to ECU.\nBoth ways, RAW image bytes are transferred to VDMA to be streamed to ECU.\nA remarkable note here is that VDMA processes your RAW byte array from SDram on byte\nbasis (byte by byte).\nA remarkable note here is that VDMA processes your RAW byte array from SDram on byte\nbasis (byte by byte).\nAt initialization time, VDMA is passed a pointer to index zero of the byte array in \nSDram.\nAt initialization time, VDMA is passed a pointer to index zero of the byte array in \nSDram.\nThen in runtime, VDMA processes array elements incrementally and maps them to it`s \nAXIS output.\nThen in runtime, VDMA processes array elements incrementally and maps them to it`s \nAXIS output.\nArray[0] -> Array[1] -> Array[2] -> Array[4] etc.\nArray[0] -> Array[1] -> Array[2] -> Array[4] etc.\nThe important note here is that this mechanism swaps the endianess of SDram bytes in\noutput AXIS bus from VDMA\nThe important note here is that this mechanism swaps the endianess of SDram bytes in\noutput AXIS bus from VDMA\nThe important note here is that this mechanism swaps the endianess of SDram bytes in\noutput AXIS bus from VDMA\nCapturing RAW VideosRecovering / Converting a RAW video to RGB format is tricky as \nit is not defined by / dependent on fixed equations (like YUV / RGB conversion)RAW /\nRGB conversion is mainly dependent on the color map scheme implemented by the image \nsensor grid / array in the camera.\nCapturing RAW Videos\nRecovering / Converting a RAW video to RGB format is tricky as it is not defined by \n/ dependent on fixed equations (like YUV / RGB conversion)\nRecovering / Converting a RAW video to RGB format is tricky as it is not defined by \n/ dependent on fixed equations (like YUV / RGB conversion)\nRAW / RGB conversion is mainly dependent on the color map scheme implemented by the \nimage sensor grid / array in the camera.\nRAW / RGB conversion is mainly dependent on the color map scheme implemented by the \nimage sensor grid / array in the camera.\nThere are some common factors and differences in the recovery operation.The common \nfactor is that the green color component is the dominant component in the grid and \nis alternating every two pixels, no matter the line index.The camera specific \ndifferences are :Index zero color component (R or G or B)Even lines color pattern \n(RGRG or GRGR or GBGB or BGBG)Odd lines color pattern (RGRG or GRGR or GBGB or \nBGBG)Such requirements could be fetched from the Camera / Image sensor data \nsheet.Recovering RGB components from an input RAW image is implemented / verified in\nCastle 5 Java libraries.\nThere are some common factors and differences in the recovery operation.The common \nfactor is that the green color component is the dominant component in the grid and \nis alternating every two pixels, no matter the line index.The camera specific \ndifferences are :Index zero color component (R or G or B)Even lines color pattern \n(RGRG or GRGR or GBGB or BGBG)Odd lines color pattern (RGRG or GRGR or GBGB or \nBGBG)Such requirements could be fetched from the Camera / Image sensor data \nsheet.Recovering RGB components from an input RAW image is implemented / verified in\nCastle 5 Java libraries.\nThere are some common factors and differences in the recovery operation.\nThere are some common factors and differences in the recovery operation.\nThe common factor is that the green color component is the dominant component in the\ngrid and is alternating every two pixels, no matter the line index.\nThe common factor is that the green color component is the dominant component in the\ngrid and is alternating every two pixels, no matter the line index.\nThe camera specific differences are :Index zero color component (R or G or B)Even \nlines color pattern (RGRG or GRGR or GBGB or BGBG)Odd lines color pattern (RGRG or \nGRGR or GBGB or BGBG)\nThe camera specific differences are :\nIndex zero color component (R or G or B)\nIndex zero color component (R or G or B)\nEven lines color pattern (RGRG or GRGR or GBGB or BGBG)\nEven lines color pattern (RGRG or GRGR or GBGB or BGBG)\nOdd lines color pattern (RGRG or GRGR or GBGB or BGBG)\nOdd lines color pattern (RGRG or GRGR or GBGB or BGBG)\nSuch requirements could be fetched from the Camera / Image sensor data sheet.\nSuch requirements could be fetched from the Camera / Image sensor data sheet.\nRecovering RGB components from an input RAW image is implemented / verified in \nCastle 5 Java libraries.\nRecovering RGB components from an input RAW image is implemented / verified in \nCastle 5 Java libraries.", "type": "Document"}}