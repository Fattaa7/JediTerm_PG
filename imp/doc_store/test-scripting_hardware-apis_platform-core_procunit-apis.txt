{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_platform-core_procunit-apis.txt"}, "page_content": "ProcUnit APIs\nList of ProcUnit APIs:\n- loadFromSignal( int varIndex, ISignalValue signal );\n- loadFromSignalUpdateCounter( int varIndex, ISignalValue signal );\n- storeToSignal( int varIndex, ISignalValue signal );\n- storeToSignalRaw(int varIndex, ISignalRaw signal, boolean bigEndian, int offset, \nint byteCount);\n- getValue( int targetVarIndex );\n- setValue( int targetVarIndex, long value );\n- addValue( int targetVarIndex, long value );\n- addVariable( int targetVarIndex, int variable2 );\n- multiplyValue( int targetVarIndex, long value );\n- multiplyVariable( int targetVarIndex, int variable2 );\n- divideValue( int targetVarIndex, long value );\n- divideVariable( int targetVarIndex, int variableToAdd );\n- moduloValue( int targetVarIndex, long value );\n- moduloVariable( int targetVarIndex, int variableToAdd );\n- copyVariableToVariable( int dstVarIndex, int srcVarIndex );\n- compareVariableAndValue( int targetVarIndex, int variableToCompare, long value );\n- compareVariableAndVariable( int targetVarIndex, int variableToCompare1, int \nvariableToCompare2 );\n- fireTaskletIfVariableMatchesValue( String taskletName, boolean execIfTrue, int \nvariableToCompare, long value );\n- fireTaskletIfVariableMatchesVariable( String taskletName, boolean execIfTrue, int \nvariableToCompare1, int variableToCompare2 );\n- cancelTaskletIfVariableMatchesValue( String taskletName, boolean execIfTrue, int \nvariableToCompare, long value );\n- cancelTaskletIfVariableMatchesVariable( String taskletName, boolean execIfTrue, \nint variableToCompare1, int variableToCompare2  );\n- incrementIfVariableMatchesValue(  int targetVarIndex, boolean execIfTrue, int \nvariableToCompare, long value );\n- warningIfVariableMatchesValue(  int varIndex, long value, boolean match );\n- warningIfVariableLessOrEqualThanValue(  int varIndex, long value );\n- warningIfVariableLessThanValue(  int varIndex, long value );\n- warningIfVariableGreaterOrEqualThanValue(  int varIndex, long value );\n- warningIfVariableGreaterThanValue(  int varIndex, long value );\n- errorIfVariableMatchesValue(  int varIndex, long value, boolean match );\n- errorIfVariableLessOrEqualThanValue(  int varIndex, long value );\n- errorIfVariableLessThanValue(  int varIndex, long value );\n- errorIfVariableGreaterOrEqualThanValue(  int varIndex, long value );\n- errorIfVariableGreaterThanValue(  int varIndex, long value );\n- opXor(int varIndex, int varIndex1, int varIndex2);\n- opAnd(int varIndex, int varIndex1, int varIndex2);\n- opOr(int varIndex, int varIndex1, int varIndex2);\n- opShiftRight(int varIndex, int varIndex1, int varIndex2);\n- opShiftLeft(int varIndex, int varIndex1, int varIndex2);\n- inRangeCheck(int minErrorIdx, int minWarningIdx, int checkValueIdx, int \nmaxWarningIdx, int maxErrorIdx);", "type": "Document"}}