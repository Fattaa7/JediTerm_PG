{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_quad-camera-module.txt"}, "page_content": "Quad Camera Module\nMost modern cars have one or more cameras. It's required to develop a test bench to \nsimulate four cameras to the ECU. The ECU then manipulates the streamed images with \nits DSP and generates a fifth video stream to be displayed to the driver on the Head\nUnit Display \"HU\". Thus, CASTLE5 needs to generate 4 camera streams and capture a \nfifth.\nThe module includes 4Xilinx VDMAblocks connected to the AXI (not lite) bus. [img \nsrc] Video Direct Memory Access enables fast streams between the video end-point and\nthe off-chip DDR Memory. VDMA_0 instance has bi-directional streams; to enable \ncapturing.\nScope and Requirements\nThe project aims at building a common Product Interface PCB \"PIP\" that can serve \nmultiple projects. Although the PIP is designed for Daimler Parkman project, it can \nbe used with minor modifications for other projects, \"eMirror Project\" for example.\nParkman Video requirements [Example]\nStream 4 video streams from a still image. Future plans include streaming a stored \nvideo clip. Each video stream has the following specifications:1280x800 pixels15, 25\nor 30 frames per second \"fps\"YUV 422 color formatCapture a frame from 1 video \nstream.  Future plans include capturing and storing a video clip.Parkman ECU \ncompatibility, forced to use MAXIM LVDS serdes chips:\nStream 4 video streams from a still image. Future plans include streaming a stored \nvideo clip. Each video stream has the following specifications:1280x800 pixels15, 25\nor 30 frames per second \"fps\"YUV 422 color format\nStream 4 video streams from a still image. Future plans include streaming a stored \nvideo clip. Each video stream has the following specifications:\n1280x800 pixels\n1280x800 pixels\n15, 25 or 30 frames per second \"fps\"\n15, 25 or 30 frames per second \"fps\"\nYUV 422 color format\nYUV 422 color format\nCapture a frame from 1 video stream.  Future plans include capturing and storing a \nvideo clip.\nCapture a frame from 1 video stream.  Future plans include capturing and storing a \nvideo clip.\nParkman ECU compatibility, forced to use MAXIM LVDS serdes chips:\nParkman ECU compatibility, forced to use MAXIM LVDS serdes chips:\nMAX9271 Serializers: Serialize 8-bit data to high speed LVDSMAX9240 Deserializer: \nDeserialize 24-bit data from a high speed LVDS\nMAX9271 Serializers: Serialize 8-bit data to high speed LVDSMAX9240 Deserializer: \nDeserialize 24-bit data from a high speed LVDS\nMAX9271 Serializers: Serialize 8-bit data to high speed LVDS\nMAX9271 Serializers: Serialize 8-bit data to high speed LVDS\nMAX9240 Deserializer: Deserialize 24-bit data from a high speed LVDS\nMAX9240 Deserializer: Deserialize 24-bit data from a high speed LVDS\nOther requirements\nParkman project needs other requirements, that will not be discussed at this \ndocument and considered out of scope\nFault box interfacing: Control SPIders to induce line faultsSeveral IO for led and \nbutton simulationControlled Power Feed\nFault box interfacing: Control SPIders to induce line faults\nFault box interfacing: Control SPIders to induce line faults\nSeveral IO for led and button simulation\nSeveral IO for led and button simulation\nControlled Power Feed\nControlled Power Feed\nVideo Timing\nThe general idea of video streaming is:\nPixel data are streamed, each pixel with a pixel clock. In case of RGB888, the pixel\ndata width is 24-bit. In case of Parkman, where YUV422 format is used with only \n8-bit width is available to the serializer, each pixel is transmitted using PCLKx2. \nThe Y component on a clock and either U/V on the other clock. So in respect to PCLK \n(not PCLKx2) a pixel is still been transmitted on a single clock.Pixels are streamed\non row basis; row0pixels - blank - row1pixels - blank - ...Horizontal Sync is raised\n(if polarity is 1, otherwise lowered) for some \"pixel times\" during the horizontal \nblanksWhen all rows are transmitted, some blank lines are transmitted before getting\nto the next video frame. During this blank, Vertical Sync is raised  (if polarity is\n1, otherwise lowered) for several \"line times\".\nPixel data are streamed, each pixel with a pixel clock. In case of RGB888, the pixel\ndata width is 24-bit. In case of Parkman, where YUV422 format is used with only \n8-bit width is available to the serializer, each pixel is transmitted using PCLKx2. \nThe Y component on a clock and either U/V on the other clock. So in respect to PCLK \n(not PCLKx2) a pixel is still been transmitted on a single clock.\nPixel data are streamed, each pixel with a pixel clock. In case of RGB888, the pixel\ndata width is 24-bit. In case of Parkman, where YUV422 format is used with only \n8-bit width is available to the serializer, each pixel is transmitted using PCLKx2. \nThe Y component on a clock and either U/V on the other clock. So in respect to PCLK \n(not PCLKx2) a pixel is still been transmitted on a single clock.\nPixels are streamed on row basis; row0pixels - blank - row1pixels - blank - ...\nPixels are streamed on row basis; row0pixels - blank - row1pixels - blank - ...\nHorizontal Sync is raised (if polarity is 1, otherwise lowered) for some \"pixel \ntimes\" during the horizontal blanks\nHorizontal Sync is raised (if polarity is 1, otherwise lowered) for some \"pixel \ntimes\" during the horizontal blanks\nWhen all rows are transmitted, some blank lines are transmitted before getting to \nthe next video frame. During this blank, Vertical Sync is raised  (if polarity is 1,\notherwise lowered) for several \"line times\".\nWhen all rows are transmitted, some blank lines are transmitted before getting to \nthe next video frame. During this blank, Vertical Sync is raised  (if polarity is 1,\notherwise lowered) for several \"line times\".\nThe next figure [src] shows the complete story.\nFor color format and conversion, thisonline color conversionis very useful.\nChoose the parameters (Source)\nHow to choose the video timing parameters?\nActually the designer has some freedom of choice. First we should check some \nstandard video timings\nThe constraint here is to match the required rate; frames per second, measured in \nHz. This is the frequency of the VSync as well :)\nTOTAL_HOR x TOTAL_VER x FPS x Tpclk = 1 sec\nLet's apply for the first row:\nTOTAL_HOR = 640+16+96+48 =  800\nTOTAL_VER = 480+11+2+31   =  524\nFPS       = 60\nTpclk     = 1/25175000e\nTheir product gives: 1.000993 sec, which is accepted of course.\nA goodcalculator toolmakes it easier to reach a valid configuration\nVideo Out Parameter Description\nv_axi4s_vid_out core parameter description shown in below table\nParkman Timings\nTo tackle the double-latch configuration problem, a work-around is done:\nPclk is set to 74.25MHzAll pixels are calculated and transmitted assuming Pclk/2 = \n37.13 MHz\nPclk is set to 74.25MHz\nPclk is set to 74.25MHz\nAll pixels are calculated and transmitted assuming Pclk/2 = 37.13 MHz\nAll pixels are calculated and transmitted assuming Pclk/2 = 37.13 MHz\nThis workaround results in a correctly received Pclk at the ECU side, all pixels are\nvisible and stable.\nVideo DMA\nPlease refer to thiswiki.\nInitialization\nThe Initialization of the Video Camera system is done at three stages:\nInitialization at the FW side.Control Channel [Back Channel] Initialization => This \nstep Initializes the Serializer internal registers to enable the UART communication \nbetween ECU and serializers.Starting releasing the Cam Pclk , Hsync , and Vsync per \nevery camera.\nInitialization at the FW side.\nInitialization at the FW side.\nControl Channel [Back Channel] Initialization => This step Initializes the \nSerializer internal registers to enable the UART communication between ECU and \nserializers.\nControl Channel [Back Channel] Initialization => This step Initializes the \nSerializer internal registers to enable the UART communication between ECU and \nserializers.\nStarting releasing the Cam Pclk , Hsync , and Vsync per every camera.\nStarting releasing the Cam Pclk , Hsync , and Vsync per every camera.\nA. Initialization at the FW Side\nTodo here !\nB. Back Channel Initialization Sequence:\nTodo here !\nC. Releasing the Cam Pclk , Hsync , and Vsync:\nTodo here !\nOperation\nTodo here!\nInterrupts\nTodo here!\nPerformance\nTodo here!\nAXI Configuration\nTodo here!\nCASTLE-5 Integration", "type": "Document"}}