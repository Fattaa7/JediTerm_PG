{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_upa_usv-sensors_usv-sensors_-usv10-sensors.txt"}, "page_content": "simulation-concept ---\n[USV10 Sensors] - Simulation Concept\nUltrasonic measurement characteristics :\nNormal objects\nDirect reflections\nDirect reflections\nDirect reflections\nIndirect reflections\nIndirect reflections\nIndirect reflections\nIndirect reflections\nMultiple reflections\nMultiple reflections\n1. direct reflections from multiple objects 2. multiple path reflections from \ndifferent object surfaces\nObject height\nHigh object is an object with height >= sensor height. and low object: An object \nwith height < sensor height\nFor example, Low object in front of high object:\nSimulation steps / Functional architecture :\nSimulation can be split into different steps\nSimulation runs in anEnvironment simulationwhere ego car and the environment with \nobjects are simulated. This can be CarMaker, Vosstrex, VS6 (AK,or HP)\nSimulation runs in anEnvironment simulationwhere ego car and the environment with \nobjects are simulated. This can be CarMaker, Vosstrex, VS6 (AK,or HP)\nThePropagation Modelmodels the Ultrasonic behavior in the environment. The sensor \nhas a position, field of view and detects objects sensor specific. For Ultrasonic \nthe detections are echoes reflected from objects. There can be multiple echos with \ndifferent intensity, direct and indirect echos, \u2026 The output are measurements with \ndetections as distance and amplitudes. It represents Ultrasonic measurements from \nand to sensor membrane.\nThePropagation Modelmodels the Ultrasonic behavior in the environment. The sensor \nhas a position, field of view and detects objects sensor specific. For Ultrasonic \nthe detections are echoes reflected from objects. There can be multiple echos with \ndifferent intensity, direct and indirect echos, \u2026 The output are measurements with \ndetections as distance and amplitudes. It represents Ultrasonic measurements from \nand to sensor membrane.\nSensor interface for USV is an envelope curve. The Sensor ModelSignal \nmodulationbuilds an envelope curve based on results from Sensor model.\nSensor interface for USV is an envelope curve. The Sensor ModelSignal \nmodulationbuilds an envelope curve based on results from Sensor model.\nFor AK or HP sensor behavior aThreshold modelfilters the detections. The output are \nthen detections as only distances or time of flight (TOF) (or filtered distance and \namplitudes for HP-FL).\nFor AK or HP sensor behavior aThreshold modelfilters the detections. The output are \nthen detections as only distances or time of flight (TOF) (or filtered distance and \namplitudes for HP-FL).\nLast step is the sensor interface, for a HIL asensor hardware simulationto simulate \nthe behavior of a real sensor on sensor line. This can be CASTLE, NI\nLast step is the sensor interface, for a HIL asensor hardware simulationto simulate \nthe behavior of a real sensor on sensor line. This can be CASTLE, NI\nIt represents the sensor interface behavior (like DSI3 for USV).\nIt represents the sensor interface behavior (like DSI3 for USV).\nUSV Sensor behavior :\nHow Castle Store simulated data\n1)Castle APIs(SendSignalWay) orVosstrex Interface(Ethernet) : provide echos in \nformat of ( Distance[TOF] & Amplitude[dB] )\nDistance : reflects objects position >> Distance to TOF mapping : distance(m) = ( \nSound_Speed(m/s) * (TOF(s) ) / 2\nDistance : reflects objects position >> Distance to TOF mapping : distance(m) = ( \nSound_Speed(m/s) * (TOF(s) ) / 2\nTOF parameter with step equal to 51.2us (means : 5 TOF equals to 5*51.2us = 256us)\nTOF parameter with step equal to 51.2us (means : 5 TOF equals to 5*51.2us = 256us)\nAmplitude : reflects receiving sound pressure level[dB]\nAmplitude : reflects receiving sound pressure level[dB]\n2) Amplification : amplify the amplitude by \u201cDynamic Gain\u201d[dB] - (using default \nvalues)\nThe dynamic/time-dependent gain control shall be configurable in defined steps and \nlevels over the measurement time as depicted on the figure below :\n3) Linearization : convert dB to Linear values\ndB = 20 log (linear) >> amplitude[linear] = 10^(amplitude[dB]/20)LPE scaling to \nscale linear value to range of 10Bit (max 1024)\ndB = 20 log (linear) >> amplitude[linear] = 10^(amplitude[dB]/20)\ndB = 20 log (linear) >> amplitude[linear] = 10^(amplitude[dB]/20)\nLPE scaling to scale linear value to range of 10Bit (max 1024)\nLPE scaling to scale linear value to range of 10Bit (max 1024)\n\u21d2 LPE: 82 [dB] = 512  Factor0,04531374457 >>82[dB] to linear: 10^(82/20) = \n12589,25412 * 0,04066960561 = 512\n\u21d2 LPE: 82 [dB] = 512  Factor0,04531374457 >>82[dB] to linear: 10^(82/20) = \n12589,25412 * 0,04066960561 = 512\n4) Envelope data : Based on (Distance & Amplitude) simulated data, Castle generates \nthe envelope curve like the figure below :\nCastle shall use a standard envelope curve for a single echo and scale it based on \namplitude information and position it based on distance information\nCastle shall use a standard envelope curve for a single echo and scale it based on \namplitude information and position it based on distance information\nCastle shall merge overlapping envelope curves\nCastle shall merge overlapping envelope curves\n5)  Compression : to transmit data over the DSI3x bus, the envelope curve will be \ncompressed with different compression techniques (based on ECU request)\nThe compressed data will be stored in Sensor MemoryMap (pages H & L) and reported \nupon ECU request\nCastle Simulation requirements\nCastle shall receive and store measurement information (distance & amplitude) for \neach signal way to simulate it when sensors are triggeredCastle shall simulate \nlatest received measurement information, also when measurement information are not \nupdated and sensor is triggered againCastle shall simulate direct measurements when \nsensor is triggered as direct measurementCastle shall simulate indirect signals when\nsensor is triggered as indirect measurement and depending on which sensor is \ntriggered as sending sensor\nCastle shall receive and store measurement information (distance & amplitude) for \neach signal way to simulate it when sensors are triggered\nCastle shall receive and store measurement information (distance & amplitude) for \neach signal way to simulate it when sensors are triggered\nCastle shall simulate latest received measurement information, also when measurement\ninformation are not updated and sensor is triggered again\nCastle shall simulate latest received measurement information, also when measurement\ninformation are not updated and sensor is triggered again\nCastle shall simulate direct measurements when sensor is triggered as direct \nmeasurement\nCastle shall simulate direct measurements when sensor is triggered as direct \nmeasurement\nCastle shall simulate indirect signals when sensor is triggered as indirect \nmeasurement and depending on which sensor is triggered as sending sensor\nCastle shall simulate indirect signals when sensor is triggered as indirect \nmeasurement and depending on which sensor is triggered as sending sensor", "type": "Document"}}