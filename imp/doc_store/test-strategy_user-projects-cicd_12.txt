{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-strategy_user-projects-cicd_12.txt"}, "page_content": "continous-integration-swe6 ---\n12 - Continuous Integration (Software Qualification Test) SWE6 [CI]\nUsually Software Qualification Test pro\njects are requested to provide a certain testset which can be running as part of the\ncontinous integrationfully autonumous. The is article describes a setup - using the \nmost commonly used tools in the validation stage - to achieve this with a minimum of\nproject specific configuration.\nSteps to be accomplished for Continous Integration on SWE6 (SwTest) Level\nTestmodel Compilation (TSECG project) using Test runtime environment API (TSDB) as \ntargetTest Generation (generate tsxml files as test sequences)TestRuntime \nCompilation (Compile the test runtime libraries together with the CTE)Download the \nsoftware under test (SUT) to the device under test (DUT) - ideally using a tsxml \nbased test //project specific or using CTE Debugger integrationRun the \nTestsOptional: Analyse the results and report them to the CI \nDashboard:https://dashing.vnet.valeo.com/#/\nTestmodel Compilation (TSECG project) using Test runtime environment API (TSDB) as \ntarget\nTestmodel Compilation (TSECG project) using Test runtime environment API (TSDB) as \ntarget\nTest Generation (generate tsxml files as test sequences)\nTest Generation (generate tsxml files as test sequences)\nTestRuntime Compilation (Compile the test runtime libraries together with the CTE)\nTestRuntime Compilation (Compile the test runtime libraries together with the CTE)\nDownload the software under test (SUT) to the device under test (DUT) - ideally \nusing a tsxml based test //project specific or using CTE Debugger integration\nDownload the software under test (SUT) to the device under test (DUT) - ideally \nusing a tsxml based test //project specific or using CTE Debugger integration\nRun the Tests\nRun the Tests\nOptional: Analyse the results and report them to the CI \nDashboard:https://dashing.vnet.valeo.com/#/\nOptional: Analyse the results and report them to the CI \nDashboard:https://dashing.vnet.valeo.com/#/\nAll 6 steps shall be runnable in the overall CI pipeline which is initially e.g. \ntriggered a change of the SUT sources\nLegacy: Publish the results to the CI Dashboard\nCI Dashboardis used by the management to observe the current test state. The \nprojects are responsible to provide the necessary data  (as .json) file. This data \ncontains several highlevel Test KPI - such as:\n- Number Passed/Failed Testcase  - Testscoverage - etc\nAll this data (and more - tickets requiremetns, bitrace... ) is available in the \nexecuted tsxmls (and doors exports).  The CiPublisher.jar can be used to pack this \ndata to the needed  format(s) for the CI Dashboard.", "type": "Document"}}