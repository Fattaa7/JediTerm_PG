{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_java_briefintroonjavanativeinterfacejni.txt"}, "page_content": "Brief Intro on Java Native Interface (JNI)\nPost date: Mar 14, 2017 2:08:13 PM\nIntro:\nNative programming languages like C, C++ provide in several situations a better \nperformance/memory management and using these languages may become unavoidable.\nAlso porting libraries that are already written in the native languages to java \nmight prove itself to be a time consuming task.\nLuckily Java provides some thing like Java Native Interface and while it may seem \ncomplicated at first, the java community decided to make the job even easier with \nsomething like JNA which will be discussed later.\nJNI can never be briefly discussed/explained but I will try to provide the basic \nstarting point that we could actually use in our development activities.\nI will use one example from this referencearticle, This article is very well \nexplained and if you need to dive deeper into JNI, this is a very good starting \npoint.\nPlease note:\nIf you need the basic functionality just by invoking an already written naively \ncodded library, JNA will be better suited for your need and it's very easy to use.I \nwill add my comments to the example to provide a more understandable example.\nIf you need the basic functionality just by invoking an already written naively \ncodded library, JNA will be better suited for your need and it's very easy to use.\nIf you need the basic functionality just by invoking an already written naively \ncodded library, JNA will be better suited for your need and it's very easy to use.\nI will add my comments to the example to provide a more understandable example.\nI will add my comments to the example to provide a more understandable example.\nYou might get confused reading the article if this is your first time dealing with \nJNI, so let's try to summarize the big picture.\nWhat we need ?\nInvoke a method written in C/C++ from java.\nWhat we will do?\nWrite a java class to invoke our C method.Write the method in C and do the necessary\ncommon C compilation process in order to arrive to a usable object file which will \nbe used in generating the shared library file (DLL).\nWrite a java class to invoke our C method.\nWrite a java class to invoke our C method.\nWrite the method in C and do the necessary common C compilation process in order to \narrive to a usable object file which will be used in generating the shared library \nfile (DLL).\nWrite the method in C and do the necessary common C compilation process in order to \narrive to a usable object file which will be used in generating the shared library \nfile (DLL).\nLet's dive deeper into each step by developing an example:\nOur Example  is Java JNI Program: TestJNIPrimitive.java\nStep 1:Writing the java class as below, See comments as they highlight important \npoints.\npublicclassTestJNIPrimitive {static{System.loadLibrary(\"myjni\"); // Load your \ncompiled shared native library at runtime.       // myjni.dll (Windows) or \nlibmyjni.so (Unixes) (no need to add extension to name)      }      // Declare a \nnative method average() that receives two ints and return a double containing the \naverageprivatenativedouble average(int n1, int n2);      // Test \nDriverpublicstaticvoid main(Stringargs[]) {System.out.println(\"In Java, the average \nis \" +newTestJNIPrimitive().average(3, 2));    }}\nWe need to generate some files from our java class that will help us in creating our\nshared library.\njavac TestJNIPrimitive.java\"javac\" creates the TestJNIPrimitive.class from your java\nclass.\njavac TestJNIPrimitive.java\n\"javac\" creates the TestJNIPrimitive.class from your java class.\n\"javac\" creates the TestJNIPrimitive.class from your java class.\n\"javac\" creates the TestJNIPrimitive.class from your java class.\njavah TestJNIPrimitive\"javah\" creates a header file \"TestJNIPrimitive.h\"\njavah TestJNIPrimitive\n\"javah\" creates a header file \"TestJNIPrimitive.h\"\n\"javah\" creates a header file \"TestJNIPrimitive.h\"\n\"javah\" creates a header file \"TestJNIPrimitive.h\"\nFeel free to explore the generated .h file and take note of the function declaration\nJNIEXPORT jdouble JNICALL Java_TestJNIPrimitive_average(JNIEnv *, jobject, jint, \njint);\nStep 2:Writing the implementation in C  as TestJNIPrimitive.c\n#include <jni.h>#include <stdio.h>#include \"TestJNIPrimitive.h\"   JNIEXPORT jdouble \nJNICALL Java_TestJNIPrimitive_average           (JNIEnv *env, jobject thisObj, jint \nn1, jint n2) {    jdouble result;    printf(\"In C, the numbers are %d and %d\\n\", n1,\nn2);    result = ((jdouble)n1 + n2) / 2.0;    // jint is mapped to int, jdouble is \nmapped to double, see all mapping in jni.h, also article has the entire header \nfile.returnresult;}\nWe need now to generate the shared library dll,\nMinGW GCC compilation commands on windows.\nset JAVA_HOME={jdk-installed-directory}add the jdk path of you machine\nset JAVA_HOME={jdk-installed-directory}\nadd the jdk path of you machine\nadd the jdk path of you machine\nadd the jdk path of you machine\ngcc -Wl,--add-stdcall-alias -I\"%JAVA_HOME%\\include\" -I\"%JAVA_HOME%\\include\\win32\" \n-shared -o myjni.dll TestJNIPrimitive.cthe -I commands are to include the header \nfiles jni.h, jni_md.h\ngcc -Wl,--add-stdcall-alias -I\"%JAVA_HOME%\\include\" -I\"%JAVA_HOME%\\include\\win32\" \n-shared -o myjni.dll TestJNIPrimitive.c\nthe -I commands are to include the header files jni.h, jni_md.h\nthe -I commands are to include the header files jni.h, jni_md.h\nthe -I commands are to include the header files jni.h, jni_md.h\nCygwin GCC compilation commands on windows.\ngcc-3 -D __int64=\"long long\" -mno-cygwin -Wl,--add-stdcall-alias  \n-I\"<JAVA_HOME>\\include\" -I\"<JAVA_HOME>\\include\\win32\" -shared -o myjni.dll \nTestJNIPrimitive.cWe need to define the type __int64 as \"long long\" via option -D \n_int64=\"long long\".\ngcc-3 -D __int64=\"long long\" -mno-cygwin -Wl,--add-stdcall-alias  \n-I\"<JAVA_HOME>\\include\" -I\"<JAVA_HOME>\\include\\win32\" -shared -o myjni.dll \nTestJNIPrimitive.c\nWe need to define the type __int64 as \"long long\" via option -D _int64=\"long long\".\nWe need to define the type __int64 as \"long long\" via option -D _int64=\"long long\".\nNow we are ready to run our application.\njava -Djava.library.path=<path where the dll are found> TestJNIPrimitive\njava -Djava.library.path=<path where the dll are found> TestJNIPrimitive\njava -Djava.library.path=<path where the dll are found> TestJNIPrimitive\nConclusion:\nWhile we have Ignored a number of stuff in the previous example like  JNIEnv *, \njobject, jdouble ,jint and their appropriate C representations, I thought we can \ndiscuss these in another article as not to make this one unnecessarily long.\nWe will discuss in a later article the JNI arguments and the problems that may face \nus when passing java arguments that aren't defined in C and vice versa, this will \nlead us to JNA and how it helps with the issues that we might face.\n.", "type": "Document"}}