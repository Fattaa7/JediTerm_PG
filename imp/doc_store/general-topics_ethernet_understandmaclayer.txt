{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "general-topics_ethernet_understandmaclayer.txt"}, "page_content": "Understanding MAC Layer\nPost date: Jul 3, 2020 7:14:54 PM\nMAC stands forMediaAccessControl. MAC layer is responsible for handling data \ntransmission via a shared media/channel between multiple nodes. MAC has two main \nobjectives: collision minimization (when a collision occurs, sent packet is lost or \ncorrupted), and bandwidth utilization.\nA -MAC protocols\nThere arethree types of multiple access protocols:\n1-channelization\nThis type of multiple access protocols depends on dividing the channel between all \nconnected nodes such as TDMA, FDMA and CDMA protocols.\n1.1 TDMA\nTimeDivisionMultipleAccess protocol divides time into slots, each slot is assigned \nto a node, a node is only allowed to transmit data during its slot.\nExample: Global System for Mobile Communications (GSM) / 2G systems.\n1.2 FDMA\nFrequencyDivisionMultipleAccess protocol divides the available bandwidth (instead of\ntime in TDMA) between N nodes. FDMA MAC is simpler (no need for                    \nsynchronization between nodes in TDMA) but has lower spectrum efficiency due to \nguard bands.\nExample: AMPS (Advanced Mobile phone system, very old communication system used in \nthe 1990s and developed by AT&T).\n1.3 CDMA\nCodeDivisionMultipleAccess protocol depends on diving the channel between N nodes \nthat share the same channel using N orthogonal codes C1, C2, C3,...., CN.         \nOrthogonal codes have the property that Ci*Ci= constant, and Ci*Cj = 0 (a four \northogonal codes example is shown below). So when node n1 wants to transmit its     \n        data packet d1, the data packet is multiplied by the  code C1 and the same \nfor all the other nodes n1, n2, ...., nN.\nAt the receiver, the receiving node receivesdata= C1*d1 + C2*d2 + C3*d3 + .... + \nCN*dN. The receiver just multipliesdataby one of the codes (depending on            \n        which messagediit wants to receive), let's assume that the receiving node \nwants to receive data packet d1 which is transmitted from node n1. Due to \northogonalitydata*c1  = c1*c1*d1 + c1*c2*d2 + c1*c3*d3 + ...... = constant*d1 + 0 + \n0 + ....+ 0 (d1 is recovered fromdata)\nExample: 3G systems.\n2-Random Access\nIn random access protocols, any connected node can transmit at any time as if it \nowns the whole channel, MAC then handles collision occurrence in different ways     \n      depending on the protocol.\n2.1 ALOHA\nIn ALOHA protocol, every node can transmit its packets whenever it wants, when a \ncollision occurs, all collided packets (backlogged) shall be transmitted after a    \n            random time. Vulnerable time is the duration at which a possible \ncollision can occur between two packets. For pure ALOHA system Vulnerable time = \n2*packet                    duration.\nVulnerable time is a key parameter in ALOHA protocol's throughput. Assume packet \ntime =Tp, and packet transmission follows poison process with arrival rateG,        \n    the probability that there is only one transmission within vulnerable period \n(2*Tp ) \"where collision might take place\"  P(no collision) = 1 - P(more than 1 \narrival                     within vulnerable period) = e-2Gand throughputS = G*P(no\ncollision) = Ge-2G\nit's seen that vulnerable period has a huge effect on ALOHA system so minimizing is \nquiet important.\n2.2 Slotted ALOHA\nSlotted ALOHA or S-ALOHA divides time into slots each of period = Tp, and \ntransmissions are only allowed to take place at the begging of a slot. which        \n                        reduces vulnerable period to be equal to Tp instead of 2*Tp.\nAloha and SAloha were used in the 1970s and early the 1980s in some Ethernet cable \nbased and satellite networks, but they later became obsolete due low                \n      efficiency.\n2.3 CSMA  *Important\nCSMA stands forCarrierSenseMultipleAccess, the advantage of CSMA protocol is that \nthe MAC has to listen to the channel before transmission. If the channel is         \n  idle, the node sends its data. Otherwise, it defers transmission. Although, CSMA \nsystem will still suffer from collisions due to propagation delay (a node may think \nthe         channel is idle but it is not).\nThere are two types of CSMA: Nonpersistent CSMA and persistent CSMA\n2.3.1 Nonpersistent CSMA\nTransmitter waits for some random time before trying to retransmit.\n2.3.2 persistent CSMA\nInstead of waiting for some random time, the sender keeps sensing the channel. Once \nthe channel is idle it sends its data with probability P.But why?imagine that       \n    there are multiple nodes that suffer from collision. If all of them try to \ntransmit once the channel is idle, this will definitely cause another collision.\nExample: IEEE 802.11 (wi-fi)\n2.4 CSMA/CD\nStands for CSMACollisionDetection. Collision can be detected within a short time \n(even during transmission,rememberthat CSMA still suffer from collisions that       \n    may take place after nodes began sending their data due to propagation delay). \nOnce the collision is detected, transmission is aborted which minimizes collision \ncost         time. Collision detection is done by measuring power on the channel \ncompared to the sent signal power (for wired LANs).\nThemain differencebetween CSMA/CD and CSMA is that the channel is monitoredall the \ntimenot only before transmission.\nExample: IEEE 802.3 (Ethernet)\n3-Controlled Access\nIn controlled access protocols, all node consult each other to find who has the \nright to send its data (Collision-free operation is guaranteed).\n3.1 Reservation\nlike TDMA, time is divided into slots each is assigned to a node.But, the node has \nthe right to reserve the slot or not, which leads to much higher bandwidth          \n              utilization, where utilization = d/N+d  (utilization decreases for \nlarge number of nodes)\n3.2 Token passing\nToken passing protocol is convenient to ring topology LANs, a token is a special \npacket which circulates the network. When a node needs to transmit data, it takes   \n          the token. When it is finished, it releases the token.\nAdvantages: zero collisions + a node takes the token only when it needs (similar to \nreservation but without reservation frame's overhead)\nExample:  IEEE 802.5 (Token ring networks) and IEEE 802.4 (Token bus networks)\nFor IEEE 802.3 MAC layer protocol is CSMA/CD and Ethernet Physical layer which has \nsupport different IEEE 802.3 versions.\nCastle supports 100BaseT1 Ethernet version (100: 100 Mbps, Base: baseband, T1: one \nsingle twisted pair)\nTo continue :MAC interfacing + Castle Ethernet stack as a case study", "type": "Document"}}