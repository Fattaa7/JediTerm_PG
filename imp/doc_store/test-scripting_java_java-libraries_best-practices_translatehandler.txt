{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_java_java-libraries_best-practices_translatehandler.txt"}, "page_content": "Translate Handler\nPost date: Sep 6, 2017 12:02:17 PM\nSimilar to the eventlistener. You can also use translate handler to process CTE \nmessages.\nThe added feature here is that you can halt the message from being reported to CTE \nwhile you extract the needed data only.\nThis can help in optimizing the CTE performance if message is logged with high \nfrequency and/or has large content.\nThis is an Example of how a translate handler is added in CteSetup.\npublicvoid configureExu(IExuTypes exuType, IExu iexu) {     ETS exu = (ETS) iexu;  \nITranslateHandler handler =newTranslateHandler();  \nexu.modTS().objFlexrayDiag().addTranslateHandler(\"Log\", handler);}\n'handler'initiated above is a class implementing the \ninterface'ITranslateHandler'added to the object containing the desired message. It \nhas 2 methods:\n1)PreTranslate: executed before the raw message data is translated\n2)PostTranslate: executed after message translation\nBoth methods return a flag called 'stop processing':\n-Truemeans that this is the end point of this message and it will not be furthermore\nprocessed, thus will not be reported on CTE console.\n- WhileFalse(default) means continue processing.\nReturning true in pre-translate means that message will neither be \ntranslated/post-translated nor reported on console.\nAnd returning true in post-translate, will just block reporting the message on CTE \nconsole.\npublicclassTranslateHandlerimplementsITranslateHandler {        \n@Overridepublicboolean preTranslate(IServerModule module, long execTime, \nIModuleDataDecomposer dac) {System.out.println(dac.consumeRawByte()); // this will \nprint first byte of message contentSystem.out.println(dac.consumeRawByte()); // this\nwill print second byte of message contentreturnfalse;  }    @Overridepublicboolean \npostTranslate(IModuleMessage msg) {StringmsgContent = \nmsg.getValue(\"Data\").getFormattedValue(); //first and only argument of message \n'Log': an array of bytesSystem.out.println( \"Diag Reponse : \" + msgContent \n);returnfalse;  }}\nTranslation simply means that message content coming from firmware is parsed and \nmapped to corresponding message arguments.\nOnce we bind a translate handler with a message, then its methods shall be executed \nin the order described above whenever the specified message comes from firmware.\nIn example above, bytes are being consumed from data composer 'dac' in pre-translate\nwithout knowing that they are part of the Argument 'Data' content in message 'Log'.\nand in post-translate, we get directly the 'Data' content since message is now \nparsed.", "type": "Document"}}