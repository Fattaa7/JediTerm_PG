{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_git_git-submodules.txt"}, "page_content": "Git Submodules\nYou can create a local repo, which references a remote repo. In the same time, you \ncan reference another remote repo as \"submodule\".\nAssume we have 3 projects:\nLocalServer1RemoteServer1 >> added as a remote server for LocalServerRemoteServer2 \n>> added as a submodule\nLocalServer1\nLocalServer1\nRemoteServer1 >> added as a remote server for LocalServer\nRemoteServer1 >> added as a remote server for LocalServer\nRemoteServer2 >> added as a submodule\nRemoteServer2 >> added as a submodule\nAdding a Submodule to a Local Server\nIn your LocalServer > Right click on Submodules\nIn your LocalServer > Right click on Submodules\nIn your LocalServer > Right click on Submodules\nInsert Path, relative \"Working Tree\", where you want the files of the submodule to \nbe placed.\nInsert Path, relative \"Working Tree\", where you want the files of the submodule to \nbe placed.\nInsert Path, relative \"Working Tree\", where you want the files of the submodule to \nbe placed.\nInsert location of the RemoteServer2 (The remote server to be a submodule)\nInsert location of the RemoteServer2 (The remote server to be a submodule)\nInsert location of the RemoteServer2 (The remote server to be a submodule)\nNow, you can see your submodule added, and its files added into the specified \n\"path\". Also \".gitsubmodules\" and \".git/cofig\" modified.\nNow, you can see your submodule added, and its files added into the specified \n\"path\". Also \".gitsubmodules\" and \".git/cofig\" modified.\nNow, you can see your submodule added, and its files added into the specified \n\"path\". Also \".gitsubmodules\" and \".git/cofig\" modified.\nThe latest commit is pulled. You can see the sha1 hash in the \"Server 2\" folder \nproperties\nThe latest commit is pulled. You can see the sha1 hash in the \"Server 2\" folder \nproperties\nThe latest commit is pulled. You can see the sha1 hash in the \"Server 2\" folder \nproperties\nCheckout a specific Submodule commit\nFirst, make sure you see all the submodule commitsFrom git bash:git submodule update\n--remoteIn \"Git Repositories\": Submodules > Server 2 > right click > Show In > \nHistoryIn \"History\": select the desired commit \"commitX\" and right click > reset > \nhardNow, the folder server 2, refers to the SHA1 of commit \"commitX\"\nFirst, make sure you see all the submodule commitsFrom git bash:git submodule update\n--remote\nFirst, make sure you see all the submodule commits\nFrom git bash:git submodule update --remote\nFrom git bash:git submodule update --remote\nIn \"Git Repositories\": Submodules > Server 2 > right click > Show In > HistoryIn \n\"History\": select the desired commit \"commitX\" and right click > reset > hardNow, \nthe folder server 2, refers to the SHA1 of commit \"commitX\"\nIn \"Git Repositories\": Submodules > Server 2 > right click > Show In > History\nIn \"History\": select the desired commit \"commitX\" and right click > reset > hard\nIn \"History\": select the desired commit \"commitX\" and right click > reset > hard\nNow, the folder server 2, refers to the SHA1 of commit \"commitX\"\nNow, the folder server 2, refers to the SHA1 of commit \"commitX\"\nOverwrite Remote Server with the Local Server Submodule Commit\nIf you want commitX to be the used commit also on the remote server \n(RemoteServer1):Go to \"Staging\" viewYou will find the folder Server 2 changed \n(Commit Sha1 is changed) >> stage it >> commit and pushNow, the RemoteServer1 \nreferences the \"commitX\" of the submodule\nIf you want commitX to be the used commit also on the remote server \n(RemoteServer1):Go to \"Staging\" viewYou will find the folder Server 2 changed \n(Commit Sha1 is changed) >> stage it >> commit and pushNow, the RemoteServer1 \nreferences the \"commitX\" of the submodule\nIf you want commitX to be the used commit also on the remote server (RemoteServer1):\nGo to \"Staging\" view\nGo to \"Staging\" view\nYou will find the folder Server 2 changed (Commit Sha1 is changed) >> stage it >> \ncommit and push\nYou will find the folder Server 2 changed (Commit Sha1 is changed) >> stage it >> \ncommit and push\nNow, the RemoteServer1 references the \"commitX\" of the submodule\nNow, the RemoteServer1 references the \"commitX\" of the submodule\nOverwrite Local Server with the Remote Server Submodule Commit\nPull to get the RemoteServer1 filesChoose the desired commit and hard resetIn \"Git \nRepositories\", If your \"Submodules\" does not contain your Submodule:from gitbash:git\nsubmodule update --initIn \"Git Repositories\", right click on your Submodule > Update\nSubmodule\nPull to get the RemoteServer1 filesChoose the desired commit and hard reset\nPull to get the RemoteServer1 files\nChoose the desired commit and hard reset\nChoose the desired commit and hard reset\nIn \"Git Repositories\", If your \"Submodules\" does not contain your Submodule:from \ngitbash:git submodule update --init\nIn \"Git Repositories\", If your \"Submodules\" does not contain your Submodule:\nfrom gitbash:git submodule update --init\nfrom gitbash:git submodule update --init\nIn \"Git Repositories\", right click on your Submodule > Update Submodule\nIn \"Git Repositories\", right click on your Submodule > Update Submodule\nCreate git submodule form git bash\nIn the required repository, right click and open git bash here\nIn the required repository, right click and open git bash here\nIn the required repository, right click and open git bash here\ngit submodule add <GIT_URL> PATH_TO_MODULE\nexample:\ngit add submodule \nssh://azaazaa@forge.vnet.valeo.com:29418/proj2100_dai_br223_fpga_delivery delivery\nThis command will generate two files ( .gitmodules ) and another file with the \nsubmodule name ( delivery in previous example)Commit these two files, after that you\nshould have below view on CoreAlm (submodule is the first folder)\nThis command will generate two files ( .gitmodules ) and another file with the \nsubmodule name ( delivery in previous example)\nThis command will generate two files ( .gitmodules ) and another file with the \nsubmodule name ( delivery in previous example)\nCommit these two files, after that you should have below view on CoreAlm (submodule \nis the first folder)\nCommit these two files, after that you should have below view on CoreAlm (submodule \nis the first folder)\nTo pull submodule's files run below command\nTo pull submodule's files run below command\nTo pull submodule's files run below command\ngit submodule init\ngit submodule update\nTo clone a project with its submodules add ( --recurse-submodules ) option before \ngit clone\nTo clone a project with its submodules add ( --recurse-submodules ) option before \ngit clone\nTo clone a project with its submodules add ( --recurse-submodules ) option before \ngit clone\ngit clone --recurse-submodules \nssh://azaazaa@forge.vnet.valeo.com:29418/proj2100_dia_br223_fpga\nSources:gitHubandgit documentation\nSources:gitHubandgit documentation\nSources:gitHubandgit documentation", "type": "Document"}}