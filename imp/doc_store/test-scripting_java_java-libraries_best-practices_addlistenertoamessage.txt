{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_java_java-libraries_best-practices_addlistenertoamessage.txt"}, "page_content": "[CTE] Add listener to a message\nPost date: Aug 16, 2016 12:20:07 PM\nExample #1\nA simple Listener Example\n1- Implement a Listener class\npublic class ICteEventListenerLIN implements ICteEventListener {\nConsumer<IModuleMessage> listenerHandler = null;\npublic void setlistenerHandler( Consumer<IModuleMessage> handler ){\nlistenerHandler = handler;\n}\npublic void clearlistenerHandler( ){\nlistenerHandler = null;\n}\n@Override\npublic void cteEvent(CteEventType type, String name, Object param) {\nif( listenerHandler == null ) {\nreturn;\n}\nif( type == CteEventType.Message && name.equals(\"msgNoSlaveData\")){ //NOSONAR\nIModuleMessage msg = (IModuleMessage)param;\nlistenerHandler.accept(msg);\n}\n}\n}\n2- Implement the Listener Handler, add/removeCteEventListener whenever it is needed \nfrom you library\npublic class ManualLib implements ILib {\n..........\n..........\n..........\nstatic ICteEventListenerLIN linListener = new ICteEventListenerLIN();\n//Handler\npublic void listenerHandler(IModuleMessage msg){\nmsgContent = msg.getValue(\"ProtectedID\").getFormattedValue();\nSystem.out.println( \"PID\" + msgContent );\nmsgContent = msg.getValue(\"ID\").getFormattedValue();\nSystem.out.println( \"ID\" + msgContent );\n}\npublic void addListener(){\nlinListener.setlistenerHandler( this::listenerHandler );\nexu.modTS().objLinMaster().addCteEventListener( linListener );\n}\npublic void clearListener(){\nlinListener.clearlistenerHandler();\nexu.modTS().objLinMaster().removeCteEventListener( linListener );\n}\npublic void Turn_System_OFF() {\nclearListener();\n}\npublic void Turn_System_ON() {\naddListener();\n}\n..........\n..........\n..........\n}\nExample #2\nListener Example in case you want the listener to persist over several lib calls \n(the case mentioned in below comment from Frank).\n1- In CteSetup class you need to add the listener\nprivate Consumer<IModuleMessage> listener;\n2- Add functions to add/remove a listener in CteSetup class\npublic void addStoreFrameListener( Consumer<IModuleMessage> listener ) {\nthis.listener = listener;\n}\npublic void removeStoreFrameListener( Consumer<IModuleMessage> listener ) {\nthis.listener = null;\n}\n3- Register the listener in CteSetup class\nIn below example we need to add a listener to CamerasDrive module, \nCameraDriverEventListener is the event listener class\nExample:\n@Override\npublic void configureExu(IExuTypes exuType, IExu exu) {\nif( exuType == ExuTypes.TS){\nconfig.ETS iexu = (config.ETS)exu;\niexu.modTS().objCamerasDriver().addCteEventListener(new \nCameraDriverEventListener());\n}\n}\n4- Implement the listener class\nExample:\npublic class CameraDriverEventListener implements ICteEventListener {\n@Override\npublic void cteEvent(CteEventType type, String name, Object param) {\nStoreFrameHIL storeHil = new StoreFrameHIL();\nConsumer<IModuleMessage> listener = CteSetup.listener;\nif( listener == null ) {\nreturn;\n}\nif( type == CteEventType.Message && name.equals(\"msgStorePart\")){ //msgStorePart is \nthe target message\nIModuleMessage msg = (IModuleMessage) param;\nlistener.accept(msg); //This calls the listener handler\n}\n}\n}\n5- Implement the listener handler (method that will be called when the message is \nprinted in the CTE)\nExample:\npublic void scanPointListener( IModuleMessage msg ) {\n_data = msg.getValue(\"Data\").getFormattedValue();//message data\npart = HexString.parseRawArray(_data);//parsed message data\n}\n6- From the library call add/remove the listener when needed\nExample:\nCteSetup cteSetup = \n(CteSetup)exu().getUserValues().getObject(CteSetup.class.getName());\n//Add listener\ncteSetup.addStoreFrameListener( this::scanPointListener);\n//Remove listener\ncteSetup.removeStoreFrameListener( this::scanPointListener);", "type": "Document"}}