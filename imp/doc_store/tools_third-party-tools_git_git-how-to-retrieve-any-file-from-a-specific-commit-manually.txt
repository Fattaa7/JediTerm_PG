{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_git_git-how-to-retrieve-any-file-from-a-specific-commit-manually.txt"}, "page_content": "[Git] How to restore any file from a specific commit (Manually)\nYou may face a situation where you are unable to restore your data. This might \nhappen especially if you 're using 'git stash -u' command which saves your changes \nincluding the untracked files to be used later.\nNow to be able to restore your file(s) manually, we should mention at the beginning \nhow git saves your files.\nGit stores information in a form of something it calls 'objects'. These objects are \ndivided into 4 main categories\n1- blob: represents a file (e.g. 'source.c' will be saved in a blob). blob will save\nimportant information about individual files, not only their contents but also their\ncreation date, their name and size,..etc so that it can keep track of all the file \nattributes\n2- commit: represents the following:\ncommit message the user type when he creates a new commit\ncommit message the user type when he creates a new commit\ncommit author: who created the commit\ncommit author: who created the commit\ncommit committer\ncommit committer\ncommit date and time\ncommit date and time\ntree: a reference to folder contains the changes made to this commit\ntree: a reference to folder contains the changes made to this commit\ncommit parent: the commit id of the previous commit in the changelog history (a \ncommit may have more than one parent commit)\ncommit parent: the commit id of the previous commit in the changelog history (a \ncommit may have more than one parent commit)\n3- tree: represents directory/folder including all of the folder attributes like its\nname, date of creation, size,..etc\n4- tags annotations: represents tags created by the user. It's similar to 'commit' \nobject\nFor any of these objects, git refer to it by using 40 hex characters known as hash \n(SHA1 hash). this hash changes based on the change of the git object; this is how \ngit can track any change. It's simply computes the SHA1 hash of the object, if it \nhas changed then there must be one of the object contents has also changed\nNow if we able to open the commit object and check its folders (trees) and files \n(blobs) then we can reach any file and retrieve it manually but how can we do that?\neither get the commit id of the commit you want to restore its files (by executing \n'git log' for example) or if you want to get stashed commit id, you can head to this\nfile: <your-repo>\\.git\\refs\\stash Note that: '.git' folder is hidden by default, to \nview it you should enable this option as shown in 'viewHiddenFile_fig1.PNG' \nscreenshot\neither get the commit id of the commit you want to restore its files (by executing \n'git log' for example) or if you want to get stashed commit id, you can head to this\nfile: <your-repo>\\.git\\refs\\stash Note that: '.git' folder is hidden by default, to \nview it you should enable this option as shown in 'viewHiddenFile_fig1.PNG' \nscreenshot\nthen you should see your stashed commit id (if exists) in this file. Just copy it\nopen 'git bash': the shell that's normally installed with git\nopen 'git bash': the shell that's normally installed with git\nTo make sure the hash id you 're looking for represents a commit: you can type the \nfollowing command: git cat-file -t <commit-d> (ex. git cat-file -t \n6813aa4f5df494f8970f29ece9b03fddd8064d8a prints 'commit' as an output). The cat-file\ncommand is similar to 'cat' command in linux which view and concatenate multiple \ntext files (if any) but this one is directed to read the git objects\nTo make sure the hash id you 're looking for represents a commit: you can type the \nfollowing command: git cat-file -t <commit-d> (ex. git cat-file -t \n6813aa4f5df494f8970f29ece9b03fddd8064d8a prints 'commit' as an output). The cat-file\ncommand is similar to 'cat' command in linux which view and concatenate multiple \ntext files (if any) but this one is directed to read the git objects\nTo view the content of the commit object type:git cat-file -p<commit-d>(screenshot \nexample in showCommitContent_fig2.PNG)\nTo view the content of the commit object type:git cat-file -p<commit-d>(screenshot \nexample in showCommitContent_fig2.PNG)\nHere you can see the commit contents and the hash of tree. As we mentioned, tree \nrepresents a folder, so this is the folder thatinclude all the changes made to this \ncommit\nAgain, to view the tree content we can use 'git cat-file -p <tree-hash>' (screenshot\nexample in showTreeContent_fig3.PNG)\nAgain, to view the tree content we can use 'git cat-file -p <tree-hash>' (screenshot\nexample in showTreeContent_fig3.PNG)\nHere we have a reference to each file (blob) or tree(folder) in this commit. It's \nlike a snapshot in the time of all of these files and folders\nyou can recursively execute the command:'git cat-file -p <tree-hash>'to view any \nfolder you want. When you reach the file you want to restore, you can also type'git \ncat-file -p <blob-hash>' to view its content (screenshot example in \nshowBlobContent_fig4.PNG)\nyou can recursively execute the command:'git cat-file -p <tree-hash>'to view any \nfolder you want. When you reach the file you want to restore, you can also type'git \ncat-file -p <blob-hash>' to view its content (screenshot example in \nshowBlobContent_fig4.PNG)\nYou also can redirect the file content to any file type you want by executing:'git \ncat-file -p <blob-hash> > <file_name>.<file_extention>' ex. 'git cat-file -p \n70807f6c97119b24bccc0417f291ab542fd29d2e > export_from_dev_project.cmd'If you are \nlooking for 'export_from_dev_project.cmd' content and typed this, It will show you \nthe content of this file but will save it in a file named \n'export_from_dev_project.cmd' in the current directory\nYou also can redirect the file content to any file type you want by executing:'git \ncat-file -p <blob-hash> > <file_name>.<file_extention>' ex. 'git cat-file -p \n70807f6c97119b24bccc0417f291ab542fd29d2e > export_from_dev_project.cmd'If you are \nlooking for 'export_from_dev_project.cmd' content and typed this, It will show you \nthe content of this file but will save it in a file named \n'export_from_dev_project.cmd' in the current directory", "type": "Document"}}