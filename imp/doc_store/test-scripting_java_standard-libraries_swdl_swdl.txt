{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_java_standard-libraries_swdl_swdl.txt"}, "page_content": "SWDL\nAdvantages of an SWDL Test approach based on ISystems + Castle + Customer SWDL Tool\nThere are already various so called \"flashing stations\"  setups. But using above \nmentioned setup has several advantages:\nReusability in potentially any whished project which uses a C5 Castle test \nsetupSharing test side implementations like e.g. (project dependent)Libs to do rest \nbus simulations \u2013 and accessing CAN/ FlexRay signalsLibs to do invoke UDS Diagnostic\nservicesLibs used to compose XCP commands (a2l based)Access to all black box \ninterfaces (e.g. also discrete IOs, sensor lines, ...)Automated reportsDefined \nworkflow \u2013 including requirements traceability\nReusability in potentially any whished project which uses a C5 Castle test setup\nReusability in potentially any whished project which uses a C5 Castle test setup\nSharing test side implementations like e.g. (project dependent)\nSharing test side implementations like e.g. (project dependent)\nLibs to do rest bus simulations \u2013 and accessing CAN/ FlexRay signals\nLibs to do rest bus simulations \u2013 and accessing CAN/ FlexRay signals\nLibs to do invoke UDS Diagnostic services\nLibs to do invoke UDS Diagnostic services\nLibs used to compose XCP commands (a2l based)\nLibs used to compose XCP commands (a2l based)\nAccess to all black box interfaces (e.g. also discrete IOs, sensor lines, ...)\nAccess to all black box interfaces (e.g. also discrete IOs, sensor lines, ...)\nAutomated reports\nAutomated reports\nDefined workflow \u2013 including requirements traceability\nDefined workflow \u2013 including requirements traceability\nImplementation Status (Software & Hardware)\nFirst User Project using the above mentioned approach is MB79 P2  - functionality \nwas tested using this commit:50c3ef1\nNeeded Java Packages are: swdlLib and its sub packages. Notice that some of these \npackages are potentially added into the CTE itself (or std lib) to support easy \ndeployment.\na) ISystems integration tested an working with latest Isystems SDK (see picture 3)\nb) Running external SWDL tools (in cmd mode) in parallel to the castle functions \nwhile reading its stdout and std error streams:\nSample Implementation for ValeoFlashing.exe ready and tested (see picture 2)\nFor invocation of any customer specific tools the User projects can simply implement\nsome basic interfaces like:\nISwdlTool, ISwdlToolListener, ISwdlObserver, ISwdlCallback in order to use: \nSoftwareDownloadLib.\nc) Ultimatly the Debugger need to be decoupled from the DUT after the flashing-> \ndiscussion initiated with CASTLE HW team to come up with a pcb for it (which can be \nplaced in between the debugger and the DUT(s)\nwhile allowing to open/close the connections via commands send via CAN/Rs232 from \nCASTLE)\nSamples and Code Snippets to illustrate the usage on CTE ILib and tsxml layer:\nPicture 1: Target setup SAMPLE e.g. for radar TPL:\nPicture 2: User Project Implementation on ILib Layer using SoftwareDownloadLib.java \nand its sub packages\nPicture 3: CASTLE Task to ilustrate usage of ISystems Debugger Integration:\nPicture 4: Sample tsxml based test case might look like this (covering all GEEDS VTP\nSWDL questions)\n- if you need an entire sample contactmarkus.kraenkel@valeo.com\nPicture 5: Sample Logging (c5r) of simple download performed by running a tsxml on \nCTE\nGEEDs Valeo Test Plan (VTP) Checklist Questions to be generically covered/coverable \nwith a minimum of effort using this approach\nDetailed Standard Library Description", "type": "Document"}}