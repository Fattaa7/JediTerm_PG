{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_upa_usv-sensors_usv-sensors_usv-sensors.txt"}, "page_content": "system-overview ---\n[USV10 Sensors] - System Overview\nSystem Overview\nA new version of Ultrasonic Sensors. Where the ECU is usually connected to 12 and up\nto 24 sensors over a DSI3xc (Extended Class) bus.\nIn this article, we'll have a quick overview on the application level requirements \nand how the communication goes between the ECU and the sensor.\nIntroduction\nOne or multiple USV sensors have to be connected to a single- or multiple channel \nDSI Master ECU. Sensors can be connected according to one of the following three \ntopologies :\nPoint-To-Point(P2P)topology requires that each sensor is connected to a separate \nchannel of the DSI master. Such direct one-to-one connection allows all sensors to \nbe clearly identified in terms of the position they are mounted in the car.\nPoint-To-Point(P2P)topology requires that each sensor is connected to a separate \nchannel of the DSI master. Such direct one-to-one connection allows all sensors to \nbe clearly identified in terms of the position they are mounted in the car.\nPoint-To-Point(P2P)topology requires that each sensor is connected to a separate \nchannel of the DSI master. Such direct one-to-one connection allows all sensors to \nbe clearly identified in terms of the position they are mounted in the car.\nParallel Bus(BUS)topology allows to connect multiple sensors to a single channel of \na DSI master thus reducing the total cable lengths. Unlike in P2P the BUS topology \nrequires the attached sensors to be preprogrammed with addresses (code numbers) \nreflecting their mount positions in the car.\nParallel Bus(BUS)topology allows to connect multiple sensors to a single channel of \na DSI master thus reducing the total cable lengths. Unlike in P2P the BUS topology \nrequires the attached sensors to be preprogrammed with addresses (code numbers) \nreflecting their mount positions in the car.\nParallel Bus(BUS)topology allows to connect multiple sensors to a single channel of \na DSI master thus reducing the total cable lengths. Unlike in P2P the BUS topology \nrequires the attached sensors to be preprogrammed with addresses (code numbers) \nreflecting their mount positions in the car.\nDaisy-Chain(CHAIN)topology allows to connect multiple sensors to a single channel of\na DSI master (similar like BUS) but due to the specific way of wiring the sensors \nare chained one after another along the cable. This allows for identifying the mount\nposition of each sensor automatically using some additional logic and protocol at \nboth master and sensor sides.\nDaisy-Chain(CHAIN)topology allows to connect multiple sensors to a single channel of\na DSI master (similar like BUS) but due to the specific way of wiring the sensors \nare chained one after another along the cable. This allows for identifying the mount\nposition of each sensor automatically using some additional logic and protocol at \nboth master and sensor sides.\nDaisy-Chain(CHAIN)topology allows to connect multiple sensors to a single channel of\na DSI master (similar like BUS) but due to the specific way of wiring the sensors \nare chained one after another along the cable. This allows for identifying the mount\nposition of each sensor automatically using some additional logic and protocol at \nboth master and sensor sides.\nIn P2P and BUS topologies, the sensors are being powered through a separate power \nline. In CHAIN topology power supply is connected to the same line with all data \ntransceivers.\nBasic DSI3 and USV Sensor concepts\nWe will cover some basic concepts and the full characteristic of DSI3 features are \ndefined in the following articleDSI3\n(NOTE : The actual implementation planned for USV10 is not typically follow DSI3 \nstandard, there are some modifications for USV application).\nso we call it DSI3xc (Extended Class)\nPower Interface :\nIn P2P and BUS topologies, the power for USV sensor is being delivered over a \ndedicated line/wire.In CHAIN topology, the same wire is used in time-interlaced mode\nfor both power delivery and for communication.\nIn P2P and BUS topologies, the power for USV sensor is being delivered over a \ndedicated line/wire.\nIn P2P and BUS topologies, the power for USV sensor is being delivered over a \ndedicated line/wire.\nIn CHAIN topology, the same wire is used in time-interlaced mode for both power \ndelivery and for communication.\nIn CHAIN topology, the same wire is used in time-interlaced mode for both power \ndelivery and for communication.\nFor the duration of regular power phase a low impedance voltage source is connected \nto the CHAIN line (assumed 20..24 V). After this time the CHAIN line gets \ndisconnected from voltage source and remains at low power level (assumed 4\u00b10,25 V) \nused for data communication\nBus Interface \u2013 Receiver :\nIn P2P and BUS topologies, the receiver is used all the time.In CHAIN topology, the \nreceiver is used only between power phases. The receiver will not be disconnected \nfrom CHAIN line for the duration of power phases.\nIn P2P and BUS topologies, the receiver is used all the time.\nIn P2P and BUS topologies, the receiver is used all the time.\nIn CHAIN topology, the receiver is used only between power phases. The receiver will\nnot be disconnected from CHAIN line for the duration of power phases.\nIn CHAIN topology, the receiver is used only between power phases. The receiver will\nnot be disconnected from CHAIN line for the duration of power phases.\nBus Interface \u2013 Transmitter :\nThe transmitter allows slave for sending responses to commands received from DSI \nMaster. Responses are 32-bit or longer numbers encoded into current sink of only \nthree levels \u2013 0 (zero), 12 and 24 mA (fixed by DSI specification). The encoding \ntranslates a 4-bit number (a nibble, half-byte) into a sequence (called \u201csymbol\u201d) of\n3 time periods (called \u201cchips\u201d), each of which is assigned a sink current of one of \nthose three levels. The chips are sent one after another.\nEncoding of response data : Each data nibble shall be encoded into triplet of chip. \nEach chip of triplet represents 3-levels of driver current. Encoder shall be defined\nin following table\nCommunication Modes\nThere are two modes (cycles) of communication\nCRM (Command Response Mode) :used for normal communication between Master(ECU) \nrequest and Slaves(Sensors) response.\nCRM (Command Response Mode) :used for normal communication between Master(ECU) \nrequest and Slaves(Sensors) response.\nfor example ( Read, Write, Program, StartMeasurement )\nFor more details :[USV10 Sensors] - DSI3xc Commands Summary\nPDCM (Periodic Data Collection Mode) :used for transferring Slaves(Sensors) volume \ndata to Master(ECU).\nPDCM (Periodic Data Collection Mode) :used for transferring Slaves(Sensors) volume \ndata to Master(ECU).\nfor example ( BRC ) - Broadcast Read Command\nThe BRC command instructs all DSI slaves to send their volume data (sensor data in \npackets bigger than 32 bits) so called PDCM Cycle.\nThe PDCM Cycle is a communication period with strict assigned time-slots in which \nthe individual sensors are allowed to transmit their volume data towards the DSI \nMaster. The time slots are assigned sequentially for each sensor according to the \ndiscovered or in another way assigned SENSOR_ID\nand each PDCM Packet contains :", "type": "Document"}}