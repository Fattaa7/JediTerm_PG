{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_cameras-hw-enhancements.txt"}, "page_content": "Cameras HW Enhancements\nMost of Video in (capture) handling logic is implemented in Java layer, which \nresulted in two limitations :\nFunctional limitations :E.g. Recovering scrambled ECU videos in Java leaves SDram \nvideo frames scrambled. Hence, not ready for image processing apps (Image \nCompare)E.g. Converting ECU video color map from YUV to RGB in Java leaves the \noriginal YUV frame in SDram. Applying Histogram filters on YUV frames results in \npoor profiles as the Luma component 'Y' represents half image data.\nFunctional limitations :\nE.g. Recovering scrambled ECU videos in Java leaves SDram video frames scrambled. \nHence, not ready for image processing apps (Image Compare)E.g. Converting ECU video \ncolor map from YUV to RGB in Java leaves the original YUV frame in SDram. Applying \nHistogram filters on YUV frames results in poor profiles as the Luma component 'Y' \nrepresents half image data.\nE.g. Recovering scrambled ECU videos in Java leaves SDram video frames scrambled. \nHence, not ready for image processing apps (Image Compare)\nE.g. Recovering scrambled ECU videos in Java leaves SDram video frames scrambled. \nHence, not ready for image processing apps (Image Compare)\nE.g. Converting ECU video color map from YUV to RGB in Java leaves the original YUV \nframe in SDram. Applying Histogram filters on YUV frames results in poor profiles as\nthe Luma component 'Y' represents half image data.\nE.g. Converting ECU video color map from YUV to RGB in Java leaves the original YUV \nframe in SDram. Applying Histogram filters on YUV frames results in poor profiles as\nthe Luma component 'Y' represents half image data.\nPerformance limitation :Recovering scrambled video data in Java (in debugging stages\n- before obtaining the scrambling scheme) is time consumptive as it requires test \ncase changes / test bench restart while debugging.\nPerformance limitation :\nRecovering scrambled video data in Java (in debugging stages - before obtaining the \nscrambling scheme) is time consumptive as it requires test case changes / test bench\nrestart while debugging.\nRecovering scrambled video data in Java (in debugging stages - before obtaining the \nscrambling scheme) is time consumptive as it requires test case changes / test bench\nrestart while debugging.\nRecovering scrambled video data in Java (in debugging stages - before obtaining the \nscrambling scheme) is time consumptive as it requires test case changes / test bench\nrestart while debugging.\nTo overcome such limitations, we have ported the De-scrambling logic in HW \n(castle_v_vid_in_axi4s_v1_00_a core) and made it register accessible through FW to \nautomate the recovering process.\nAlso, Color map conversion (YUV_4:2:2 to RGB_8:8:8) is implemented in FW to offline \nconvert SDram video frames to RGB to increase HIL Histogram quality.\nMeasure input video parameters in runtime\nTODO\nRuntime validation of video parameters\nTODO\nInput Video Auto detect / Auto configure\nTODO\nYUV Flags HW Switching\nTODO\nAnalog video de-interlacing\nPlease refer to thiswiki", "type": "Document"}}