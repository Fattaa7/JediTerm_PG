{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_supported-image-processing-applications-in-c5-environment.txt"}, "page_content": "Supported Image Processing Applications in C5 Environment\nRecently, many Image processing applications have been tech trendy in \nmarket.Deploying such applications in our test environment will allow for more \nprecise and automated Video validation activities.Castle 5 contribution to Image \nprocessing field is not only limited to Image Compare feature.Image compare, \nMono-colored frames detection, and freezed video detection features are included and\ndiscussed thoroughly in this article\nRecently, many Image processing applications have been tech trendy in market.\nRecently, many Image processing applications have been tech trendy in market.\nDeploying such applications in our test environment will allow for more precise and \nautomated Video validation activities.\nDeploying such applications in our test environment will allow for more precise and \nautomated Video validation activities.\nCastle 5 contribution to Image processing field is not only limited to Image Compare\nfeature.\nCastle 5 contribution to Image processing field is not only limited to Image Compare\nfeature.\nImage compare, Mono-colored frames detection, and freezed video detection features \nare included and discussed thoroughly in this article\nImage compare, Mono-colored frames detection, and freezed video detection features \nare included and discussed thoroughly in this article\nImage Compare FeatureImage compare is mainly used in test cases to validate a \ncaptured frame against a reference one.Deployed in all Castle 5 DVS projects to \novercome the need for manual image comparison.Castle 5 offers two options to compare\nimages:HIL Mode Image CompareSpecifications:Runs in FW context (on the FPGA).Faster \nruntime performance due to following reasons :Histogram operation does not imply \nheavy processing.Runs on already stored frames in SD-Ram (memory access latency is \nlow).Not so reliable in detecting minor details.TODO : state HIL image compare test \ncase duration.\nImage Compare Feature\nImage compare is mainly used in test cases to validate a captured frame against a \nreference one.\nImage compare is mainly used in test cases to validate a captured frame against a \nreference one.\nDeployed in all Castle 5 DVS projects to overcome the need for manual image \ncomparison.\nDeployed in all Castle 5 DVS projects to overcome the need for manual image \ncomparison.\nCastle 5 offers two options to compare images:\nCastle 5 offers two options to compare images:\nHIL Mode Image CompareSpecifications:Runs in FW context (on the FPGA).Faster runtime\nperformance due to following reasons :Histogram operation does not imply heavy \nprocessing.Runs on already stored frames in SD-Ram (memory access latency is \nlow).Not so reliable in detecting minor details.TODO : state HIL image compare test \ncase duration.\nHIL Mode Image Compare\nSpecifications:Runs in FW context (on the FPGA).Faster runtime performance due to \nfollowing reasons :Histogram operation does not imply heavy processing.Runs on \nalready stored frames in SD-Ram (memory access latency is low).Not so reliable in \ndetecting minor details.TODO : state HIL image compare test case duration.\nSpecifications:\nRuns in FW context (on the FPGA).Faster runtime performance due to following reasons\n:Histogram operation does not imply heavy processing.Runs on already stored frames \nin SD-Ram (memory access latency is low).Not so reliable in detecting minor \ndetails.TODO : state HIL image compare test case duration.\nRuns in FW context (on the FPGA).\nRuns in FW context (on the FPGA).\nFaster runtime performance due to following reasons :Histogram operation does not \nimply heavy processing.Runs on already stored frames in SD-Ram (memory access \nlatency is low).\nFaster runtime performance due to following reasons :\nHistogram operation does not imply heavy processing.\nHistogram operation does not imply heavy processing.\nRuns on already stored frames in SD-Ram (memory access latency is low).\nRuns on already stored frames in SD-Ram (memory access latency is low).\nNot so reliable in detecting minor details.\nNot so reliable in detecting minor details.\nTODO : state HIL image compare test case duration.\nTODO : state HIL image compare test case duration.\nHow it works:Applies Histogram operation on each image and compares both histogram \nresulted curves.Image Histogram in brief is the process of scanning an image and \ncounting of the number of pixels found at each intensity value.Considering an RGB \nimage, Castle 5 will be conducting a 3-D histogram on the image.As it will count the\nnumber of pixels for every color component.\nHow it works:Applies Histogram operation on each image and compares both histogram \nresulted curves.Image Histogram in brief is the process of scanning an image and \ncounting of the number of pixels found at each intensity value.Considering an RGB \nimage, Castle 5 will be conducting a 3-D histogram on the image.As it will count the\nnumber of pixels for every color component.\nHow it works:Applies Histogram operation on each image and compares both histogram \nresulted curves.Image Histogram in brief is the process of scanning an image and \ncounting of the number of pixels found at each intensity value.Considering an RGB \nimage, Castle 5 will be conducting a 3-D histogram on the image.As it will count the\nnumber of pixels for every color component.\nHow it works:Applies Histogram operation on each image and compares both histogram \nresulted curves.Image Histogram in brief is the process of scanning an image and \ncounting of the number of pixels found at each intensity value.Considering an RGB \nimage, Castle 5 will be conducting a 3-D histogram on the image.As it will count the\nnumber of pixels for every color component.\nHow it works:\nApplies Histogram operation on each image and compares both histogram resulted \ncurves.\nApplies Histogram operation on each image and compares both histogram resulted \ncurves.\nImage Histogram in brief is the process of scanning an image and counting of the \nnumber of pixels found at each intensity value.\nImage Histogram in brief is the process of scanning an image and counting of the \nnumber of pixels found at each intensity value.\nConsidering an RGB image, Castle 5 will be conducting a 3-D histogram on the image.\nConsidering an RGB image, Castle 5 will be conducting a 3-D histogram on the image.\nAs it will count the number of pixels for every color component.\nAs it will count the number of pixels for every color component.\nCastle 5 supports FW conversion of YUV frames to RGB for proper Histogram operation.\nCastle 5 supports FW conversion of YUV frames to RGB for proper Histogram operation.\nCastle 5 supports FW conversion of YUV frames to RGB for proper Histogram operation.\nCastle 5 supports FW conversion of YUV frames to RGB for proper Histogram operation.\nCastle 5 supports FW conversion of YUV frames to RGB for proper Histogram operation.\nCastle 5 supports FW conversion of YUV frames to RGB for proper Histogram operation.\nDirect Mode Image CompareSpecifications:Runs in test case context (on PC)Slower \nruntime performance due to following reasons :HIL-Direct switching delay.Acting on \nFile System memory.How it works:Within the test case, after capturing a frame and \nstoring it in PC, an OpenCV-based Python script is invoked to compare the captured \nframe with the reference one in PC context.\nDirect Mode Image CompareSpecifications:Runs in test case context (on PC)Slower \nruntime performance due to following reasons :HIL-Direct switching delay.Acting on \nFile System memory.How it works:Within the test case, after capturing a frame and \nstoring it in PC, an OpenCV-based Python script is invoked to compare the captured \nframe with the reference one in PC context.\nDirect Mode Image Compare\nSpecifications:Runs in test case context (on PC)Slower runtime performance due to \nfollowing reasons :HIL-Direct switching delay.Acting on File System memory.\nSpecifications:\nRuns in test case context (on PC)Slower runtime performance due to following reasons\n:HIL-Direct switching delay.Acting on File System memory.\nRuns in test case context (on PC)\nRuns in test case context (on PC)\nSlower runtime performance due to following reasons :HIL-Direct switching \ndelay.Acting on File System memory.\nSlower runtime performance due to following reasons :\nHIL-Direct switching delay.\nHIL-Direct switching delay.\nActing on File System memory.\nActing on File System memory.\nHow it works:Within the test case, after capturing a frame and storing it in PC, an \nOpenCV-based Python script is invoked to compare the captured frame with the \nreference one in PC context.\nHow it works:\nWithin the test case, after capturing a frame and storing it in PC, an OpenCV-based \nPython script is invoked to compare the captured frame with the reference one in PC \ncontext.\nWithin the test case, after capturing a frame and storing it in PC, an OpenCV-based \nPython script is invoked to compare the captured frame with the reference one in PC \ncontext.\nWithin the test case, after capturing a frame and storing it in PC, an OpenCV-based \nPython script is invoked to compare the captured frame with the reference one in PC \ncontext.", "type": "Document"}}