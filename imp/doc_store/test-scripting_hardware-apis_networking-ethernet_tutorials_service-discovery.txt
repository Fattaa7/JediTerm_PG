{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_networking-ethernet_tutorials_service-discovery.txt"}, "page_content": "Service Discovery\nPosition in Ethernet Stack\nEntries Overview\nThe SD protocol is build on exchanging \"Entries\". These entries are used for:\nA client to find or search for a needed serviceA server to offer or stop offer a \nserviceA client to subscribe to event group of a specific serviceA server to send \nevents to the subscriber clients\nA client to find or search for a needed service\nA client to find or search for a needed service\nA server to offer or stop offer a service\nA server to offer or stop offer a service\nA client to subscribe to event group of a specific service\nA client to subscribe to event group of a specific service\nA server to send events to the subscriber clients\nA server to send events to the subscriber clients\nSD Message Format\nID = 0xFFFF8100Length field 32 bitsSD Message as follows\nID = 0xFFFF8100\nID = 0xFFFF8100\nLength field 32 bits\nLength field 32 bits\nSD Message as follows\nSD Message as follows\nSD Entry Format\nSD Option Format\nEntry Types\nFind Service (Client > Server)\nNo End point Or Multicast OptionsCan put Wildcards toService Instance IdMajor \nVersion Id: No very expected, as different major versions are not compatible.Minor \nVersion Id\nNo End point Or Multicast Options\nNo End point Or Multicast Options\nCan put Wildcards toService Instance IdMajor Version Id: No very expected, as \ndifferent major versions are not compatible.Minor Version Id\nCan put Wildcards to\nService Instance Id\nService Instance Id\nMajor Version Id: No very expected, as different major versions are not compatible.\nMajor Version Id: No very expected, as different major versions are not compatible.\nMinor Version Id\nMinor Version Id\nOffer Service (Server > Client)\nShall not use wildcardsAt least one End point optionClient use this to for example \nsubscribe to event group of this service instance.Also, this is the end point from \nwhich the events are send.\nShall not use wildcards\nShall not use wildcards\nAt least one End point optionClient use this to for example subscribe to event group\nof this service instance.Also, this is the end point from which the events are send.\nAt least one End point option\nClient use this to for example subscribe to event group of this service instance.\nClient use this to for example subscribe to event group of this service instance.\nAlso, this is the end point from which the events are send.\nAlso, this is the end point from which the events are send.\nStop Offer Service (Server > Client)\nEntry fields just like Offerexcept: TTL = 0\nEntry fields just like Offer\nEntry fields just like Offer\nexcept: TTL = 0\nexcept: TTL = 0\nSubscribe Event Group (Client > Server)\nAssume we have 16 clients, need to subscribe to the same:Service IDInstance IDMajor \nVersionEvent Group IdTo differentiate between those Subscribe Event Groups entries, \nwe give uniqueCountervalue to eachServer reflects theCountervalue to the Ack\nAssume we have 16 clients, need to subscribe to the same:Service IDInstance IDMajor \nVersionEvent Group Id\nAssume we have 16 clients, need to subscribe to the same:\nService ID\nService ID\nInstance ID\nInstance ID\nMajor Version\nMajor Version\nEvent Group Id\nEvent Group Id\nTo differentiate between those Subscribe Event Groups entries, we give \nuniqueCountervalue to each\nTo differentiate between those Subscribe Event Groups entries, we give \nuniqueCountervalue to each\nServer reflects theCountervalue to the Ack\nServer reflects theCountervalue to the Ack\nStop Subscribe Event Group (Client > Server)\nSame Entry fields as Subscribe Event GroupExcept: TTL = 0\nSame Entry fields as Subscribe Event Group\nSame Entry fields as Subscribe Event Group\nExcept: TTL = 0\nExcept: TTL = 0\nSubscribe Event Group Ack (Server > Client)\nThe following fields are identical to the Acked \"Subscribe Event Group\" EntryService\nIdInstance IdMajor VersionEvent Group IdTTLCounterIf the event group contains events\nthat are sent using multicastInclude an IPv4 Multicast option\nThe following fields are identical to the Acked \"Subscribe Event Group\" EntryService\nIdInstance IdMajor VersionEvent Group IdTTLCounter\nThe following fields are identical to the Acked \"Subscribe Event Group\" Entry\nService Id\nService Id\nInstance Id\nInstance Id\nMajor Version\nMajor Version\nEvent Group Id\nEvent Group Id\nTTL\nTTL\nCounter\nCounter\nIf the event group contains events that are sent using multicastInclude an IPv4 \nMulticast option\nIf the event group contains events that are sent using multicast\nInclude an IPv4 Multicast option\nInclude an IPv4 Multicast option\nSubscribe Event Group Nack (Server > Client)\nLike Subscribe Event Group AckExcept: TTL = 0\nLike Subscribe Event Group Ack\nLike Subscribe Event Group Ack\nExcept: TTL = 0\nExcept: TTL = 0\nNotes\nIf entry uni-cast flag == 0 >> do not replyMulticast entries, received by multiple \ndestinationsEach destination shall reply after random delay between defined Min and \nMax >> to avoid congestionFor a serverIf number of clients < Threshold >> Use \nuni-cast for sending eventsIf number of clients >= Threshold >> Use multicast for \nsending events\nIf entry uni-cast flag == 0 >> do not reply\nIf entry uni-cast flag == 0 >> do not reply\nMulticast entries, received by multiple destinationsEach destination shall reply \nafter random delay between defined Min and Max >> to avoid congestion\nMulticast entries, received by multiple destinations\nEach destination shall reply after random delay between defined Min and Max >> to \navoid congestion\nEach destination shall reply after random delay between defined Min and Max >> to \navoid congestion\nFor a serverIf number of clients < Threshold >> Use uni-cast for sending eventsIf \nnumber of clients >= Threshold >> Use multicast for sending events\nFor a server\nIf number of clients < Threshold >> Use uni-cast for sending events\nIf number of clients < Threshold >> Use uni-cast for sending events\nIf number of clients >= Threshold >> Use multicast for sending events\nIf number of clients >= Threshold >> Use multicast for sending events\nTiming\nServer\nClient\nArxml\nCASTLE in SD\nSD layer is on top of Socket Adaptor\nSD layer is on top of Socket Adaptor\nSD layer is on top of Socket Adaptor\nAs a Server\nWhen Receive \"Find\" >> Send \"Offer\"When Receiver \"Subscribe\" >> Send \"Ack\"User can \ntrigger sending \"Offer\", \"Stop Offer\"User can trigger sending events (Pdus) to \nsubscribed clients on uni-cast or multicast based on thresholdUser can trigger \nstarting timing sequence \"Initial Phase\" > \"Repetition Phase\" > \"Main Phase\"Main \nPhase with cyclic offerMain Phase without cyclic offer\nWhen Receive \"Find\" >> Send \"Offer\"\nWhen Receive \"Find\" >> Send \"Offer\"\nWhen Receiver \"Subscribe\" >> Send \"Ack\"\nWhen Receiver \"Subscribe\" >> Send \"Ack\"\nUser can trigger sending \"Offer\", \"Stop Offer\"\nUser can trigger sending \"Offer\", \"Stop Offer\"\nUser can trigger sending events (Pdus) to subscribed clients on uni-cast or \nmulticast based on threshold\nUser can trigger sending events (Pdus) to subscribed clients on uni-cast or \nmulticast based on threshold\nUser can trigger starting timing sequence \"Initial Phase\" > \"Repetition Phase\" > \n\"Main Phase\"Main Phase with cyclic offerMain Phase without cyclic offer\nUser can trigger starting timing sequence \"Initial Phase\" > \"Repetition Phase\" > \n\"Main Phase\"\nMain Phase with cyclic offer\nMain Phase with cyclic offer\nMain Phase without cyclic offer\nMain Phase without cyclic offer\nAs a Client\nHandles received \"Offer\", \"Stop Offer\"User can trigger \"Subscribe\", \"Stop subscribe\"\nand \"Find\"User can trigger starting timing sequence \"Initial Phase\" > \"Repetition \nPhase\" > \"Main Phase\"Main Phase with cyclic findMain Phase without cyclic findWhen \noffer is received, no find is sent\nHandles received \"Offer\", \"Stop Offer\"\nHandles received \"Offer\", \"Stop Offer\"\nUser can trigger \"Subscribe\", \"Stop subscribe\" and \"Find\"\nUser can trigger \"Subscribe\", \"Stop subscribe\" and \"Find\"\nUser can trigger starting timing sequence \"Initial Phase\" > \"Repetition Phase\" > \n\"Main Phase\"Main Phase with cyclic findMain Phase without cyclic findWhen offer is \nreceived, no find is sent\nUser can trigger starting timing sequence \"Initial Phase\" > \"Repetition Phase\" > \n\"Main Phase\"\nMain Phase with cyclic find\nMain Phase with cyclic find\nMain Phase without cyclic find\nMain Phase without cyclic find\nWhen offer is received, no find is sent\nWhen offer is received, no find is sent\nGenerally\nSysgengenerates the following for each service:SD messages socket connectionsUsed \nfor exchanging the SD messages (Find/Offer/StopOffer/Subs/StopSubs/SubsAck-Nack)Both\nhas same local address, which is the address of the service provider.One for remote \nmulticast (Used with find and offer/StopOffer)One for remote unicast (Used with \nSubs-StopSubs/SubsAck-NACK)In FW: Upon reception of Offer/Subs, The firmware updates\nthe remote SD unicast address based on the following priority order:SD Ipv4 End \nPoint Optionif receivedIncoming message src addressMethods And Events socket \nconnectionUsed for exchanging the methods and events of a service.In FW: upon \nreception of Offer/Subs:Local address is sent asIpv4 End Point optionRemote Address \nis modified according to receivedIpv4 End Point option\nSysgengenerates the following for each service:SD messages socket connectionsUsed \nfor exchanging the SD messages (Find/Offer/StopOffer/Subs/StopSubs/SubsAck-Nack)Both\nhas same local address, which is the address of the service provider.One for remote \nmulticast (Used with find and offer/StopOffer)One for remote unicast (Used with \nSubs-StopSubs/SubsAck-NACK)In FW: Upon reception of Offer/Subs, The firmware updates\nthe remote SD unicast address based on the following priority order:SD Ipv4 End \nPoint Optionif receivedIncoming message src addressMethods And Events socket \nconnectionUsed for exchanging the methods and events of a service.In FW: upon \nreception of Offer/Subs:Local address is sent asIpv4 End Point optionRemote Address \nis modified according to receivedIpv4 End Point option\nSysgengenerates the following for each service:\nSD messages socket connectionsUsed for exchanging the SD messages \n(Find/Offer/StopOffer/Subs/StopSubs/SubsAck-Nack)Both has same local address, which \nis the address of the service provider.One for remote multicast (Used with find and \noffer/StopOffer)One for remote unicast (Used with Subs-StopSubs/SubsAck-NACK)In FW: \nUpon reception of Offer/Subs, The firmware updates the remote SD unicast address \nbased on the following priority order:SD Ipv4 End Point Optionif receivedIncoming \nmessage src address\nSD messages socket connections\nUsed for exchanging the SD messages \n(Find/Offer/StopOffer/Subs/StopSubs/SubsAck-Nack)\nUsed for exchanging the SD messages \n(Find/Offer/StopOffer/Subs/StopSubs/SubsAck-Nack)\nBoth has same local address, which is the address of the service provider.\nBoth has same local address, which is the address of the service provider.\nOne for remote multicast (Used with find and offer/StopOffer)\nOne for remote multicast (Used with find and offer/StopOffer)\nOne for remote unicast (Used with Subs-StopSubs/SubsAck-NACK)In FW: Upon reception \nof Offer/Subs, The firmware updates the remote SD unicast address based on the \nfollowing priority order:SD Ipv4 End Point Optionif receivedIncoming message src \naddress\nOne for remote unicast (Used with Subs-StopSubs/SubsAck-NACK)\nIn FW: Upon reception of Offer/Subs, The firmware updates the remote SD unicast \naddress based on the following priority order:SD Ipv4 End Point Optionif \nreceivedIncoming message src address\nIn FW: Upon reception of Offer/Subs, The firmware updates the remote SD unicast \naddress based on the following priority order:\nSD Ipv4 End Point Optionif received\nSD Ipv4 End Point Optionif received\nIncoming message src address\nIncoming message src address\nMethods And Events socket connectionUsed for exchanging the methods and events of a \nservice.In FW: upon reception of Offer/Subs:Local address is sent asIpv4 End Point \noptionRemote Address is modified according to receivedIpv4 End Point option\nMethods And Events socket connection\nUsed for exchanging the methods and events of a service.\nUsed for exchanging the methods and events of a service.\nIn FW: upon reception of Offer/Subs:Local address is sent asIpv4 End Point \noptionRemote Address is modified according to receivedIpv4 End Point option\nIn FW: upon reception of Offer/Subs:\nLocal address is sent asIpv4 End Point option\nLocal address is sent asIpv4 End Point option\nRemote Address is modified according to receivedIpv4 End Point option\nRemote Address is modified according to receivedIpv4 End Point option\nFuture Work in Castle\nAll SD endpoints are assumed to be UDP, sysgen asserts if TCPIn the future, tcp \nshall be handled\nAll SD endpoints are assumed to be UDP, sysgen asserts if TCPIn the future, tcp \nshall be handled\nAll SD endpoints are assumed to be UDP, sysgen asserts if TCP\nIn the future, tcp shall be handled\nIn the future, tcp shall be handled\nReferences\nAutosar.org >> \"AUTOSAR_SWS_SocketAdaptor.pdf\", Autosar 4.2.2 is used for this \ndocumentation\nAutosar.org >> \"AUTOSAR_SWS_SocketAdaptor.pdf\", Autosar 4.2.2 is used for this \ndocumentation\nAutosar.org >> \"AUTOSAR_SWS_SocketAdaptor.pdf\", Autosar 4.2.2 is used for this \ndocumentation", "type": "Document"}}