{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_linux-os_inotify.txt"}, "page_content": "inotify\n\ud83d\udd14 What Is inotify?inotify is a file change notification system A kernel feature \nthat allows applications to request the monitoring of a set of files against a list \nof events.When the event occurs, the application is notified.inotify is an \ninode-based file notification system that does not require a file ever be opened in \norder to watch it.Inotify is able to watch any filesystem object whatsoever, and \nwhen watching directories, it is able to tell the user the name of the file inside \nof the directory that changed.inotify is designed with an interface that user-space \napplication developers would want to use, enjoy using and benefit from using.Instead\nof signals, inotify communicates with applications via a single file descriptor \n(FD).This file descriptor is select-able, poll-able, epoll-able and \nread-able.inotify is available in kernel2.6.13-rc3and later.\nWhat Is inotify?\n\ud83d\udd14 inotify is a file change notification system \n\ud83d\udd14 inotify is a file change notification system \nA kernel feature that allows applications to request the monitoring of a set of \nfiles against a list of events.\nA kernel feature that allows applications to request the monitoring of a set of \nfiles against a list of events.\nWhen the event occurs, the application is notified.\nWhen the event occurs, the application is notified.\ninotify is an inode-based file notification system that does not require a file ever\nbe opened in order to watch it.\ninotify is an inode-based file notification system that does not require a file ever\nbe opened in order to watch it.\nInotify is able to watch any filesystem object whatsoever, and when watching \ndirectories, it is able to tell the user the name of the file inside of the \ndirectory that changed.\nInotify is able to watch any filesystem object whatsoever, and when watching \ndirectories, it is able to tell the user the name of the file inside of the \ndirectory that changed.\ninotify is designed with an interface that user-space application developers would \nwant to use, enjoy using and benefit from using.\ninotify is designed with an interface that user-space application developers would \nwant to use, enjoy using and benefit from using.\nInstead of signals, inotify communicates with applications via a single file \ndescriptor (FD).\nInstead of signals, inotify communicates with applications via a single file \ndescriptor (FD).\nThis file descriptor is select-able, poll-able, epoll-able and read-able.\nThis file descriptor is select-able, poll-able, epoll-able and read-able.\ninotify is available in kernel2.6.13-rc3and later.\ninotify is available in kernel2.6.13-rc3and later.\ninotify watchesThe heart of inotify is the watch, which consists of a pathname \nspecifying what to watch (files / directories) and an event mask specifying what to \nwatch for.inotify can watch for many different events: opens, closes, reads, writes,\ncreates, deletes, moves, metadata changes and unmounts.Each inotify instance can \nhave thousands of watches, each watch for a different list of events.\ninotify watches\nThe heart of inotify is the watch, which consists of a pathname specifying what to \nwatch (files / directories) and an event mask specifying what to watch for.\nThe heart of inotify is the watch, which consists of a pathname specifying what to \nwatch (files / directories) and an event mask specifying what to watch for.\ninotify can watch for many different events: opens, closes, reads, writes, creates, \ndeletes, moves, metadata changes and unmounts.\ninotify can watch for many different events: opens, closes, reads, writes, creates, \ndeletes, moves, metadata changes and unmounts.\nEach inotify instance can have thousands of watches, each watch for a different list\nof events.\nEach inotify instance can have thousands of watches, each watch for a different list\nof events.\nReceiving EventsWith inotify initialized and watches added, your application is now \nready to receive events.Events are queued asynchronouslyin real time as the events \nhappenbut they are read synchronously via the read() system call.I propose to put \nthis in a separate processThe call(read())blocks until events are ready and then \nreturns all available events once any event is queued.\nReceiving Events\nWith inotify initialized and watches added, your application is now ready to receive\nevents.\nWith inotify initialized and watches added, your application is now ready to receive\nevents.\nEvents are queued asynchronouslyin real time as the events happen\nEvents are queued asynchronouslyin real time as the events happen\nbut they are read synchronously via the read() system call.\nbut they are read synchronously via the read() system call.\nI propose to put this in a separate process\nI propose to put this in a separate process\nThe call(read())blocks until events are ready and then returns all available events \nonce any event is queued.\nThe call(read())blocks until events are ready and then returns all available events \nonce any event is queued.", "type": "Document"}}