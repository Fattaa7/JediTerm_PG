{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_upa_generic-tutorials_upa-p4u-induction.txt"}, "page_content": "UPA/P4U Induction\nUPA\nAs a case study, I chose Toyota project to get familiar with UPA functionality. I \nwill go through the requirement of Toyota 560A requirement in this section. The \nrequirement document is attached for more details.\nUPA stands for: Ultrasonic Parking Assistance.\nMain functionality of this system is to alert the driver of the approaching \nobstacles.\nSystem components\nUPA Button\nInput to the ECUThe driver can turn on/off the UPA system by pressing this buttonIn \nsome conditions, the UPA system may go on without pressing the button.Ex: when the \ndriver set the gear to reverse.Each project may differ in the activation detailsThe \nsystem works in low speeds. Each project define the threshold speed, above this \nspeed the system aborts. (~10 kph)In CASTLE:This pin is a GPIO set to output.\nInput to the ECU\nInput to the ECU\nThe driver can turn on/off the UPA system by pressing this button\nThe driver can turn on/off the UPA system by pressing this button\nIn some conditions, the UPA system may go on without pressing the button.Ex: when \nthe driver set the gear to reverse.Each project may differ in the activation details\nIn some conditions, the UPA system may go on without pressing the button.\nEx: when the driver set the gear to reverse.\nEx: when the driver set the gear to reverse.\nEach project may differ in the activation details\nEach project may differ in the activation details\nThe system works in low speeds. Each project define the threshold speed, above this \nspeed the system aborts. (~10 kph)\nThe system works in low speeds. Each project define the threshold speed, above this \nspeed the system aborts. (~10 kph)\nIn CASTLE:This pin is a GPIO set to output.\nIn CASTLE:\nThis pin is a GPIO set to output.\nThis pin is a GPIO set to output.\nUPA Led\nOutput from the ECU (PWM)Light on when the UPA is activeLight off when the UPA is \ninactiveThe brightness of the led shall be dependent on the environment light level.\n(In Day, increase brightness, in night decrease brightness)The brightness of the led\nis controlled via changing the duty cycle of the PWM signal.The PWM signal frequency\nis faster than the human eye can realize, so the human eye sees the led is \ncontinuously on.Blinking:In some conditions (ex: system failure) the led blinks, \nthis means that the led alternates between ON (PWM) and OFF (logic low) in a speed \nwhich the driver can recognize it is blinking.Summary:We have three states:LED ON: \nPWM signal, Duty Cycle depends on required brightnessLED OFF: Logic LowLED Blinking:\nAlternate between LED ON and LED OFF\nOutput from the ECU (PWM)\nOutput from the ECU (PWM)\nLight on when the UPA is active\nLight on when the UPA is active\nLight off when the UPA is inactive\nLight off when the UPA is inactive\nThe brightness of the led shall be dependent on the environment light level. (In \nDay, increase brightness, in night decrease brightness)\nThe brightness of the led shall be dependent on the environment light level. (In \nDay, increase brightness, in night decrease brightness)\nThe brightness of the led is controlled via changing the duty cycle of the PWM \nsignal.\nThe brightness of the led is controlled via changing the duty cycle of the PWM \nsignal.\nThe PWM signal frequency is faster than the human eye can realize, so the human eye \nsees the led is continuously on.\nThe PWM signal frequency is faster than the human eye can realize, so the human eye \nsees the led is continuously on.\nBlinking:In some conditions (ex: system failure) the led blinks, this means that the\nled alternates between ON (PWM) and OFF (logic low) in a speed which the driver can \nrecognize it is blinking.\nBlinking:\nIn some conditions (ex: system failure) the led blinks, this means that the led \nalternates between ON (PWM) and OFF (logic low) in a speed which the driver can \nrecognize it is blinking.\nIn some conditions (ex: system failure) the led blinks, this means that the led \nalternates between ON (PWM) and OFF (logic low) in a speed which the driver can \nrecognize it is blinking.\nSummary:We have three states:LED ON: PWM signal, Duty Cycle depends on required \nbrightnessLED OFF: Logic LowLED Blinking: Alternate between LED ON and LED OFF\nSummary:\nWe have three states:LED ON: PWM signal, Duty Cycle depends on required \nbrightnessLED OFF: Logic LowLED Blinking: Alternate between LED ON and LED OFF\nWe have three states:\nLED ON: PWM signal, Duty Cycle depends on required brightness\nLED ON: PWM signal, Duty Cycle depends on required brightness\nLED OFF: Logic Low\nLED OFF: Logic Low\nLED Blinking: Alternate between LED ON and LED OFF\nLED Blinking: Alternate between LED ON and LED OFF\nIn CASTLE:This pin is a PWM input, CASTLE does PWM measurement to this pin.CASTLE \nalso introduces some HW faults to this pin (short to gnd, short to battery and short\nto Vcc)Note that in some projects, not all HW failures can be detected in any state.\nFor example, the ECU can not detect short to GND failure, while the led is already \nOFF.All failures (CAN - FR - IOs - Sensors) are done through Switches Module\nIn CASTLE:This pin is a PWM input, CASTLE does PWM measurement to this pin.CASTLE \nalso introduces some HW faults to this pin (short to gnd, short to battery and short\nto Vcc)Note that in some projects, not all HW failures can be detected in any state.\nFor example, the ECU can not detect short to GND failure, while the led is already \nOFF.All failures (CAN - FR - IOs - Sensors) are done through Switches Module\nIn CASTLE:\nThis pin is a PWM input, CASTLE does PWM measurement to this pin.\nThis pin is a PWM input, CASTLE does PWM measurement to this pin.\nCASTLE also introduces some HW faults to this pin (short to gnd, short to battery \nand short to Vcc)Note that in some projects, not all HW failures can be detected in \nany state. For example, the ECU can not detect short to GND failure, while the led \nis already OFF.All failures (CAN - FR - IOs - Sensors) are done through Switches \nModule\nCASTLE also introduces some HW faults to this pin (short to gnd, short to battery \nand short to Vcc)\nNote that in some projects, not all HW failures can be detected in any state. For \nexample, the ECU can not detect short to GND failure, while the led is already OFF.\nNote that in some projects, not all HW failures can be detected in any state. For \nexample, the ECU can not detect short to GND failure, while the led is already OFF.\nAll failures (CAN - FR - IOs - Sensors) are done through Switches Module\nAll failures (CAN - FR - IOs - Sensors) are done through Switches Module\nSensors\nMost of the systems has 12 sensors, 6 in the front bumper, and 6 in the rear.Some \nprojects has only rear sensors, some has 6, some has 4, some has 4 rear and 4 front,\n...etc.These sensors may be AK Sensors or HP sensors.AK sensors are the traditional \nones, they communicate with the ECU over a specific protocolHP sensors are the new \ngeneration, they communicate with the ECU over LIN.The sensors are named after their\npositions:FSL: Front Side Left               --German Abbrev.-->    VSLFSR: Front \nSide Right            --German Abbrev.-->    VSRFOL: Front Outer Left             \n--German Abbrev.-->    VALFOR: Front Outer Right           --German Abbrev.-->    \nVARFIL: Front Inner Left                --German Abbrev.-->    VMLFIR: Front Inner \nRight             --German Abbrev.-->    VMRRSL: Rear Side Left               \n--German Abbrev.-->    HSLRSR: Rear Side Right             --German Abbrev.-->    \nHSRROL: Rear Outer Left              --German Abbrev.-->    HALROR: Rear Outer Right\n          --German Abbrev.-->    HARRIL: Rear Inner Left               --German \nAbbrev.-->    HMLRIR: Rear Inner Right             --German Abbrev.-->    HMRIn \nCASTLE:Front sensor supply pin (ECU output)Rear sensor supply pin (ECU output)Front \nsensor supply pin (ECU output)Rear sensor supply pin (ECU output)\nMost of the systems has 12 sensors, 6 in the front bumper, and 6 in the rear.\nMost of the systems has 12 sensors, 6 in the front bumper, and 6 in the rear.\nSome projects has only rear sensors, some has 6, some has 4, some has 4 rear and 4 \nfront, ...etc.\nSome projects has only rear sensors, some has 6, some has 4, some has 4 rear and 4 \nfront, ...etc.\nThese sensors may be AK Sensors or HP sensors.AK sensors are the traditional ones, \nthey communicate with the ECU over a specific protocolHP sensors are the new \ngeneration, they communicate with the ECU over LIN.\nThese sensors may be AK Sensors or HP sensors.\nAK sensors are the traditional ones, they communicate with the ECU over a specific \nprotocol\nAK sensors are the traditional ones, they communicate with the ECU over a specific \nprotocol\nHP sensors are the new generation, they communicate with the ECU over LIN.\nHP sensors are the new generation, they communicate with the ECU over LIN.\nThe sensors are named after their positions:FSL: Front Side Left               \n--German Abbrev.-->    VSLFSR: Front Side Right            --German Abbrev.-->    \nVSRFOL: Front Outer Left             --German Abbrev.-->    VALFOR: Front Outer \nRight           --German Abbrev.-->    VARFIL: Front Inner Left                \n--German Abbrev.-->    VMLFIR: Front Inner Right             --German Abbrev.-->    \nVMRRSL: Rear Side Left               --German Abbrev.-->    HSLRSR: Rear Side Right \n            --German Abbrev.-->    HSRROL: Rear Outer Left              --German \nAbbrev.-->    HALROR: Rear Outer Right           --German Abbrev.-->    HARRIL: Rear\nInner Left               --German Abbrev.-->    HMLRIR: Rear Inner Right            \n--German Abbrev.-->    HMR\nThe sensors are named after their positions:\nFSL: Front Side Left               --German Abbrev.-->    VSL\nFSL: Front Side Left               --German Abbrev.-->    VSL\nFSR: Front Side Right            --German Abbrev.-->    VSR\nFSR: Front Side Right            --German Abbrev.-->    VSR\nFOL: Front Outer Left             --German Abbrev.-->    VAL\nFOL: Front Outer Left             --German Abbrev.-->    VAL\nFOR: Front Outer Right           --German Abbrev.-->    VAR\nFOR: Front Outer Right           --German Abbrev.-->    VAR\nFIL: Front Inner Left                --German Abbrev.-->    VML\nFIL: Front Inner Left                --German Abbrev.-->    VML\nFIR: Front Inner Right             --German Abbrev.-->    VMR\nFIR: Front Inner Right             --German Abbrev.-->    VMR\nRSL: Rear Side Left               --German Abbrev.-->    HSL\nRSL: Rear Side Left               --German Abbrev.-->    HSL\nRSR: Rear Side Right             --German Abbrev.-->    HSR\nRSR: Rear Side Right             --German Abbrev.-->    HSR\nROL: Rear Outer Left              --German Abbrev.-->    HAL\nROL: Rear Outer Left              --German Abbrev.-->    HAL\nROR: Rear Outer Right           --German Abbrev.-->    HAR\nROR: Rear Outer Right           --German Abbrev.-->    HAR\nRIL: Rear Inner Left               --German Abbrev.-->    HML\nRIL: Rear Inner Left               --German Abbrev.-->    HML\nRIR: Rear Inner Right             --German Abbrev.-->    HMR\nRIR: Rear Inner Right             --German Abbrev.-->    HMR\nIn CASTLE:Front sensor supply pin (ECU output)Rear sensor supply pin (ECU \noutput)Front sensor supply pin (ECU output)Rear sensor supply pin (ECU output)\nIn CASTLE:\nFront sensor supply pin (ECU output)\nFront sensor supply pin (ECU output)\nRear sensor supply pin (ECU output)\nRear sensor supply pin (ECU output)\nFront sensor supply pin (ECU output)\nFront sensor supply pin (ECU output)\nRear sensor supply pin (ECU output)\nRear sensor supply pin (ECU output)\nSpeakers (Buzzers)\nIn German it is \"Tongeber\" or \"Lautsprecher\"Since the speaker is mostly driven at \n\"-\" line short circuits to \"+\" can be detected only if the speaker is driven (by \nobject detection or activation tone)Some projects has one front speaker, which is \nplaced in the front half of the car, and a rear speaker which is placed in the rear \nhalf of the car.In this case, if the obstacle is  a rear obstacle, the driver will \nhear a tone coming from the back, and if the obstacle is a front one, he will hear \nthe alert comes from the frontUsually the the alert is a single tone with a specific\nfrequency.The front and rear obstacles may result in different tone \nfrequency.Usually we have three main obstacle regions:Region 1: Continuous Tone (The\nspeaker signal is always emitting the tone)Region 2: Non-Continuous Tone (The \nspeaker signal alternates between pulses and pauses - in the pulse, the tone is \nemitted - in the pause, the tone is not emitted)Region 3: No Tone\nIn German it is \"Tongeber\" or \"Lautsprecher\"\nIn German it is \"Tongeber\" or \"Lautsprecher\"\nSince the speaker is mostly driven at \"-\" line short circuits to \"+\" can be detected\nonly if the speaker is driven (by object detection or activation tone)\nSince the speaker is mostly driven at \"-\" line short circuits to \"+\" can be detected\nonly if the speaker is driven (by object detection or activation tone)\nSome projects has one front speaker, which is placed in the front half of the car, \nand a rear speaker which is placed in the rear half of the car.In this case, if the \nobstacle is  a rear obstacle, the driver will hear a tone coming from the back, and \nif the obstacle is a front one, he will hear the alert comes from the front\nSome projects has one front speaker, which is placed in the front half of the car, \nand a rear speaker which is placed in the rear half of the car.\nIn this case, if the obstacle is  a rear obstacle, the driver will hear a tone \ncoming from the back, and if the obstacle is a front one, he will hear the alert \ncomes from the front\nIn this case, if the obstacle is  a rear obstacle, the driver will hear a tone \ncoming from the back, and if the obstacle is a front one, he will hear the alert \ncomes from the front\nUsually the the alert is a single tone with a specific frequency.The front and rear \nobstacles may result in different tone frequency.\nUsually the the alert is a single tone with a specific frequency.\nThe front and rear obstacles may result in different tone frequency.\nThe front and rear obstacles may result in different tone frequency.\nUsually we have three main obstacle regions:Region 1: Continuous Tone (The speaker \nsignal is always emitting the tone)Region 2: Non-Continuous Tone (The speaker signal\nalternates between pulses and pauses - in the pulse, the tone is emitted - in the \npause, the tone is not emitted)Region 3: No Tone\nUsually we have three main obstacle regions:\nRegion 1: Continuous Tone (The speaker signal is always emitting the tone)\nRegion 1: Continuous Tone (The speaker signal is always emitting the tone)\nRegion 2: Non-Continuous Tone (The speaker signal alternates between pulses and \npauses - in the pulse, the tone is emitted - in the pause, the tone is not emitted)\nRegion 2: Non-Continuous Tone (The speaker signal alternates between pulses and \npauses - in the pulse, the tone is emitted - in the pause, the tone is not emitted)\nRegion 3: No Tone\nRegion 3: No Tone\nSome times, we have region 2 separated into different regions. Each with different \ntone pulse-pause times. As the obstacles approach more, the pulse-pause pattern gets\nfaster.\nSome times, we have region 2 separated into different regions. Each with different \ntone pulse-pause times. As the obstacles approach more, the pulse-pause pattern gets\nfaster.\nSome times, we have region 2 separated into different regions. Each with different \ntone pulse-pause times. As the obstacles approach more, the pulse-pause pattern gets\nfaster.\nSample Requirements\nActivation Logic\nUPA Activation Logic, is done through the following state machine.\nStates\nPower Off:ECU is not powered up. No CAN communicationPower On:ECU is running. System\nready to operate. UPA shall operate regardless of voltage if UPA can operate, so \ndoes not need to report DTC for undervoltage/overvoltage.System check board \nresources, memory, and CAN message. Failure is stored in non-volatile memory for \nfuture diagnostic report.UPA Disabled:All sensors are inactive except side \nsensors.Sensor Check:Sensors are checked.UPA Standby:SensorCheck completed without \nfailure detected. All sensors are inactive except side sensors for IPA and FG (Park \nfor you and Flank Guard features)UPA Active:Object detection in operation. Some or \nall sensors can be active.UPA Reverse:Front and rear sensors are active+ front side \n+ rear side. Driver is alerted if an obstacle is detectedUPA Drive:Front sensors are\nactive+ front side + rear side. Driver is alerted if an obstacle is \ndetectedFailure:One or more UPA sensor failure (including sensor freeze) is detected\non sensor or ECU component preventing system to operate correctly. During \nUPA_Enabled System sends CAN signals with appropriate error content report. Driver \nnotification required. Failure beep emitted 5 times.\nPower Off:ECU is not powered up. No CAN communication\nPower Off:ECU is not powered up. No CAN communication\nPower On:ECU is running. System ready to operate. UPA shall operate regardless of \nvoltage if UPA can operate, so does not need to report DTC for \nundervoltage/overvoltage.\nPower On:ECU is running. System ready to operate. UPA shall operate regardless of \nvoltage if UPA can operate, so does not need to report DTC for \nundervoltage/overvoltage.\nSystem check board resources, memory, and CAN message. Failure is stored in \nnon-volatile memory for future diagnostic report.\nSystem check board resources, memory, and CAN message. Failure is stored in \nnon-volatile memory for future diagnostic report.\nUPA Disabled:All sensors are inactive except side sensors.\nUPA Disabled:All sensors are inactive except side sensors.\nSensor Check:Sensors are checked.\nSensor Check:Sensors are checked.\nUPA Standby:SensorCheck completed without failure detected. All sensors are inactive\nexcept side sensors for IPA and FG (Park for you and Flank Guard features)\nUPA Standby:SensorCheck completed without failure detected. All sensors are inactive\nexcept side sensors for IPA and FG (Park for you and Flank Guard features)\nUPA Active:Object detection in operation. Some or all sensors can be active.\nUPA Active:Object detection in operation. Some or all sensors can be active.\nUPA Reverse:Front and rear sensors are active+ front side + rear side. Driver is \nalerted if an obstacle is detected\nUPA Reverse:Front and rear sensors are active+ front side + rear side. Driver is \nalerted if an obstacle is detected\nUPA Drive:Front sensors are active+ front side + rear side. Driver is alerted if an \nobstacle is detected\nUPA Drive:Front sensors are active+ front side + rear side. Driver is alerted if an \nobstacle is detected\nFailure:One or more UPA sensor failure (including sensor freeze) is detected on \nsensor or ECU component preventing system to operate correctly. During UPA_Enabled \nSystem sends CAN signals with appropriate error content report. Driver notification \nrequired. Failure beep emitted 5 times.\nFailure:One or more UPA sensor failure (including sensor freeze) is detected on \nsensor or ECU component preventing system to operate correctly. During UPA_Enabled \nSystem sends CAN signals with appropriate error content report. Driver notification \nrequired. Failure beep emitted 5 times.\nTransitions\nT1:IG-line is ON. System goes to stateSensorCheck.T2:IG-line is OFF. System goes to \nstatePowerOff.T3:ZSAE=valid and UPA switch is ON. System goes to \nstateUPA_StandbyT4:UPA switch is Off. System goes to stateUPA_Disabled.T5:Sensor \nCheck completed within 1000ms and no failure detected. System goes to \nstateUPA_DisabledT6:Sensor Check completed within 1000ms and (at least one failure \ndetected on center/corner (/side) sensors) and (power supply is operational).System \ngoes to stateFailure.T7:All Failures are fixed (sensors and ECU component necessary \nto operate system correctly) .System goes to stateUPA_Standby.T8:((Gear state is Not\nParking AND speed is lower than operating speed threshold)OR (Gear state is \nReverse)) .System goes toUPA_Active.T9:Gear state is Parking OR (Gear is not Reverse\nAND speed is higher than non-operating speed threshold).System goes \ntoUPA_StandbyT10:Gear state isDrive. System goes to stateUPA_DriveT11:Gear state \nisreverse. System goes to stateUPA_ReverseT16:Sensor failure (short/open circuit \ninternal failure) identified within 2000ms (up to 6000ms for sensor-piezo-connection\nbroken or re-programming error) OR failure of ECU component preventing system to \noperate correctly.Write error in non-volatile memory. System goes to \nstateFailureT18:ZSAE=invalid. CSIN shall return to 0T19:ZSAE=invalid. CSIN shall \nreturn to 0T20:All Failures are fixed (sensors and ECU component necessary to \noperate system correctly) .System goes to stateUPA_Disabled.T21:UPA switch is \nON.T22:UPA switch is Off.T23:UPA Sensor Failure is detected.System goes to state \nFailure.T24:Vehicle stuckT25:Not vehicle stuck\nT1:IG-line is ON. System goes to stateSensorCheck.\nT1:IG-line is ON. System goes to stateSensorCheck.\nT2:IG-line is OFF. System goes to statePowerOff.\nT2:IG-line is OFF. System goes to statePowerOff.\nT3:ZSAE=valid and UPA switch is ON. System goes to stateUPA_Standby\nT3:ZSAE=valid and UPA switch is ON. System goes to stateUPA_Standby\nT4:UPA switch is Off. System goes to stateUPA_Disabled.\nT4:UPA switch is Off. System goes to stateUPA_Disabled.\nT5:Sensor Check completed within 1000ms and no failure detected. System goes to \nstateUPA_Disabled\nT5:Sensor Check completed within 1000ms and no failure detected. System goes to \nstateUPA_Disabled\nT6:Sensor Check completed within 1000ms and (at least one failure detected on \ncenter/corner (/side) sensors) and (power supply is operational).\nT6:Sensor Check completed within 1000ms and (at least one failure detected on \ncenter/corner (/side) sensors) and (power supply is operational).\nSystem goes to stateFailure.\nSystem goes to stateFailure.\nT7:All Failures are fixed (sensors and ECU component necessary to operate system \ncorrectly) .\nT7:All Failures are fixed (sensors and ECU component necessary to operate system \ncorrectly) .\nSystem goes to stateUPA_Standby.\nSystem goes to stateUPA_Standby.\nT8:((Gear state is Not Parking AND speed is lower than operating speed threshold)\nT8:((Gear state is Not Parking AND speed is lower than operating speed threshold)\nOR (Gear state is Reverse)) .\nOR (Gear state is Reverse)) .\nSystem goes toUPA_Active.\nSystem goes toUPA_Active.\nT9:Gear state is Parking OR (Gear is not Reverse AND speed is higher than \nnon-operating speed threshold).\nT9:Gear state is Parking OR (Gear is not Reverse AND speed is higher than \nnon-operating speed threshold).\nSystem goes toUPA_Standby\nSystem goes toUPA_Standby\nT10:Gear state isDrive. System goes to stateUPA_Drive\nT10:Gear state isDrive. System goes to stateUPA_Drive\nT11:Gear state isreverse. System goes to stateUPA_Reverse\nT11:Gear state isreverse. System goes to stateUPA_Reverse\nT16:Sensor failure (short/open circuit internal failure) identified within 2000ms \n(up to 6000ms for sensor-piezo-connection broken or re-programming error) OR failure\nof ECU component preventing system to operate correctly.\nT16:Sensor failure (short/open circuit internal failure) identified within 2000ms \n(up to 6000ms for sensor-piezo-connection broken or re-programming error) OR failure\nof ECU component preventing system to operate correctly.\nWrite error in non-volatile memory. System goes to stateFailure\nWrite error in non-volatile memory. System goes to stateFailure\nT18:ZSAE=invalid. CSIN shall return to 0\nT18:ZSAE=invalid. CSIN shall return to 0\nT19:ZSAE=invalid. CSIN shall return to 0\nT19:ZSAE=invalid. CSIN shall return to 0\nT20:All Failures are fixed (sensors and ECU component necessary to operate system \ncorrectly) .\nT20:All Failures are fixed (sensors and ECU component necessary to operate system \ncorrectly) .\nSystem goes to stateUPA_Disabled.\nSystem goes to stateUPA_Disabled.\nT21:UPA switch is ON.\nT21:UPA switch is ON.\nT22:UPA switch is Off.\nT22:UPA switch is Off.\nT23:UPA Sensor Failure is detected.\nT23:UPA Sensor Failure is detected.\nSystem goes to state Failure.\nSystem goes to state Failure.\nT24:Vehicle stuck\nT24:Vehicle stuck\nT25:Not vehicle stuck\nT25:Not vehicle stuck\nNote that ZSAE: is an CAN signal to the ECU. It indicated if the steering wheel \nangle is valid\nCSIN is an output CAN signal from ECU, it indicates if the UPA is ON.\nBacking Objects\nIn case a backing object is detected ( departing more than a minimum departing \ndistance in the interval tone zone), but not in L1(Continuous tone range), then the \nappropriate buzzer volume is faded to value Vfade_backfor this particular object. \nOther objects shall still be reported to the system. HMI (if any) must still \nrepresent the object location.Note: HMI is Human Machine Interface, usually it is \nscreen shows the driver graphical info about the obstacles/park slot.\nIn case a backing object is detected ( departing more than a minimum departing \ndistance in the interval tone zone), but not in L1(Continuous tone range), then the \nappropriate buzzer volume is faded to value Vfade_backfor this particular object. \nOther objects shall still be reported to the system. HMI (if any) must still \nrepresent the object location.\nIn case a backing object is detected ( departing more than a minimum departing \ndistance in the interval tone zone), but not in L1(Continuous tone range), then the \nappropriate buzzer volume is faded to value Vfade_backfor this particular object. \nOther objects shall still be reported to the system. HMI (if any) must still \nrepresent the object location.\nNote: HMI is Human Machine Interface, usually it is screen shows the driver \ngraphical info about the obstacles/park slot.\nNote: HMI is Human Machine Interface, usually it is screen shows the driver \ngraphical info about the obstacles/park slot.\nSensor Triangulation\nThe ultrasonic sensors can measure only radial obstacle distanceThe distance of an \nobstacle in relation to the car is calculated using different techniques depending \non the sensor detecting this objectSimple case is that only one sensor detects this \nobstacle in direct measurement mode, means the sensor sends ultrasonic burst and \nreceives an echo within measurement time window, then the calculated distance \ncorresponds to echo runtime/2If the object is detected by 2 neighboured sensors (for\nexample FIR and FIL) in direct measurement mode the obstacle distance is calculated \nusing TriangulationSame techique is applied in indirect measurement mode, one sensor\nis measuring in direct mode and the left and right neighboured sensors (not applied \nfor side sensors) listening in indirect mode, if echo is reflected to the \nneighboured sensors the obstacle distance is calculated using this informationThere \nis a plausibility check to avoid disturbances caused by Ultrasonics not sent by \nego-vehicle, for instance if indirect echo is received with shorter runtime than the\ndistance between the 2 involved sensors\nThe ultrasonic sensors can measure only radial obstacle distance\nThe ultrasonic sensors can measure only radial obstacle distance\nThe distance of an obstacle in relation to the car is calculated using different \ntechniques depending on the sensor detecting this object\nThe distance of an obstacle in relation to the car is calculated using different \ntechniques depending on the sensor detecting this object\nSimple case is that only one sensor detects this obstacle in direct measurement \nmode, means the sensor sends ultrasonic burst and receives an echo within \nmeasurement time window, then the calculated distance corresponds to echo runtime/2\nSimple case is that only one sensor detects this obstacle in direct measurement \nmode, means the sensor sends ultrasonic burst and receives an echo within \nmeasurement time window, then the calculated distance corresponds to echo runtime/2\nIf the object is detected by 2 neighboured sensors (for example FIR and FIL) in \ndirect measurement mode the obstacle distance is calculated using Triangulation\nIf the object is detected by 2 neighboured sensors (for example FIR and FIL) in \ndirect measurement mode the obstacle distance is calculated using Triangulation\nSame techique is applied in indirect measurement mode, one sensor is measuring in \ndirect mode and the left and right neighboured sensors (not applied for side \nsensors) listening in indirect mode, if echo is reflected to the neighboured sensors\nthe obstacle distance is calculated using this information\nSame techique is applied in indirect measurement mode, one sensor is measuring in \ndirect mode and the left and right neighboured sensors (not applied for side \nsensors) listening in indirect mode, if echo is reflected to the neighboured sensors\nthe obstacle distance is calculated using this information\nThere is a plausibility check to avoid disturbances caused by Ultrasonics not sent \nby ego-vehicle, for instance if indirect echo is received with shorter runtime than \nthe distance between the 2 involved sensors\nThere is a plausibility check to avoid disturbances caused by Ultrasonics not sent \nby ego-vehicle, for instance if indirect echo is received with shorter runtime than \nthe distance between the 2 involved sensors\nTrailer Deactivation\nIf a trailer hook is equipped all rear sensors obstacle detection is switched off if\na trailer is coupled (detected via PIN or bus signal)\nIf a trailer hook is equipped all rear sensors obstacle detection is switched off if\na trailer is coupled (detected via PIN or bus signal)\nIf a trailer hook is equipped all rear sensors obstacle detection is switched off if\na trailer is coupled (detected via PIN or bus signal)\nTrailer Hook Masking\nIf a trailer hook is equipped the rear middle sensors (RIL, RIR) have a \n(configurable) blind area around this hook in order to prevent obstacle warnings \ncaused by the trailer hook, typical value is a circle with 5cm radius in 25cm \ndistance (all configurable)additonally all detection areas of the rear middle \nsensors are extended by this radius, ie if detection range is 180cm it will be \n185cm, continuous tone area 30cm it will be 35cm\nIf a trailer hook is equipped the rear middle sensors (RIL, RIR) have a \n(configurable) blind area around this hook in order to prevent obstacle warnings \ncaused by the trailer hook, typical value is a circle with 5cm radius in 25cm \ndistance (all configurable)\nIf a trailer hook is equipped the rear middle sensors (RIL, RIR) have a \n(configurable) blind area around this hook in order to prevent obstacle warnings \ncaused by the trailer hook, typical value is a circle with 5cm radius in 25cm \ndistance (all configurable)\nadditonally all detection areas of the rear middle sensors are extended by this \nradius, ie if detection range is 180cm it will be 185cm, continuous tone area 30cm \nit will be 35cm\nadditonally all detection areas of the rear middle sensors are extended by this \nradius, ie if detection range is 180cm it will be 185cm, continuous tone area 30cm \nit will be 35cm\nWall Detection\nIn older versions of this specs, there was a feature that if an obstacle is at the \nsame distance from a  corner sensor (ie ROR, FOL etc) while the car is moving, this \nmeans that it is a wall that the car is driving beside. So just fade the buzzer \nvolume (but not in continuous tone area).\nIn older versions of this specs, there was a feature that if an obstacle is at the \nsame distance from a  corner sensor (ie ROR, FOL etc) while the car is moving, this \nmeans that it is a wall that the car is driving beside. So just fade the buzzer \nvolume (but not in continuous tone area).\nIn older versions of this specs, there was a feature that if an obstacle is at the \nsame distance from a  corner sensor (ie ROR, FOL etc) while the car is moving, this \nmeans that it is a wall that the car is driving beside. So just fade the buzzer \nvolume (but not in continuous tone area).\nFlank Guard\nFlank Guard Area is the area between Front and Rear Side sensors. If an obstacle is \ndetected in flank guard area, it shall be reported on the HMI.It shall also be \nreported by a buzzer tone if the vehicle is moving (not standstill)If the obstacle \nis inside the Flank Guard area but outside the Driving Tube, then, it shall not be \nreported.\nFlank Guard Area is the area between Front and Rear Side sensors. If an obstacle is \ndetected in flank guard area, it shall be reported on the HMI.It shall also be \nreported by a buzzer tone if the vehicle is moving (not standstill)\nFlank Guard Area is the area between Front and Rear Side sensors. If an obstacle is \ndetected in flank guard area, it shall be reported on the HMI.\nIt shall also be reported by a buzzer tone if the vehicle is moving (not standstill)\nIt shall also be reported by a buzzer tone if the vehicle is moving (not standstill)\nIf the obstacle is inside the Flank Guard area but outside the Driving Tube, then, \nit shall not be reported.\nIf the obstacle is inside the Flank Guard area but outside the Driving Tube, then, \nit shall not be reported.\nDriving Tube\nDriving Tube is the a twisted path which is drawn parallel to the vehicle according \nto the steering wheel angle. It represents the tube that the vehicle is moving into.\nDriving Tube is the a twisted path which is drawn parallel to the vehicle according \nto the steering wheel angle. It represents the tube that the vehicle is moving into.\nDriving Tube is the a twisted path which is drawn parallel to the vehicle according \nto the steering wheel angle. It represents the tube that the vehicle is moving into.\nP4U\nSystem components\nSame as UPA, two additional components.\nP4U Button\nJust like the UPA Button\nP4U LED\nJust like the UPA LED\nSample Requirements\nP4U is helping the driver to park in a parallel parking slot, perpendicular parking \nslot, and to park out (Park me out) through the following:\nUsing side sensors, to search for a sufficient park slotTaking the control of the \nsteering wheel during the parking maneuver.Instruct the driver how to control the \ngear and accelerator/brakes during the maneuver\nUsing side sensors, to search for a sufficient park slot\nUsing side sensors, to search for a sufficient park slot\nTaking the control of the steering wheel during the parking maneuver.\nTaking the control of the steering wheel during the parking maneuver.\nInstruct the driver how to control the gear and accelerator/brakes during the \nmaneuver\nInstruct the driver how to control the gear and accelerator/brakes during the \nmaneuver\nParking Scenario\nBelow is how a positive parking scenario shall take place.\nLooking For a slot\nThe user push the P4U push button, this startsPSM(Park Slot Measurement)The HMI \ndisplays that the P4U system islooking for a slot\nThe user push the P4U push button, this startsPSM(Park Slot Measurement)\nThe user push the P4U push button, this startsPSM(Park Slot Measurement)\nThe HMI displays that the P4U system islooking for a slot\nThe HMI displays that the P4U system islooking for a slot\nSlot Found\nWhen aslot is found, the HMI indicates.\nWhen aslot is found, the HMI indicates.\nWhen aslot is found, the HMI indicates.\nPos OK\nThe driver shall keep moving forward, until the HMI tells that the position to start\nthe maneuver is reached. Once this happens, the driver shall stop the vehicle.CASTLE\nsimulates this, via sending the speed signal = 0 on CAN bus.This shall happen once \nthe HMI CAN signal takes the value corresponding to the below HMI.This can be done \nusing pauseUntilEvent in C5.\nThe driver shall keep moving forward, until the HMI tells that the position to start\nthe maneuver is reached. Once this happens, the driver shall stop the vehicle.CASTLE\nsimulates this, via sending the speed signal = 0 on CAN bus.This shall happen once \nthe HMI CAN signal takes the value corresponding to the below HMI.This can be done \nusing pauseUntilEvent in C5.\nThe driver shall keep moving forward, until the HMI tells that the position to start\nthe maneuver is reached. Once this happens, the driver shall stop the vehicle.\nCASTLE simulates this, via sending the speed signal = 0 on CAN bus.\nCASTLE simulates this, via sending the speed signal = 0 on CAN bus.\nThis shall happen once the HMI CAN signal takes the value corresponding to the below\nHMI.\nThis shall happen once the HMI CAN signal takes the value corresponding to the below\nHMI.\nThis can be done using pauseUntilEvent in C5.\nThis can be done using pauseUntilEvent in C5.\nAutomatic Steering Started\nThe driver engage the reverse gear.The HMI shows that the Automatic Steering Control\nis started\nThe driver engage the reverse gear.\nThe driver engage the reverse gear.\nThe HMI shows that the Automatic Steering Control is started\nThe HMI shows that the Automatic Steering Control is started\nThe driver shall leave the steering wheel. and start to move the carDuring the \nmaneuver, the P4U sends the requested steering wheel angle to the ECU responsible of\nthe Steering wheelThe ECU responsible for the steering wheel shall set the steering \nwheel to the requested position, and update the steering wheel angle on the CAN \nbus.CASTLE simulates the ECU responsible for steering wheel, so it shall always \nupdate the steering wheel angle CAN signal to be equal to the P4U requested \nangleSteeringWhlAng = SteeringWhlAng_RqThis is called steering wheel coupling, or \nsteering wheel following.If the steering wheel is not updated according to the \nsteering wheel request, the P4U ECU will consider that the driver is overriding the \nsteering wheel. Hence abort the parking scenario.\nThe driver shall leave the steering wheel. and start to move the car\nThe driver shall leave the steering wheel. and start to move the car\nDuring the maneuver, the P4U sends the requested steering wheel angle to the ECU \nresponsible of the Steering wheelThe ECU responsible for the steering wheel shall \nset the steering wheel to the requested position, and update the steering wheel \nangle on the CAN bus.CASTLE simulates the ECU responsible for steering wheel, so it \nshall always update the steering wheel angle CAN signal to be equal to the P4U \nrequested angleSteeringWhlAng = SteeringWhlAng_RqThis is called steering wheel \ncoupling, or steering wheel following.\nDuring the maneuver, the P4U sends the requested steering wheel angle to the ECU \nresponsible of the Steering wheel\nThe ECU responsible for the steering wheel shall set the steering wheel to the \nrequested position, and update the steering wheel angle on the CAN bus.\nThe ECU responsible for the steering wheel shall set the steering wheel to the \nrequested position, and update the steering wheel angle on the CAN bus.\nCASTLE simulates the ECU responsible for steering wheel, so it shall always update \nthe steering wheel angle CAN signal to be equal to the P4U requested angle\nCASTLE simulates the ECU responsible for steering wheel, so it shall always update \nthe steering wheel angle CAN signal to be equal to the P4U requested angle\nSteeringWhlAng = SteeringWhlAng_Rq\nSteeringWhlAng = SteeringWhlAng_Rq\nThis is called steering wheel coupling, or steering wheel following.\nThis is called steering wheel coupling, or steering wheel following.\nIf the steering wheel is not updated according to the steering wheel request, the \nP4U ECU will consider that the driver is overriding the steering wheel. Hence abort \nthe parking scenario.\nIf the steering wheel is not updated according to the steering wheel request, the \nP4U ECU will consider that the driver is overriding the steering wheel. Hence abort \nthe parking scenario.\nDrive Backward\nThe HMI asks the driver to move backward, till approaches the rear vehicle.\nThe HMI asks the driver to move backward, till approaches the rear vehicle.\nThe HMI asks the driver to move backward, till approaches the rear vehicle.\nThe ECU send the remaining distance between the car and the rear car in the \n\"Remaining Distance CAN signal\"CASTLE shall monitor this signal and stop the vehicle\nwhen it is equal to zero.Or CASTLE shall monitor the HMI signal, and stop the \nvehicle when it shows \"Move Forward\"Both can be done through waitUntilEvent in C5\nThe ECU send the remaining distance between the car and the rear car in the \n\"Remaining Distance CAN signal\"\nThe ECU send the remaining distance between the car and the rear car in the \n\"Remaining Distance CAN signal\"\nCASTLE shall monitor this signal and stop the vehicle when it is equal to zero.\nCASTLE shall monitor this signal and stop the vehicle when it is equal to zero.\nOr CASTLE shall monitor the HMI signal, and stop the vehicle when it shows \"Move \nForward\"\nOr CASTLE shall monitor the HMI signal, and stop the vehicle when it shows \"Move \nForward\"\nBoth can be done through waitUntilEvent in C5\nBoth can be done through waitUntilEvent in C5\nDrive Forward\nThe Driver shall set the gear to drive and move the car.Drive backward and Drive \nforward are repeated, P4U ECU takes control of the steering, till the Parking is \nfinished.\nThe Driver shall set the gear to drive and move the car.\nThe Driver shall set the gear to drive and move the car.\nDrive backward and Drive forward are repeated, P4U ECU takes control of the \nsteering, till the Parking is finished.\nDrive backward and Drive forward are repeated, P4U ECU takes control of the \nsteering, till the Parking is finished.\nIPA (Intelligent Parking Assistance) Finished\nNote: Normally, the P4U system calculates the maneuver depending on the wheel ticks,\nthe wheel ticks are 4 signals, one for each wheel (FR, FL, RR and RL). Each signal \ncounts the distance which is elapsed by the corresponding wheel.\nIn C3: The CPU load is not able to calculate these signals exactly, we use some \napproximations.\nIn C5: We have a floating point unit in the processor and we can do the exact \ncalculation with reasonable CPU load. The wheel ticks calculation is standardized \nnow in C5 in file WheelTicks.c, and all needed parameters can be passed by the user.\n(Distance between Rear Wheels - Distance Between front and rear wheel - Ticks Per \nrevolution - Wheel Circumference).\nMore info about wheel ticks shall be foundhere\nSample Test Cases\nUPA\nHere is a sample test case, that is taken from Toyota Testing Engineers. The whole \ntest group is attached and can be viewed via tsxml viewer\nPress UPA Push ButtonSimulate an Obstacle on sensor FIL inside the continuous tone \narea (L1)Check that the front buzzer emits continuous tone.Check that rear buzzer \nemits no tone.Check that CAN signals report the obstacle correctly in the Front \nCenter Area.\nPress UPA Push Button\nPress UPA Push Button\nSimulate an Obstacle on sensor FIL inside the continuous tone area (L1)\nSimulate an Obstacle on sensor FIL inside the continuous tone area (L1)\nCheck that the front buzzer emits continuous tone.\nCheck that the front buzzer emits continuous tone.\nCheck that rear buzzer emits no tone.\nCheck that rear buzzer emits no tone.\nCheck that CAN signals report the obstacle correctly in the Front Center Area.\nCheck that CAN signals report the obstacle correctly in the Front Center Area.\nP4U\nHere is a sample test case, that is taken from Toyota Testing Engineers. The whole \ntest group is attached and can be viewed via tsxml viewer\nSimulate a parking slot (Side sensors see near obstacle [car 1], then see far \nobstacle[park slot], then see near obstacle[car 2])Slot FoundPos OK\nSimulate a parking slot (Side sensors see near obstacle [car 1], then see far \nobstacle[park slot], then see near obstacle[car 2])\nSimulate a parking slot (Side sensors see near obstacle [car 1], then see far \nobstacle[park slot], then see near obstacle[car 2])\nSlot Found\nSlot Found\nPos OK\nPos OK\nAutomatic SteeringDrive BackwardDrive Forward\nAutomatic Steering\nAutomatic Steering\nDrive Backward\nDrive Backward\nDrive Forward\nDrive Forward\nDrive BackwardDrive Forward\nDrive Backward\nDrive Backward\nDrive Forward\nDrive Forward\nIPA Finished\nIPA Finished\nIPA Finished", "type": "Document"}}