{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_git_git-bundle.txt"}, "page_content": "Git bundle\nIn case you want to share your project with a customer, who have no access to your \nremote server, git bundle is a good option.\nThis command \"git bundle\", bundles your project, and set a remote, submodules for \nit. So at the customer side, he can use pull, submodule commands\nBundle your project\nFrom git bash:git bundle create projectbundle masterThis will bundle the master \nbranchSend the bundle file \"project.bundle\" to your customerIf there is \nsubmodule:You bundle it, commit the bundle, before bundling the main project.\nFrom git bash:git bundle create projectbundle masterThis will bundle the master \nbranch\nFrom git bash:git bundle create projectbundle master\nThis will bundle the master branch\nThis will bundle the master branch\nSend the bundle file \"project.bundle\" to your customer\nSend the bundle file \"project.bundle\" to your customer\nIf there is submodule:You bundle it, commit the bundle, before bundling the main \nproject.\nIf there is submodule:\nYou bundle it, commit the bundle, before bundling the main project.\nYou bundle it, commit the bundle, before bundling the main project.\nUnbundle your project\nAt the customer disk, he will do the followingopen git bash where he want to place \nthe bundlegit clone <path-to-projectbundle>cd projectbundle/git pull <remote name> \n<branch name>ex:git pull origin masterIf there is submodule:repeat above steps for \nsubmodule bundlerun git submodule update --init\nAt the customer disk, he will do the followingopen git bash where he want to place \nthe bundle\nAt the customer disk, he will do the following\nopen git bash where he want to place the bundle\nopen git bash where he want to place the bundle\ngit clone <path-to-projectbundle>\ngit clone <path-to-projectbundle>\ncd projectbundle/\ncd projectbundle/\ngit pull <remote name> <branch name>ex:git pull origin masterIf there is \nsubmodule:repeat above steps for submodule bundlerun git submodule update --init\ngit pull <remote name> <branch name>\nex:git pull origin master\nex:git pull origin master\nex:git pull origin master\nIf there is submodule:repeat above steps for submodule bundle\nIf there is submodule:\nrepeat above steps for submodule bundle\nrepeat above steps for submodule bundle\nrun git submodule update --init\nrun git submodule update --init", "type": "Document"}}