{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_python_cre-python-client.txt"}, "page_content": "CRE Python Client (Test Cases)\nCRE Python Client is mainly intended to write test cases in both Direct and HIL \nmode. The API call syntax is almost the same as in Java.\nThe client communicates with CRE via MQTT as describedhere\nPython uses config.py which is the equivalent of config.jar / appl-config.jar\nHow to download / run CRE ?\nDownload CRE fromNexus(use latest)\nDownload CRE fromNexus(use latest)\nDownload Java 16 fromNexus\nDownload Java 16 fromNexus\nMake sure cre / java directories reside in the same directory in any PC location\nMake sure cre / java directories reside in the same directory in any PC location\nRun cre_ui.cmd (ui widget) or cre.cmd (command line)\nRun cre_ui.cmd (ui widget) or cre.cmd (command line)\nHow to generate config.py ?\nOpen command line in cre directory and run this commandcre.cmd -local -runPyGen \n-prjDir \"Your_Castle_Project_Directory\"\nOpen command line in cre directory and run this command\ncre.cmd -local -runPyGen -prjDir \"Your_Castle_Project_Directory\"\ncre.cmd -local -runPyGen -prjDir \"Your_Castle_Project_Directory\"\nThe config.py shall be generated in the same directory, keep it for next step\nThe config.py shall be generated in the same directory, keep it for next step\nHow to run Python test case ?\nMake sure Python is installed on your machine(3.x recommended), or you can check it \nfrom pythonwebsite\nMake sure Python is installed on your machine(3.x recommended), or you can check it \nfrom pythonwebsite\nRun this command:pip install \"paho-mqtt<2.0.0\"(Guidehere)python3 -m pip install \n--trusted-host pypi.org --trusted-host files.pythonhosted.org paho-mqtt\nRun this command:pip install \"paho-mqtt<2.0.0\"(Guidehere)\npython3 -m pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org\npaho-mqtt\npython3 -m pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org\npaho-mqtt\nHow to get template ?In user project add this in build.grade in castle.artifacts \ntask:comp( 'com.valeo.castle5', 'cre.client.python' , '1.+', 'prj/src.py')Find the \npython client template onCore ALMThe hierarchy as follows\nHow to get template ?\nIn user project add this in build.grade in castle.artifacts task:comp( \n'com.valeo.castle5', 'cre.client.python' , '1.+', 'prj/src.py')\nIn user project add this in build.grade in castle.artifacts task:\ncomp( 'com.valeo.castle5', 'cre.client.python' , '1.+', 'prj/src.py')\ncomp( 'com.valeo.castle5', 'cre.client.python' , '1.+', 'prj/src.py')\nFind the python client template onCore ALM\nFind the python client template onCore ALM\nThe hierarchy as follows\nThe hierarchy as follows\nCreClientHandler.pycontains the engine that communicates with CRE through MQTT\nCreClientHandler.pycontains the engine that communicates with CRE through MQTT\nconfig.py.exampleis an example for a generated config.py as done in section above.\nconfig.py.exampleis an example for a generated config.py as done in section above.\nIn Python Client, we have currently 2 templates for tests execution (Test Harness \nMode,SimpleClient Mode)\nIn Python Client, we have currently 2 templates for tests execution (Test Harness \nMode,SimpleClient Mode)\nTest Harness Mode\ncastle_config.json(snapshot below) provides all needed info for running tests on a \nspecified castle project\ncastle_config.json(snapshot below) provides all needed info for running tests on a \nspecified castle project\ntestsdirectory contains the test suites (e.g. Testsuite1.py)TestSuite (snapshot \nbelow 'TestSuite1') is class containing one or more test case annotated \nwith@Testsetup()andtearDown()are init and de-init functions respectivelyrun()is \nwhere the sequence of test cases invocation is defined\ntestsdirectory contains the test suites (e.g. Testsuite1.py)\nTestSuite (snapshot below 'TestSuite1') is class containing one or more test case \nannotated with@Test\nTestSuite (snapshot below 'TestSuite1') is class containing one or more test case \nannotated with@Test\nsetup()andtearDown()are init and de-init functions respectively\nsetup()andtearDown()are init and de-init functions respectively\nrun()is where the sequence of test cases invocation is defined\nrun()is where the sequence of test cases invocation is defined\nmain.pyis the entry point for running tests (python main.py) and it does the \nfollowingParse the json file connects to cre based on castle project provided \ninfoConnect to CRE based on provided info for castle project in json fileScan the \ntests directory for test suitesRun the test harness selected in json file => Test \nHarness is a seriesof Test Suites\nmain.pyis the entry point for running tests (python main.py) and it does the \nfollowing\nParse the json file connects to cre based on castle project provided info\nParse the json file connects to cre based on castle project provided info\nConnect to CRE based on provided info for castle project in json file\nConnect to CRE based on provided info for castle project in json file\nScan the tests directory for test suites\nScan the tests directory for test suites\nRun the test harness selected in json file => Test Harness is a seriesof Test Suites\nRun the test harness selected in json file => Test Harness is a seriesof Test Suites\nSimple Client Mode (Single/Multi Client)\ncre_client.py.exampleis an example for a python test case that connects to exu then \nruns the test case using the APIs inconfig.pywhich are the same APIs as in \nconfig.jar.Copycre_client.py.example as cre_client.py or rename it as you desire to \nedit your test caseMake sure cre_client.pyimportsconfig.py (generated one from \nsection above)Make sure config.pyimportsCreClientHandler.pyin cre_connect function \ncall in __main__, replace the project directory with yours as well as the exu type \nand the exu ids paased as array of integersthen make sure you call the desired \nfunction that contains your test casesTest case can be annotated \nwith@Testor@RunContextDirector@RunContextHILRun this .py file using the python \ninstalled on your machine, you will find the reports in castle project workspace \ndirectory named after 'testName' provided in the annotationIf you need to run tests \nwithmultiple clients, you can invoke cre_connect multiple times either synchronously\nor in threads. Then use 'client' returned by thecre_connectfunctionand \ninvokeclient.run(your_test_function).This will run the function in another thread \nwhich will be associated with this client\ncre_client.py.exampleis an example for a python test case that connects to exu then \nruns the test case using the APIs inconfig.pywhich are the same APIs as in \nconfig.jar.\ncre_client.py.exampleis an example for a python test case that connects to exu then \nruns the test case using the APIs inconfig.pywhich are the same APIs as in \nconfig.jar.\nCopycre_client.py.example as cre_client.py or rename it as you desire to edit your \ntest caseMake sure cre_client.pyimportsconfig.py (generated one from section \nabove)Make sure config.pyimportsCreClientHandler.pyin cre_connect function call in \n__main__, replace the project directory with yours as well as the exu type and the \nexu ids paased as array of integersthen make sure you call the desired function that\ncontains your test casesTest case can be annotated \nwith@Testor@RunContextDirector@RunContextHIL\nCopycre_client.py.example as cre_client.py or rename it as you desire to edit your \ntest case\nMake sure cre_client.pyimportsconfig.py (generated one from section above)\nMake sure cre_client.pyimportsconfig.py (generated one from section above)\nMake sure config.pyimportsCreClientHandler.py\nMake sure config.pyimportsCreClientHandler.py\nin cre_connect function call in __main__, replace the project directory with yours \nas well as the exu type and the exu ids paased as array of integers\nin cre_connect function call in __main__, replace the project directory with yours \nas well as the exu type and the exu ids paased as array of integers\nthen make sure you call the desired function that contains your test cases\nthen make sure you call the desired function that contains your test cases\nTest case can be annotated with@Testor@RunContextDirector@RunContextHIL\nTest case can be annotated with@Testor@RunContextDirector@RunContextHIL\nRun this .py file using the python installed on your machine, you will find the \nreports in castle project workspace directory named after 'testName' provided in the\nannotation\nRun this .py file using the python installed on your machine, you will find the \nreports in castle project workspace directory named after 'testName' provided in the\nannotation\nIf you need to run tests withmultiple clients, you can invoke cre_connect multiple \ntimes either synchronously or in threads. Then use 'client' returned by \nthecre_connectfunctionand invokeclient.run(your_test_function).This will run the \nfunction in another thread which will be associated with this client\nIf you need to run tests withmultiple clients, you can invoke cre_connect multiple \ntimes either synchronously or in threads. Then use 'client' returned by \nthecre_connectfunctionand invokeclient.run(your_test_function).This will run the \nfunction in another thread which will be associated with this client\nPython Events\nThe file below contains more Python annotations / Functions that help in event based\ntesting (Only functional in direct mode)OnEvent: Annotated function will be executed\nafter the specified event parameter is triggeredOnMessage:Annotated function will be\nexecuted after the specifiedmessageparameter is triggeredOnSignalUpdate:Annotated \nfunction will be executed after the specifiedsignal parameteris \nupdatedOnSignalChange:Annotated function will be executed after the specifiedsignal \nparameter is changedOnTimer:Annotated function will be executedin scheduled manner \nas per the specified delay parameter (in seconds)OnGlobalVariableUpdate: Annotated \nfunction will be executed after the specifiedglobal variableis \nupdatedOnGlobalVariableChange: Annotated function will be executed after the \nspecified global variable ischanged\nThe file below contains more Python annotations / Functions that help in event based\ntesting (Only functional in direct mode)\nOnEvent: Annotated function will be executed after the specified event parameter is \ntriggered\nOnEvent: Annotated function will be executed after the specified event parameter is \ntriggered\nOnMessage:Annotated function will be executed after the specifiedmessageparameter is\ntriggered\nOnMessage:Annotated function will be executed after the specifiedmessageparameter is\ntriggered\nOnSignalUpdate:Annotated function will be executed after the specifiedsignal \nparameteris updated\nOnSignalUpdate:Annotated function will be executed after the specifiedsignal \nparameteris updated\nOnSignalChange:Annotated function will be executed after the specifiedsignal \nparameter is changed\nOnSignalChange:Annotated function will be executed after the specifiedsignal \nparameter is changed\nOnTimer:Annotated function will be executedin scheduled manner as per the specified \ndelay parameter (in seconds)\nOnTimer:Annotated function will be executedin scheduled manner as per the specified \ndelay parameter (in seconds)\nOnGlobalVariableUpdate: Annotated function will be executed after the \nspecifiedglobal variableis updated\nOnGlobalVariableUpdate: Annotated function will be executed after the \nspecifiedglobal variableis updated\nOnGlobalVariableChange: Annotated function will be executed after the specified \nglobal variable ischanged\nOnGlobalVariableChange: Annotated function will be executed after the specified \nglobal variable ischanged\nPythonHelper Functions\nPlease find below helper functions as wellpause(ms):pause exu for a certain delay in\nmslib_func_call(text):lib call as in CTE Tree => text : \"prj.lib.MyLib.MyFunc(a1, \na2, ..)\" (Allowed in Direct Mode Only)task_func_call(text):tskcall as in CTE Tree =>\ntext : \"prj.lib.MyTask(a1, a2, ..)\" (Allowed in Direct Mode \nOnly)spec_text_func_call(text):Spect Text call => text: \"My \nEnglish\"logInfo(text):exu comment infologError(text):exu comment \nerrorabortTestIfError:the test is aborted if error occurredpause_until_event(event, \ntimeOutMs):pause until event is triggered with timeoutexternalCmd(path, \ncommandAndArgs, outHandler, errHandler, exitHandler):execute external PC cpmmand \nprovding working direcotry (path) with commad + arguments and optionally \noutput/error/exit handlersTest Navigations same as in Java:testCaseComplete, \ntestCaseStart, testGroupComplete, testGroupStart, testSerieComplete, \ntestSerieSkipped, testSerieStart, testSubSerieComplete, testSubSerieStart\nPlease find below helper functions as well\npause(ms):pause exu for a certain delay in ms\npause(ms):pause exu for a certain delay in ms\nlib_func_call(text):lib call as in CTE Tree => text : \"prj.lib.MyLib.MyFunc(a1, a2, \n..)\" (Allowed in Direct Mode Only)\nlib_func_call(text):lib call as in CTE Tree => text : \"prj.lib.MyLib.MyFunc(a1, a2, \n..)\" (Allowed in Direct Mode Only)\ntask_func_call(text):tskcall as in CTE Tree => text : \"prj.lib.MyTask(a1, a2, ..)\" \n(Allowed in Direct Mode Only)\ntask_func_call(text):tskcall as in CTE Tree => text : \"prj.lib.MyTask(a1, a2, ..)\" \n(Allowed in Direct Mode Only)\nspec_text_func_call(text):Spect Text call => text: \"My English\"\nspec_text_func_call(text):Spect Text call => text: \"My English\"\nlogInfo(text):exu comment info\nlogInfo(text):exu comment info\nlogError(text):exu comment error\nlogError(text):exu comment error\nabortTestIfError:the test is aborted if error occurred\nabortTestIfError:the test is aborted if error occurred\npause_until_event(event, timeOutMs):pause until event is triggered with timeout\npause_until_event(event, timeOutMs):pause until event is triggered with timeout\nexternalCmd(path, commandAndArgs, outHandler, errHandler, exitHandler):execute \nexternal PC cpmmand provding working direcotry (path) with commad + arguments and \noptionally output/error/exit handlers\nexternalCmd(path, commandAndArgs, outHandler, errHandler, exitHandler):execute \nexternal PC cpmmand provding working direcotry (path) with commad + arguments and \noptionally output/error/exit handlers\nTest Navigations same as in Java:testCaseComplete, testCaseStart, testGroupComplete,\ntestGroupStart, testSerieComplete, testSerieSkipped, testSerieStart, \ntestSubSerieComplete, testSubSerieStart\nTest Navigations same as in Java:testCaseComplete, testCaseStart, testGroupComplete,\ntestGroupStart, testSerieComplete, testSerieSkipped, testSerieStart, \ntestSubSerieComplete, testSubSerieStart", "type": "Document"}}