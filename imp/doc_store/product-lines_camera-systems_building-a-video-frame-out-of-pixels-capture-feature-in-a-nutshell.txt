{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_building-a-video-frame-out-of-pixels-capture-feature-in-a-nutshell.txt"}, "page_content": "Building a Video Frame out of Pixels (Capture Feature in a Nutshell)\nIn this article, we will walk through the whole process of capturing a single video \nframe in Castle 5 from a live ECU RAW video.\nVideo frames are transmitted from the ECU / Camera on pixel basis.Meaning that the \nECU sends one (or half pixel) at a time synced with Pclk (or Pclkx2).Based on the \ncolor map scheme used, the ECU sends a whole pixel or half pixel aligned with the \nPclk or Pclkx2.ECU serializer sends the video on a high speed GMSL (Gigabit \nMultimedia Serial Link) line.The GMSL is known to be:Very immune to noise.Can carry \ndata at very high speeds (Bandwidth ~ Gigabits per second).Could be extended to long\nlengths (several meters).The GMSL line is a single serial line that has all video \nsignals (Pclk, Hsync, Vsync, DE, Vid_data_x8x16x24) serialized / encoded \ninside.There is another technology that is very similar to GMSL, called FPD (Flat \nPanel Display) and also widly used by Serializer manufacturers.Please check this \narticle for more information about the difference between both technologies [TODO: \ninsert link]Video Serializer chip is the outer / final interface unit in the ECU \nthat sends the video.\nVideo frames are transmitted from the ECU / Camera on pixel basis.\nVideo frames are transmitted from the ECU / Camera on pixel basis.\nMeaning that the ECU sends one (or half pixel) at a time synced with Pclk (or \nPclkx2).\nMeaning that the ECU sends one (or half pixel) at a time synced with Pclk (or \nPclkx2).\nBased on the color map scheme used, the ECU sends a whole pixel or half pixel \naligned with the Pclk or Pclkx2.\nBased on the color map scheme used, the ECU sends a whole pixel or half pixel \naligned with the Pclk or Pclkx2.\nECU serializer sends the video on a high speed GMSL (Gigabit Multimedia Serial Link)\nline.\nECU serializer sends the video on a high speed GMSL (Gigabit Multimedia Serial Link)\nline.\nThe GMSL is known to be:Very immune to noise.Can carry data at very high speeds \n(Bandwidth ~ Gigabits per second).Could be extended to long lengths (several \nmeters).\nThe GMSL is known to be:\nVery immune to noise.\nVery immune to noise.\nCan carry data at very high speeds (Bandwidth ~ Gigabits per second).\nCan carry data at very high speeds (Bandwidth ~ Gigabits per second).\nCould be extended to long lengths (several meters).\nCould be extended to long lengths (several meters).\nThe GMSL line is a single serial line that has all video signals (Pclk, Hsync, \nVsync, DE, Vid_data_x8x16x24) serialized / encoded inside.\nThe GMSL line is a single serial line that has all video signals (Pclk, Hsync, \nVsync, DE, Vid_data_x8x16x24) serialized / encoded inside.\nThere is another technology that is very similar to GMSL, called FPD (Flat Panel \nDisplay) and also widly used by Serializer manufacturers.\nThere is another technology that is very similar to GMSL, called FPD (Flat Panel \nDisplay) and also widly used by Serializer manufacturers.\nPlease check this article for more information about the difference between both \ntechnologies [TODO: insert link]\nPlease check this article for more information about the difference between both \ntechnologies [TODO: insert link]\nVideo Serializer chip is the outer / final interface unit in the ECU that sends the \nvideo.\nVideo Serializer chip is the outer / final interface unit in the ECU that sends the \nvideo.\nLikewise, a video deserializer is the outer / first interface unit in the PIP that \ndecodes ECU video.The deserializer`s main objective is to decode the serial data \nsent on the GMSL / FPD link and recover it back to the parallel form of data.\nLikewise, a video deserializer is the outer / first interface unit in the PIP that \ndecodes ECU video.\nLikewise, a video deserializer is the outer / first interface unit in the PIP that \ndecodes ECU video.\nThe deserializer`s main objective is to decode the serial data sent on the GMSL / \nFPD link and recover it back to the parallel form of data.\nThe deserializer`s main objective is to decode the serial data sent on the GMSL / \nFPD link and recover it back to the parallel form of data.\nThe deserializer is supposed to provide the same video signals that the ECU`s SOC \nprovides to the serializer.The deserializer provides one pixel at a time (or half \npixel) synced with the Pclk (or Pclkx2) ticks.Video in core \n\"castle_v_vid_in_axi4s_v1_00_a\" accepts the sent pixels from the deserializer and \naccumulates them to form a complete line.The line is then pushed from the the video \nin core to VDMA over the AXI Stream bus (one pixel at a time on AXIS Aclk = \n100Mhz).Please refer to the followingarticlefor more information about the \narchitecture of the Video_in core.The VDMA is pre-configured in the FW \ninitialization time with captured video resolution (VDMA resolution config could be \nmodified in runtime as well).VDMA sequentially accepts line after line from the \nVideo in core.VDMA is to form a complete frame (based on configured resolution) and \nbuffer it in SDram (in a one dimensional array) with the memory map dedicated AXI4 \nbus interface.Please refer to the followingarticlefor more information about the \nVDMA.Once a complete frame has been formed in the SDRam array, we can retrieve it \nover Ethernet to PC.This could be realized over a dedicated Netconn socket or over \nMake Message PcCom.Either way, the FPGA sends one line at a time (from the SDram \narray) to a PC program (Java test case), and the program is supposed to aggregate \nreceived lines together and store them in the windows File System.\nThe deserializer is supposed to provide the same video signals that the ECU`s SOC \nprovides to the serializer.\nThe deserializer is supposed to provide the same video signals that the ECU`s SOC \nprovides to the serializer.\nThe deserializer provides one pixel at a time (or half pixel) synced with the Pclk \n(or Pclkx2) ticks.\nThe deserializer provides one pixel at a time (or half pixel) synced with the Pclk \n(or Pclkx2) ticks.\nVideo in core \"castle_v_vid_in_axi4s_v1_00_a\" accepts the sent pixels from the \ndeserializer and accumulates them to form a complete line.\nVideo in core \"castle_v_vid_in_axi4s_v1_00_a\" accepts the sent pixels from the \ndeserializer and accumulates them to form a complete line.\nThe line is then pushed from the the video in core to VDMA over the AXI Stream bus \n(one pixel at a time on AXIS Aclk = 100Mhz).\nThe line is then pushed from the the video in core to VDMA over the AXI Stream bus \n(one pixel at a time on AXIS Aclk = 100Mhz).\nPlease refer to the followingarticlefor more information about the architecture of \nthe Video_in core.\nPlease refer to the followingarticlefor more information about the architecture of \nthe Video_in core.\nThe VDMA is pre-configured in the FW initialization time with captured video \nresolution (VDMA resolution config could be modified in runtime as well).\nThe VDMA is pre-configured in the FW initialization time with captured video \nresolution (VDMA resolution config could be modified in runtime as well).\nVDMA sequentially accepts line after line from the Video in core.\nVDMA sequentially accepts line after line from the Video in core.\nVDMA is to form a complete frame (based on configured resolution) and buffer it in \nSDram (in a one dimensional array) with the memory map dedicated AXI4 bus interface.\nVDMA is to form a complete frame (based on configured resolution) and buffer it in \nSDram (in a one dimensional array) with the memory map dedicated AXI4 bus interface.\nPlease refer to the followingarticlefor more information about the VDMA.\nPlease refer to the followingarticlefor more information about the VDMA.\nOnce a complete frame has been formed in the SDRam array, we can retrieve it over \nEthernet to PC.\nOnce a complete frame has been formed in the SDRam array, we can retrieve it over \nEthernet to PC.\nThis could be realized over a dedicated Netconn socket or over Make Message PcCom.\nThis could be realized over a dedicated Netconn socket or over Make Message PcCom.\nEither way, the FPGA sends one line at a time (from the SDram array) to a PC program\n(Java test case), and the program is supposed to aggregate received lines together \nand store them in the windows File System.\nEither way, the FPGA sends one line at a time (from the SDram array) to a PC program\n(Java test case), and the program is supposed to aggregate received lines together \nand store them in the windows File System.", "type": "Document"}}