{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_external-tools-interfacing_robot-operating-system-ros_ros-jade.txt"}, "page_content": "ROS Jade\nUbuntu 14.04 x64 Installation Steps\nSimple Python Demo\nJust to ensure everything is up and ready to run, it's preferred to have this demo \nas a starting point. The steps may be carried out on a single PC or distributed over\nnetwork.\nStart ROS coreroscore &Create a node, listening to UDP 5005, that simply reads a \nnumber \"n\" and outputs \"n+1\" at UDP 5006import rospyimport \nsocketrospy.init_node('echo_reciever')UDP_IP = \"127.0.0.1\"UDP_PORT = \n5005UDP_PORT_trans = 5006sock = socket.socket(socket.AF_INET, # \nInternetsocket.SOCK_DGRAM) # UDPsock.bind((UDP_IP, UDP_PORT))print \"Init \nSuccess!\"while True:data, addr = sock.recvfrom(1024) # buffer size is 1024 \nbytesprint \"received message:\", datasock.sendto(str(int(data)+1), (UDP_IP, \nUDP_PORT_trans))\nStart ROS coreroscore &\nStart ROS core\nroscore &\nroscore &\nCreate a node, listening to UDP 5005, that simply reads a number \"n\" and outputs \n\"n+1\" at UDP 5006import rospyimport socketrospy.init_node('echo_reciever')UDP_IP = \n\"127.0.0.1\"UDP_PORT = 5005UDP_PORT_trans = 5006sock = socket.socket(socket.AF_INET, \n# Internetsocket.SOCK_DGRAM) # UDPsock.bind((UDP_IP, UDP_PORT))print \"Init \nSuccess!\"while True:data, addr = sock.recvfrom(1024) # buffer size is 1024 \nbytesprint \"received message:\", datasock.sendto(str(int(data)+1), (UDP_IP, \nUDP_PORT_trans))\nCreate a node, listening to UDP 5005, that simply reads a number \"n\" and outputs \n\"n+1\" at UDP 5006\nimport rospyimport socketrospy.init_node('echo_reciever')UDP_IP = \n\"127.0.0.1\"UDP_PORT = 5005UDP_PORT_trans = 5006sock = socket.socket(socket.AF_INET, \n# Internetsocket.SOCK_DGRAM) # UDPsock.bind((UDP_IP, UDP_PORT))print \"Init \nSuccess!\"while True:data, addr = sock.recvfrom(1024) # buffer size is 1024 \nbytesprint \"received message:\", datasock.sendto(str(int(data)+1), (UDP_IP, \nUDP_PORT_trans))\nimport rospy\nimport rospy\nimport socket\nimport socket\nrospy.init_node('echo_reciever')\nrospy.init_node('echo_reciever')\nUDP_IP = \"127.0.0.1\"\nUDP_IP = \"127.0.0.1\"\nUDP_PORT = 5005\nUDP_PORT = 5005\nUDP_PORT_trans = 5006\nUDP_PORT_trans = 5006\nsock = socket.socket(socket.AF_INET, # Internet\nsock = socket.socket(socket.AF_INET, # Internet\nsocket.SOCK_DGRAM) # UDP\nsocket.SOCK_DGRAM) # UDP\nsock.bind((UDP_IP, UDP_PORT))\nsock.bind((UDP_IP, UDP_PORT))\nprint \"Init Success!\"\nprint \"Init Success!\"\nwhile True:\nwhile True:\ndata, addr = sock.recvfrom(1024) # buffer size is 1024 bytes\ndata, addr = sock.recvfrom(1024) # buffer size is 1024 bytes\nprint \"received message:\", data\nprint \"received message:\", data\nsock.sendto(str(int(data)+1), (UDP_IP, UDP_PORT_trans))\nsock.sendto(str(int(data)+1), (UDP_IP, UDP_PORT_trans))\npython ~/CASTLE5/ROS/plusOne.py\npython ~/CASTLE5/ROS/plusOne.py\npython ~/CASTLE5/ROS/plusOne.py\npython ~/CASTLE5/ROS/plusOne.py\nCreate a client connecting to 5005, thentype in some numbers\nCreate a client connecting to 5005, thentype in some numbers\nCreate a client connecting to 5005, thentype in some numbers\nnc -u 127.0.0.1 5005\nnc -u 127.0.0.1 5005\nnc -u 127.0.0.1 5005\nnc -u 127.0.0.1 5005\nCreate a server listening to 6005 > checks the output\nCreate a server listening to 6005 > checks the output\nCreate a server listening to 6005 > checks the output\nnc -u -k -l 127.0.0.1 5006\nnc -u -k -l 127.0.0.1 5006\nnc -u -k -l 127.0.0.1 5006\nnc -u -k -l 127.0.0.1 5006\nNB:ncis netcat, for more info consult its man page.\nSimple C++ Demo\nYou can findherethe steps to run a Hello World Project of ROS from Eclipse.\nbefore running \"make eclipse-project\"\nAdd to the .bashrc where \"/home/akamel/workspace_cdt/ros\" is the location of the \nproject\nexport ROS_PACKAGE_PATH=/home/akamel/workspace_cdt/ros:$ROS_PACKAGE_PATH\nNote: Update test in the example to be test0\nYou shall see \"Hello World\" after the build", "type": "Document"}}