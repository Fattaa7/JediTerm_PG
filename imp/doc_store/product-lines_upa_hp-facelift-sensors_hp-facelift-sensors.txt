{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_upa_hp-facelift-sensors_hp-facelift-sensors.txt"}, "page_content": "system-overview ---\n[1] Hp Facelift Sensors - System Overview\nSystem Overview\nAn enhanced version of Hp Sensors. Where the ECU is usually connected to 12 and up \nto 24 sensors, each is separately connected to the ECU on a LIN bus. In this \ndocument, we'll have a quick overview on the application level requirements and how \nthe communication goes between the ECU and the sensor.\nHow does Hp Facelift Sensors communicate with ECU ?\nSensors communicate with ECU over LIN Protocol with some requirements from the \nHp_Specs.\nLIN Protocol Headlines\nAs a quick overview on the main aspects of the LIN communication; On the LIN bus \nthere's always a \"Master\" node and one or more \"Slave\" nodes.\nThe Master node is the one who decides when and which frame shall be transferred on \nthe bus.The Slave node task is to provide the data transported by each frame.LIN \nProtocol version used in Hp is 2.1, which speed 19.2 Kbps; One bit-time is ~ 52 us.\nThe Master node is the one who decides when and which frame shall be transferred on \nthe bus.\nThe Master node is the one who decides when and which frame shall be transferred on \nthe bus.\nThe Slave node task is to provide the data transported by each frame.\nThe Slave node task is to provide the data transported by each frame.\nLIN Protocol version used in Hp is 2.1, which speed 19.2 Kbps; One bit-time is ~ 52 \nus.\nLIN Protocol version used in Hp is 2.1, which speed 19.2 Kbps; One bit-time is ~ 52 \nus.\nHow does the LIN frame look like and how is it requested ?\nA LIN frame consists of two parts:\nHeader: Provided by the Master node.Response: Provided by the Slave node.\nHeader: Provided by the Master node.\nHeader: Provided by the Master node.\nResponse: Provided by the Slave node.\nResponse: Provided by the Slave node.\nThere are two types of data that can be transported within a LIN Frame:\nSignals: Known as scalar values or byte arrays packed into the data field of a \nframe.Diagnostics Messages: The interpretation of the data field depends on the data\nfield itself and the state of the communication nodes.\nSignals: Known as scalar values or byte arrays packed into the data field of a \nframe.\nSignals: Known as scalar values or byte arrays packed into the data field of a \nframe.\nDiagnostics Messages: The interpretation of the data field depends on the data field\nitself and the state of the communication nodes.\nDiagnostics Messages: The interpretation of the data field depends on the data field\nitself and the state of the communication nodes.\nFrame Structure in LIN:\nThe frame is constructed on some known fields as:\nBreak FieldUsed to raise a flag that it's the beginning of a new LIN frame.Generated\nby the Master node.At least 13 nominal bits of a dominant value '0'.Followed by a \n\"Break Delimiter\" field; which is one bit time long.\nBreak Field\nUsed to raise a flag that it's the beginning of a new LIN frame.Generated by the \nMaster node.At least 13 nominal bits of a dominant value '0'.Followed by a \"Break \nDelimiter\" field; which is one bit time long.\nUsed to raise a flag that it's the beginning of a new LIN frame.\nUsed to raise a flag that it's the beginning of a new LIN frame.\nGenerated by the Master node.\nGenerated by the Master node.\nAt least 13 nominal bits of a dominant value '0'.\nAt least 13 nominal bits of a dominant value '0'.\nFollowed by a \"Break Delimiter\" field; which is one bit time long.\nFollowed by a \"Break Delimiter\" field; which is one bit time long.\nSync FieldIt's a byte field with value 0x55.\nSync Field\nIt's a byte field with value 0x55.\nIt's a byte field with value 0x55.\nIt's a byte field with value 0x55.\nPID {Protected Identifier}Frame ID + Parity Bits.6 bits for frame ID --> Ranges used\nfor ID is 0 --> 63 (0x3F), where0x00 to 0x3B: Used for signal carrying frames.0x3C &\n0x3D: Used for Diagnostics.0x3E & 0x3F: Reserved for future use.\nPID {Protected Identifier}\nFrame ID + Parity Bits.6 bits for frame ID --> Ranges used for ID is 0 --> 63 \n(0x3F), where0x00 to 0x3B: Used for signal carrying frames.0x3C & 0x3D: Used for \nDiagnostics.0x3E & 0x3F: Reserved for future use.\nFrame ID + Parity Bits.\nFrame ID + Parity Bits.\n6 bits for frame ID --> Ranges used for ID is 0 --> 63 (0x3F), where0x00 to 0x3B: \nUsed for signal carrying frames.0x3C & 0x3D: Used for Diagnostics.0x3E & 0x3F: \nReserved for future use.\n6 bits for frame ID --> Ranges used for ID is 0 --> 63 (0x3F), where\n0x00 to 0x3B: Used for signal carrying frames.\n0x00 to 0x3B: Used for signal carrying frames.\n0x3C & 0x3D: Used for Diagnostics.\n0x3C & 0x3D: Used for Diagnostics.\n0x3E & 0x3F: Reserved for future use.\n0x3E & 0x3F: Reserved for future use.\nData8 Bytes of Data\nData\n8 Bytes of Data\n8 Bytes of Data\n8 Bytes of Data\nChecksumLast field in a LIN frame. (Classic/Enhanced Checksum)\nChecksum\nLast field in a LIN frame. (Classic/Enhanced Checksum)\nLast field in a LIN frame. (Classic/Enhanced Checksum)\nLast field in a LIN frame. (Classic/Enhanced Checksum)\nHP Facelift Sensors Basic Requirements\nThe used UPAD_Spec version used now is v.5.7 (attached). We can simply divide the \nSpec into 2 main parts as follows:\nSensor Configuration Memory\nIn the real sensor ASIC, it has a configuration memory that carries data for all \nconfiguration parameters used for the sensor.The sensor Configuration memory \ncontains 25 indices (0x00 to 0x18), each has 6 bytes (CMDs) carrying information\nIn the real sensor ASIC, it has a configuration memory that carries data for all \nconfiguration parameters used for the sensor.\nIn the real sensor ASIC, it has a configuration memory that carries data for all \nconfiguration parameters used for the sensor.\nThe sensor Configuration memory contains 25 indices (0x00 to 0x18), each has 6 bytes\n(CMDs) carrying information\nThe sensor Configuration memory contains 25 indices (0x00 to 0x18), each has 6 bytes\n(CMDs) carrying information\nThe ECU can read from or write to those indices in its startup phase using the \ndiagnostics commands PIDs as follows:\nA diagnostic request can be decoded as follows:\n81:NAD+0x80\n81:NAD+0x80\nE or F:Read request from the sensor configuration memory.\nE or F:Read request from the sensor configuration memory.\n6 or 7:Write request in the sensor configuration memory.\n6 or 7:Write request in the sensor configuration memory.\nThe lower nibble of the second byte represents the configuration memory index used \nfor read or write.\nThe lower nibble of the second byte represents the configuration memory index used \nfor read or write.\nExample from the screen shot provided:\nMaster Request: 81 E0 FF FF FF FF FF FFE0=ReadIndex 0From configuration memory\nMaster Request: 81 E0 FF FF FF FF FF FF\nE0=ReadIndex 0From configuration memory\nE0=ReadIndex 0From configuration memory\nMaster Request: 81 69 80 80 80 F9 80 E769=WriteinIndex 9inside configuration \nmemory.CMD_0 = 80, CMD_1 = 80, CMD_2 = 80, CMD_3 = F9, CMD_4 = 80 and CMD_5 = E7.\nMaster Request: 81 69 80 80 80 F9 80 E7\n69=WriteinIndex 9inside configuration memory.\n69=WriteinIndex 9inside configuration memory.\nCMD_0 = 80, CMD_1 = 80, CMD_2 = 80, CMD_3 = F9, CMD_4 = 80 and CMD_5 = E7.\nCMD_0 = 80, CMD_1 = 80, CMD_2 = 80, CMD_3 = F9, CMD_4 = 80 and CMD_5 = E7.\nSignal Carrying Frames\nPIDs used for triggering and reporting different kinds of sensor measurements (ex. \ndirect, indirect, long range BPSK, short range, ...etc)PIDs used to check data in \nthe middle of the communication that can be reflected from/into the configuration \nmemory.\nPIDs used for triggering and reporting different kinds of sensor measurements (ex. \ndirect, indirect, long range BPSK, short range, ...etc)\nPIDs used for triggering and reporting different kinds of sensor measurements (ex. \ndirect, indirect, long range BPSK, short range, ...etc)\nPIDs used to check data in the middle of the communication that can be reflected \nfrom/into the configuration memory.\nPIDs used to check data in the middle of the communication that can be reflected \nfrom/into the configuration memory.\nThe ECU sends the header of the measurement triggering PIDs requesting the following\nfrom the sensor in every header:\nReport what was requested in last measurement.Start a new measurement of type xxx. \n(N.B: Measurement type to be started depends on the PID that's sent from the ECU)\nReport what was requested in last measurement.\nReport what was requested in last measurement.\nStart a new measurement of type xxx. (N.B: Measurement type to be started depends on\nthe PID that's sent from the ECU)\nStart a new measurement of type xxx. (N.B: Measurement type to be started depends on\nthe PID that's sent from the ECU)\nMore details about measurement types is documented inthispage.", "type": "Document"}}