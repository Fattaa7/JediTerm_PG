{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_windows-os_remotely-control-powersupply.txt"}, "page_content": "Remotely Control PowerSupply via RS-232 serial interface\nHow to Remotely ControlTOE 89xx PowerSupplyvia the serial RS-232 interface of a \ncomputer ?\nThe following steps are done by Windows PowerShell NOT MobaXterm\n(by Windows PowerShell you can see the characters you send to double check that)\n1- Connect Usb-to-Serial cable to the machine.\n2- Connect the power supply with the serial cable (should be cross connection using \ncrossover cable)\nif crossover cable is not exist, make the following connections manually\n3- OpenWindows PowerShell(Command line) orWindows PowerShell ISE(GUI)\n(Click on start -> search on Windows PowerShell)\nWindows PowerShell :\nWindows PowerShell ISE :\n4- Writing to a Serial Port\n[System.IO.Ports.SerialPort]::getportnames()//To get the port name you are \nconnecting to\n>>COM3\n$port= new-Object System.IO.Ports.SerialPort COM3,9600,None,8,one//Set the Baudrate,\nparity, data size and stop bit\n//based on your powersupply\n$port.open()//To open the port\n$port.WriteLine(\u201cSYST:REM\u201d)send command with Line Feed/New Line      //SYST:REM : \nthe command to remotely control TOE 89xx\n$port.Write(\u201cSYST:REM\u201d)send command without Line Feed/New Line         //SYST:REM : \nthe command to remotely control TOE 89xx\n$port.Close()//To close the port\n5- Reading from a Serial Port\n$port= new-Object System.IO.Ports.SerialPort COM3,9600,None,8,one\n$port.Open()\n$port.WriteLine(\u201cSYST:REM\u201d)//SYST:REM : the command to remotely control TOE 89xx\n$port.WriteLine(\u201c*IDN?\u201d)//*IDN? : the command to scans the device identification of \nthe power supply\n$port.ReadLine()\n>>TOELLNER,TOE8951-40,85821,3.50-3.50\n6- Screen Shots for Windows PowerShell and Windows PowerShell ISE", "type": "Document"}}