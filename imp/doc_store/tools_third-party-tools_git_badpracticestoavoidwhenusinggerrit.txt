{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_git_badpracticestoavoidwhenusinggerrit.txt"}, "page_content": "Good practices to use & Bad practices to avoid when using Gerrit\nPost date: Mar 19, 2019 7:36:29 PM\nWhen dealing with Gerrit, we need to be careful when pushing multiple commits over \nmultiple changes to avoid creating unnecessary merge conflicts.\nUsing Gerrit allows the Commits to be pushed in a sequential form onto Git, like \nthis:\nHowever, it is very easy to push a lot of commits and changes onto Gerrit and end up\nin a situation like this:\nThe second scenario is very likely to cause merge conflicts (albeit unintended) \nbecause Commits are being pushed unto Gerrit without careful consideration of the \nchild-parent relation between each two commits.\nThis becomes even worse when dealing with multiple changes along multiple patch sets\nand rebasing patch sets onto other patch sets, which can be similar to this:\nThere are couple of bad practices here in the above illustration:\nSeveral Change IDs related to different Features are dependent on each Other(For \nexample: Change IDVfor FeatureBhas parent Change IDIVfor FeatureA).Such relationship\nshould be avoided as much as possible (especially if FeaturesAandBare \nunrelated).Change IDs that are parents to other Change IDs are rebased.(For example:\nCommit ID1for Change IDIfor FeatureAwas originally branching out of theBase Commitin\nPatch Set1.However, looking at Commit ID11for the same Change IDIwith Patch Set2now \nhas parent Change IDIIIPatch Set2).This will cause all of the Commits branching out \nof Commit ID1to be un-merge-able (creating merge conflicts due to outdated parent).\nSeveral Change IDs related to different Features are dependent on each Other\nSeveral Change IDs related to different Features are dependent on each Other\n(For example: Change IDVfor FeatureBhas parent Change IDIVfor FeatureA).\n(For example: Change IDVfor FeatureBhas parent Change IDIVfor FeatureA).\nSuch relationship should be avoided as much as possible (especially if \nFeaturesAandBare unrelated).\nSuch relationship should be avoided as much as possible (especially if \nFeaturesAandBare unrelated).\nChange IDs that are parents to other Change IDs are rebased.\nChange IDs that are parents to other Change IDs are rebased.\n(For example: Commit ID1for Change IDIfor FeatureAwas originally branching out of \ntheBase Commitin Patch Set1.\n(For example: Commit ID1for Change IDIfor FeatureAwas originally branching out of \ntheBase Commitin Patch Set1.\nHowever, looking at Commit ID11for the same Change IDIwith Patch Set2now has parent \nChange IDIIIPatch Set2).\nHowever, looking at Commit ID11for the same Change IDIwith Patch Set2now has parent \nChange IDIIIPatch Set2).\nThis will cause all of the Commits branching out of Commit ID1to be un-merge-able \n(creating merge conflicts due to outdated parent).\nThis will cause all of the Commits branching out of Commit ID1to be un-merge-able \n(creating merge conflicts due to outdated parent).\nBoth bad practices are easily avoided with just a small amount of effort:\nMake sure all unrelated changes are branching out of the same base commit.Avoid \nmaking dependent changes to different features (Avoid Commit IDs5,6and7).\nMake sure all unrelated changes are branching out of the same base commit.\nMake sure all unrelated changes are branching out of the same base commit.\nAvoid making dependent changes to different features (Avoid Commit IDs5,6and7).\nAvoid making dependent changes to different features (Avoid Commit IDs5,6and7).\n(Create branches locally if it will help avoid confusion, once the Changes are \nuploaded to Gerrit, they can be easily fetched and updated as needed).\n(Create branches locally if it will help avoid confusion, once the Changes are \nuploaded to Gerrit, they can be easily fetched and updated as needed).\n(Create branches locally if it will help avoid confusion, once the Changes are \nuploaded to Gerrit, they can be easily fetched and updated as needed).\n(Create branches locally if it will help avoid confusion, once the Changes are \nuploaded to Gerrit, they can be easily fetched and updated as needed).\n(Create branches locally if it will help avoid confusion, once the Changes are \nuploaded to Gerrit, they can be easily fetched and updated as needed).\nMake sure all changes for the same features are not being rebased \nunnecessarily.(Avoid Commit ID11to avoid oudated parent for Commit \nIDs2,5,6,7,8,9and10).\nMake sure all changes for the same features are not being rebased unnecessarily.\nMake sure all changes for the same features are not being rebased unnecessarily.\n(Avoid Commit ID11to avoid oudated parent for Commit IDs2,5,6,7,8,9and10).\n(Avoid Commit ID11to avoid oudated parent for Commit IDs2,5,6,7,8,9and10).\n(Create Commit IDs with a change that is common or needed for different changes to \nwork as a common parent.Use the different patch sets for the same change for \nupdating the change with new modifications or rebasing only when needed).\n(Create Commit IDs with a change that is common or needed for different changes to \nwork as a common parent.Use the different patch sets for the same change for \nupdating the change with new modifications or rebasing only when needed).\n(Create Commit IDs with a change that is common or needed for different changes to \nwork as a common parent.Use the different patch sets for the same change for \nupdating the change with new modifications or rebasing only when needed).\n(Create Commit IDs with a change that is common or needed for different changes to \nwork as a common parent.\n(Create Commit IDs with a change that is common or needed for different changes to \nwork as a common parent.\nUse the different patch sets for the same change for updating the change with new \nmodifications or rebasing only when needed).\nUse the different patch sets for the same change for updating the change with new \nmodifications or rebasing only when needed).\nOne last note:Make sure that the changes uploaded on Gerrit do not contain a lot of \nfiles modified, to make the peer review easier on your peers.\nLet the scope of change be the separator between one Change ID and another.", "type": "Document"}}