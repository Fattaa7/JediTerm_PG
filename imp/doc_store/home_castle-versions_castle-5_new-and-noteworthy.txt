{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "home_castle-versions_castle-5_new-and-noteworthy.txt"}, "page_content": "What's New\nHardware changes of the PIM basis board\nReplace Freescale Star12 and Xilinx Spartan2\nXilinx Spartan6Microblaze 32 Bit CPU as FPGA IP Core128 MB DDR3 RamEthernet + unique\nIDDUT power supply 0..45V, reduced voltage drop, improved measurement \nprecisionGlobal Clock\nXilinx Spartan6\nXilinx Spartan6\nMicroblaze 32 Bit CPU as FPGA IP Core\nMicroblaze 32 Bit CPU as FPGA IP Core\n128 MB DDR3 Ram\n128 MB DDR3 Ram\nEthernet + unique ID\nEthernet + unique ID\nDUT power supply 0..45V, reduced voltage drop, improved measurement precision\nDUT power supply 0..45V, reduced voltage drop, improved measurement precision\nGlobal Clock\nGlobal Clock\nAdditional features\nGigabit TransceiversRS485\nGigabit Transceivers\nGigabit Transceivers\nRS485\nRS485\nCastle Test Environment\nCTE is the PC Castle runtime that replaces its predecessors HilParser, HilRunner, \nHilparserFramework, HilFlasher, CastleRunner, CastleRunner2.\nIn the past each tool had its own use cases. Flashing the firmware to the hardware, \ntranslating scripts and reports, running one test. Also separated solutions exist to\nrun tests one multiple PIMs over long time (FT-Menu) or to implement End of Line \nTesters.\nStarting with CTE, there is now only one application that serves for all use cases. \nNevertheless it allows connection to 3rd party applications to system above Castle.\nModule to DUT ratio\nIt is now possible to have N modules connected to M DUTs and the C5 CTE will handle \nthis. The  modules can be of different type.\nExample Rain Sensors: The only interface to the test system might be a LIN bus. A \nPIM might be able to provide this funktionality multiple time, e.g. 4 LIN busses. \nWith C5, the 4 DUTs are represented as 4 DUTs in the report.\nExample Software HIL Test TCM: The test deepth for a specific ECU might be \nincreased. A single PIM might not be able to handle all requirements. With C5 it is \npossible to combine 2 PIMs and run a test for a single DUT on them. In the report, \nthis is represented as the interaction with one DUT.\nScripting features\nIn the past, every timing in Castle was based on a 5 milliseconds tick. C5 removes \nthis restriction. Actions can be planned on \u00b5s accuracy. Nevertheless the real \nexecution time is depending on the CPU load.\nThe API is now in object oriented style. That means, functionality that is equal by \nits type (e.g. digital switches) use the same interface. It is now much more easier \nto implement library code, that implements functionality working with interfaces.\nSignals\nThere are two types of Signals, those containing singular numeric values and those \ncontaining a byte array of raw data with fixed length.\nAll Signals implement a common interface about update timing tests.\nSignals are the replacement for C4 StaticTest and StaticSignal. Each signal for \nitself is an object instance.\nEvents\nEvents can be triggered in real time by customized conditions and can be used to \nunlock paused HIL tests or to start Tasklets.\nTasklets\nPredefined short sequence, like a HIL test that is stored at the module and can be \nstarted by an event.\nIf started for example by the reception of a DUT frame, the Tasklet is running in \nsync with the DUT. A feature many times requested by Castle users.\nModule side scripting\nWith Tasklets and Signals installed, it will be possible to use Signals by reference\nfrom within a Tasklet. A small set of functions will make it possible to have a real\ntime scripting available on the module side.\nGlobal Clock\nC5 rack do have a 1MHz Global Clock module. This clock has a free running absolute \ntimestamp. The speed of the clock is synchronized to the PC.\nThe time stamp is distributed to the modules every 1 millisecond, but the signal \nitself has a rising edge frequency of 1MHz, which can be used on FPGA basis.\nCastle Self Validation\nCTE supports the test for errors. This makes it possible to write tests, that test \nthe generation of errors and warning, while the test itself (if correct behavior \ndetected) runs through without errors.\nMore configuration vs. manually programming\nIn C5 the integration of communication databases will be fully supported by the \nsystem generator. The interfaces for them are fully generated. No manual \nsynchronizing between configuration files is needed.\nTraces\nC5 support the generation of Bus Traces. Therefor the raw data is put into the \nreport. The CastleView application will have the functionality to interpret this \ndata occording to the communication database (DBC, Fibex, ...).\nBinary report format and CastleView\nCastle 5 does write a binary report file instead of HTML reports. Advantages:\ncompact in sizefast to searchcan contain attached files ( e.g. DBC, Fibex, ODX, LDF,\n...)append only while the test is runningsplitting into multiple files\ncompact in size\ncompact in size\nfast to search\nfast to search\ncan contain attached files ( e.g. DBC, Fibex, ODX, LDF, ...)\ncan contain attached files ( e.g. DBC, Fibex, ODX, LDF, ...)\nappend only while the test is running\nappend only while the test is running\nsplitting into multiple files\nsplitting into multiple files\nThe program CastleView is used to visualize the report and to export various \nformats, e.g. the TestSummary PDF.", "type": "Document"}}