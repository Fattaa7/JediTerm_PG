{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "general-topics_ethernet_tcpsegmentation.txt"}, "page_content": "TCP Segmentation\nPost date: Feb 4, 2020 8:20:12 AM\nWhen you try to send a large TCP packet, you have to agree on payload size with Rx \nnode, That's when TCP segmentation is applied,\nThe default TCP Maximum Segment Size is536bytes.if you wish to set the maximum \nsegment size to a value other than the default, the maximum segment size is \nspecified as a TCP option, specifically in theTCP SYN packetduring the TCP \nhandshake. The valuecan't be changedafter the connection is established.\nThe following is a use case [> 4000bytes DOIP request over TCP ] with a trace shows \nwhat is the exact steps between server and client nodes,\n1. Tx Maximum Segment Size (MSS) is1426 bytes\n2. Rx window size (MSS) is1440 bytes\n- That means the Transmitter window size shall be applied (1426bytes )\n3. 1st TCP data Packet sent from Transmitter (1426bytes) according to Tx window size\n4. 2nd TCP data packet sent from Transmitter ( only14 bytes! )\nSo what happened at the above scenario?!\nAccording to the TCP protocol, you need to apply both Tx and Rx Node's window size \nat the same time,\nHow to make that happen without a conflict?\nUsing the PSH flag ...\nYou noticed the first packet was transmitted with Tx window size which is less that \nRx window size ( Tx MSS 1426 and Rx MSS 1440 ) and that will leave us with 14 bytes \nremaining,\nSo the next packet included only 14 bytes of payload but the PSH flag was set to \nnotify the Rx node this is a complete packet with the Rx Node's window size.\nHope that explanation was clear and simple :)\nReferences:\nhttps://en.wikipedia.org/wiki/Maximum_segment_size\nhttps://searchnetworking.techtarget.com/answer/Minimum-and-maximum-Ethernet-frame-si\nzes", "type": "Document"}}