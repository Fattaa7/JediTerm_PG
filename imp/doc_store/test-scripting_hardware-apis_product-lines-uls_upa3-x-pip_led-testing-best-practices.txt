{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_product-lines-uls_upa3-x-pip_led-testing-best-practices.txt"}, "page_content": "Led Testing Best Practices\nIn typical UPA system , Leds are outputs w.r.t. ECU. For more info about UPA systems\n, Please refer to thiswiki\nIn PIP 3.6 , 2 leds only can be simulated (UPA and PSM):\nIn PIP 3.7 / 3.8 , 8 leds can be simulated:\nUPAPSMBSDTMBSD_Alert_LBSD_Alert_RBSD_State_LBSD_State_R\nUPA\nUPA\nPSM\nPSM\nBSD\nBSD\nTM\nTM\nBSD_Alert_L\nBSD_Alert_L\nBSD_Alert_R\nBSD_Alert_R\nBSD_State_L\nBSD_State_L\nBSD_State_R\nBSD_State_R\nDimming VS. Blinking\nThe ECU normally drives the led using Pulse Width Modulation (PWM) signal. Based on \nthe characteristics of the PWM signal , different effects could be done to the led.\nIn Dimming , the led is always turned on , but with lower brightness than the \nmaximum. ECU can control the brightness of the led with changing the\nduty cycle of the PWM signal. The bigger the duty cycle , the brighter the led.\nWe call this PWM signal a \u201cContinuous PWM\u201d.\nIn Blinking , the led is not always turned on. In this case the ECU uses \u201cNon-\nContinuous PWM\u201d Signal.\nThe Special Case Of BSW Leds\nCASTLE has timer circuits to measure the characteristics of the PWM signal , to test\nthe dimming and blinking features of the leds.\nThe Blind Spot Warning (BSW) leds are:\nBSD_Alert_LBSD_Alert_RBSD_State_LBSD_State_R\nBSD_Alert_L\nBSD_Alert_L\nBSD_Alert_R\nBSD_Alert_R\nBSD_State_L\nBSD_State_L\nBSD_State_R\nBSD_State_R\nDue to PIP limitation , CASTLE has only one timer circuit to test the BSW leds. \nHence , the 4 leds are multiplexed on the same circuit , and CASTLE provides an API \nto select which led will be mapped to the timer circuit.\nThe API is SelectBsdPwmLed() in Switches module. Use case for this API will be shown\nin the next section.\nThe Connection Between The ECU And CASTLE\nThe typical connection between the ECU and CASTLE is as follows:\n(1) ECU => (2) Adaptation Board => (3) High Speed Cable => CASTLE PIM Front \nConnector\nThe pin connections between the adaptation board and CASTLE are documented in \nthissheetfor PIP 3.6 , and in thissheetfor PIP 3.7 / 3.8.\nWhat is important in the context of this wiki is , the signals\u2019 ways of all leds \nfrom the ECU to the CASTLE PIM should not be broken. Otherwise , CASTLE will not be \nable to measure the output signal from the ECU, and led testing will always fail. So\n, Make sure of the ECU cables, adaptation board and High Speed Cable ..etc , before \nrunning your test case(s).\nManual Library Use Cases\nNote: For any used API in the following use cases , you can refer to the HTML \ndocumentation of the firmware for more detailed descriptions. You can find it in \n\\config\\data folder.\n1) To test if UPA led is ON or OFF:\nexu.modTS().objLedUpa().afcTestLineState(Enme_level.HIGH); //ON\nexu.modTS().objLedUpa().afcTestLineState(Enme_level.LOW); //OFF\nThe same applies for all leds ; except for BSW leds , SelectBsdPwmLed() should be \ncalled first.\n2) To test if BSD_Alert_R is ON with duty cycle of 100% ( i.e. 100% Brightness ):\nexu.modTS().objSwitches().afcSelectBsdPwmLed(Enme_Pwmled.BSD_ALERT_R);\nexu.modFL().objLedBsdPwm().afcResetData();\nNote: To reset the timer recorded data in CASTLE\nexu.pause(100);\nexu.modFL().objLedBsdPwm().afcTestCurrentValue(EnmLed_State.CONSTANT_HIGH, 0, 0, 0, \n0, 0, 0, 0, 0);\nNotes:\n1. objLedBsdPwm is just a generic name of the selected led by SelectBsdPwmLed(). So \nit will be the same for all BSW leds.\n2. TestLineState() can't be used in this case , because it measures the line state \nat some instant time. However , TestCurrentValue buffer the line             state \nfor some time , and ensures the line state stayed HIGH all the time.\n3) To test if BSD_Alert_L is dimming with frequency of 200 Hz , and duty cycle of \n80% (These numbers are usually given in the requirement document):\nexu.modTS().objSwitches().afcSelectBsdPwmLed(Enme_Pwmled.BSD_ALERT_L);\nexu.modFL().objLedBsdPwm().afcResetData();\nNote: To reset the timer recorded data in CASTLE\nexu.pause(100);\nexu.modFL().objLedBsdPwm().afcTestCurrentValue(EnmLed_State.CONTINUOUS_PWM, 190, \n210, 0, 0, 0, 0, 75, 90);\nNotes:\nEnmLed_State.CONTINUOUS_PWM because it\u2019s dimming.Make sure that the Min/Max range of\ntesting is valid for your requirement value. For 200 Hz frequency , Fmin must be <= \n200 , and Fmax must be >= 200. The same applies for all parameters.When testing \ndimming , You should give ZERO value for Pulse Min/Max and Pause Min/Max.\nEnmLed_State.CONTINUOUS_PWM because it\u2019s dimming.\nEnmLed_State.CONTINUOUS_PWM because it\u2019s dimming.\nMake sure that the Min/Max range of testing is valid for your requirement value. For\n200 Hz frequency , Fmin must be <= 200 , and Fmax must be >= 200. The same applies \nfor all parameters.\nMake sure that the Min/Max range of testing is valid for your requirement value. For\n200 Hz frequency , Fmin must be <= 200 , and Fmax must be >= 200. The same applies \nfor all parameters.\nWhen testing dimming , You should give ZERO value for Pulse Min/Max and Pause \nMin/Max.\nWhen testing dimming , You should give ZERO value for Pulse Min/Max and Pause \nMin/Max.\n4) To test if BSD_Alert_L is blinking with frequency of 200 Hz , and duty cycle of \n80% , and pulse of 300 ms , and pause of 400 ms. (These numbers are usually given in\nthe requirement document):\nexu.modTS().objSwitches().afcSelectBsdPwmLed(Enme_Pwmled.BSD_ALERT_L);\nexu.modFL().objLedBsdPwm().afcResetData();\nNote: To reset the timer recorded data in CASTLE\nexu.pause(100);\nexu.modTS().objLedBsdPwm().afcTestCurrentValue(EnmLed_State.NONE, 190, 210, 0, 550, \n0, 550, 75, 100);\nNotes:\nEnmLed_State.NONE because it\u2019s blinking.Make sure that the Min/Max range of testing \nis valid for your requirement value. For 200 Hz frequency , Fmin must be <= 200 , \nand Fmax must be >= 200. The same applies for all parameters.\nEnmLed_State.NONE because it\u2019s blinking.\nEnmLed_State.NONE because it\u2019s blinking.\nMake sure that the Min/Max range of testing is valid for your requirement value. For\n200 Hz frequency , Fmin must be <= 200 , and Fmax must be >= 200. The same applies \nfor all parameters.\nMake sure that the Min/Max range of testing is valid for your requirement value. For\n200 Hz frequency , Fmin must be <= 200 , and Fmax must be >= 200. The same applies \nfor all parameters.\nDebugging Notes\nPlease check the following points before you open an artifact for the Firmware Team.\n1) Hardware Connections\nNote: All hardware pictures are for project Renault CMFB. Boards and cables may \ndiffer in other projects , but the same concepts applied to all.\nIn many cases , the Leds get visiabally working on the adaptation board , but the FW\nalways reads ZERO frequency. Please check the following:\nUsing a multimeter , on Buzzer Mode , test the signal way from the adaptation board \npin to the High Speed PIN. You can ask for the hardware lab help in this ; but it\u2019s \nsimple.For BSW leds ( as a special case ) , their corresponding wires in the high \nspeed cable might not be connected to CASTLE. In this case , open a ticket for the \nhardware lab , requesting to expose jumpers for pins:\nUsing a multimeter , on Buzzer Mode , test the signal way from the adaptation board \npin to the High Speed PIN. You can ask for the hardware lab help in this ; but it\u2019s \nsimple.\nUsing a multimeter , on Buzzer Mode , test the signal way from the adaptation board \npin to the High Speed PIN. You can ask for the hardware lab help in this ; but it\u2019s \nsimple.\nFor BSW leds ( as a special case ) , their corresponding wires in the high speed \ncable might not be connected to CASTLE. In this case , open a ticket for the \nhardware lab , requesting to expose jumpers for pins:\nFor BSW leds ( as a special case ) , their corresponding wires in the high speed \ncable might not be connected to CASTLE. In this case , open a ticket for the \nhardware lab , requesting to expose jumpers for pins:\n61 =>  BSD_ALERT_L62 => BSD_STATE_L63 => BSD_ALERT_R64 => BSD_STATE_R\n61 =>  BSD_ALERT_L\n61 =>  BSD_ALERT_L\n62 => BSD_STATE_L\n62 => BSD_STATE_L\n63 => BSD_ALERT_R\n63 => BSD_ALERT_R\n64 => BSD_STATE_R\n64 => BSD_STATE_R\nThen , the exposed jumpers should be connected directly to the adaptation board pins\nas shown below:\n2) TestCurrentValue() Error Message\nThe most common case that testers face is when TestCurrentValue() is called , then \nError message appear in the Cte log. The shown info in the error message is very \nuseful and most probably will guide you where is the issue.\nCase 1 : In the below C5r , the error messages shows the reason that caused the API \nto fail , and all expected values versus actual values. The reason here is \n\"Frequence\". Frequency was expected to be in range from 190 Hz to 210 Hz , but \nactually equals to Zero. Other fields reported Zero measurements too , and the \ncurrent led state is LOW.\nPossible Root Causes:\n1) Led signal might not be connected to CASTLE. Check cables and adaptation board.\n2) ECU might be driving the led state to be LOW. Check test case(s). Check if the \nECU powered or not.\nCase 2: In the below C5r , the reason of error is the frequency too , but this time \nbecause it is out of expected range. Unlike case 1 , firmware could measure all led \ndata properly. The same apply to all other fields , so always check the current and \nexpected values.\nPossible Root Causes:\n1) ECU bug. Check requirements for valid range.\n2) JAVA lib typo.", "type": "Document"}}