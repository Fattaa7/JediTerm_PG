{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_additional-tools_swtestide-1_tutorials_requirementanalysisintsxmlbasedprojectusingtoolsbaseline66.txt"}, "page_content": "Requirement analysis in tsxml based project using Tools Baseline 71\nPost date: Oct 9, 2017 11:01:20 AM\nIntroduction\nMost of the development projects are following an agile, sprint based development \nplan - like e.g. this one:\nAs seen in the picture one of the first steps in a sprint cycle at the SwTest level \nis usually the requirement analysis.\nRequirement analysis at SwTest level consists of roughly 3 sub activities:\nRequirement ReviewUpdate of test specification / test modelsTest Execution\nRequirement Review\nRequirement Review\nUpdate of test specification / test models\nUpdate of test specification / test models\nTest Execution\nTest Execution\nStep 1is usually involving anImpact Analysis\nImpact Analysis is usually done with the help of DOORS by doing a baseline compare -\nbetween the requirement sets of sprint n-1 and corrent sprint n. The weak spot\nhere is that the default baseline compare function is not taking the existing test \nspecification (of sprint n-1) into consideration to clearly mark the exact impact at\nthe test specification too.\nStep 2is in an automated (MBT) test environement usually the step that requires the \nmost amout of time. The test engineer is expected to:\nMap updated requirements into the test models used to generate the test \nspecificationUpdate/extend the test models based on the changes found during step 1\nMap updated requirements into the test models used to generate the test \nspecification\nMap updated requirements into the test models used to generate the test \nspecification\nUpdate/extend the test models based on the changes found during step 1\nUpdate/extend the test models based on the changes found during step 1\nMost important here is to keep consistency between the requiremetns being mapped \n(written into the test models) and the requiremetns that are actually found in the \ncurrent DOORS baseline for sprint n - keeping in mind that the added keys have to \nexactly match to the available SRS Doors object relevant for this sprint.\nIn order to allow this  - one of the approaches is togenerate a set of java classes \n(RequirementAPI.java) based on SRS DOORs extractsand use Eclipse (Java Compiler) to \nensure consistency.\nStep 3is usually involving any tool able to run the generated test specifications \ngenerate a report and extract the KPIs (Key Performance Indicators) for the current \nsprint at the SwTest level.  For the CASTLE based projects this can be the \nCTE/CastleView or (in case the project used a *.tsxml based approch) the SwTestIDE.\nUsualKPIs requested by the projects/processare:\nCoverage per DOORS module (includingjustification for uncovered \nrequiremetns)Traceability (horizontal)Opened Defect Tickets and their relation to \nthe test deviations\nCoverage per DOORS module (includingjustification for uncovered requiremetns)\nCoverage per DOORS module (includingjustification for uncovered requiremetns)\nTraceability (horizontal)\nTraceability (horizontal)\nOpened Defect Tickets and their relation to the test deviations\nOpened Defect Tickets and their relation to the test deviations\nDetailed SwTest process description can be found at theSMART portal.\nDetails of the workflow (based on the above mentioned process) in the tsxml based \nCASTLE projects can be seen here:\nImpact Analysis (using DoorsImporter and SwTestIDE) for STEP1\nHow to generate impact analysis sheet using tools baseline 66:\n1) Use the DoorsImporter to export the project relevant SRS modules of sprint N (and\npossibly already existing SwTestPlanSpec module):\n(find attached sample extracts as attachment to this article)\n2) After exporting the SRS using DoorsImporter , you will find the Impact Analysis \nfile in ReqExtract folder.\n3) Impact Analysis looks like this:\n(find attached sample extracts as attachment to this article)\nGenerate a set of java classes (using DoorsImporter and SwTestIDE) for STEP2\nHow to generate RequiremetnsAPI.java /.rqxml using tools baseline 66:\n1) Follow step 1 unter Impact Analysis\n2) Select the checkbox in DoorsImporter to generate Requirement Java API file.\n3) Generated API looks like this:\nIt is written to be used inside of Java7 or 8 projects\n(find attached, generated sample API & xml as attachment to this article)\nJustification for uncovered requirements (using SwTestIDE) for STEP3\n1) Follow step 1 unter Impact Analysis\n2) Use the SwTestIDE to generate a sheet carrying all requiremetns that are not \ncovered by the current loaded test set\n3) Generated justification sheet looks like this:\nGenerate Sw Test process relevant KPI statistics (SwTestSummary) for STEP3\nIf the project configuration xml of the SwTestIDE is referencing existing \nrequirement extracts the SwTest Summary is now also automatically containing\nthe data out of DOORS (in addition to Dimensions (Tickets) and Tsxml Test \nSpecification). This is useful to ensure consistency in between DOORs traceability \nmodule and the test specification located in Dimensions/git.\nHow to reference to an requirement extract using SwTestIDE:\nHow to generate using SwtestIDE:\nHit this button in the FlowControl tab.\nResult looks like this:\nBuild your own custom \"UserCode\" to using newly added requirement data object model \nsupported in SwTestIDE scripting interface\nIn case if you need any specific custom code generation/or are just searching for \nsome project specific information based on requiremetns please make usage of the \n\"User Code\" section of the SwTestIDE.\nHere vb.net or C# code snippets can be used to do such things - while making use of \na simple underlying Object model to the project relevant SRS/Doors extracts.\nSRS/DOORs Data Object Model:\nSample scripts are provided in the baseline 69 here:\nVB\\bin\\SwTestIDE\\Scripts\nany new script has to be registered in the sollowing xml located next to the \nSwTestIDE.exe:\nScriptsConfig.xml\nUpload / Import tsxmls (Including requirement linking) into DOORS\nRemarks:\nThe Importer Tool V4.1 is currently under investigation. Several updatedes to \ninrease the usability and robustness are in progress", "type": "Document"}}