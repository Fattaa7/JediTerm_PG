{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_front-camera_virtual-castle-canoesilkit-binding-for-mipc.txt"}, "page_content": "[Virtual Castle] Canoe/SilKit binding for MIPC\nIn regular setup the communication between Castle And FC ECU happens through SPI \nChannels as explainedhere\nIn regular setup the communication between Castle And FC ECU happens through SPI \nChannels as explainedhere\nin Virtual castle , the SPI phyiscal layer is replaced byPublish/Subscribemodel\nin Virtual castle , the SPI phyiscal layer is replaced byPublish/Subscribemodel\nto be able to see the messages sent from castle on CANoe Trace , we need to make \nCANoe Connect toSilKit Busand subscribe to the Topic castle uses to publish the \nmesages\nto be able to see the messages sent from castle on CANoe Trace , we need to make \nCANoe Connect toSilKit Busand subscribe to the Topic castle uses to publish the \nmesages\nTo Do this we need to generate a CANoe SilKit Binding usingvCDL file (Vector \nCommunication Description Language)\nTo Do this we need to generate a CANoe SilKit Binding usingvCDL file (Vector \nCommunication Description Language)\nopen CANoe , under Simulation Tab click on vCDL editor\nopen CANoe , under Simulation Tab click on vCDL editor\nnow place the follwoing code :\nnow place the follwoing code :\ntheconsumeddata is the data that CANoe will subscribe to it , the name of the \nsubscribe topic should match the name of the data field , in this case , it is : \n\"DSP2HOST\"\ntheconsumeddata is the data that CANoe will subscribe to it , the name of the \nsubscribe topic should match the name of the data field , in this case , it is : \n\"DSP2HOST\"\ntheprovideddata member is the data CANoe will publish it , the name of the publish \nTopic will be the name of the data member , in this case \"HOST2DSP\"\ntheprovideddata member is the data CANoe will publish it , the name of the publish \nTopic will be the name of the data member , in this case \"HOST2DSP\"\nNOTE : the Publish and subscribe topics can be configured from the FW side\nNOTE : the Publish and subscribe topics can be configured from the FW side\nNow save and load the file to the simulation setup , when you start the simulation ,\nCANoe , will subscribe to the rx topic and you can see the incoming messages from \nthe FW\nNow save and load the file to the simulation setup , when you start the simulation ,\nCANoe , will subscribe to the rx topic and you can see the incoming messages from \nthe FW\nyou can also use interactive generator or CABL code to send tx frames\nyou can also use interactive generator or CABL code to send tx frames\nnamespace mipc_ns\n{\ntypedef dl_frm = array<uint8, 128>;\n[CommunicationPattern=\"PublishSubscribe\",\nBinding=\"SilKit\"]\ninterface MIPC_prot\n{\n//vCastle -> SilKit -> CANoe\nconsumed  data dl_frm DSP2HOST;\n// CANoe -> SilKit -> vCastle\nprovided  data dl_frm HOST2DSP;\n}\n// create an instance from the interface\nobject MIPCprot : MIPC_prot;\n}\nVirtual Castle Dynamic Configuration\nVirtual Castle Dynamic Configuration\nvCastle dynamic Configurations  are supported through V_CASTLE_ARGS option in \nC5ACfor the following :\nvCastle dynamic Configurations  are supported through V_CASTLE_ARGS option in \nC5ACfor the following :\nregistry URI Port .\nregistry URI Port .\nMIPC (SPI) publish and subscribe topics .\nMIPC (SPI) publish and subscribe topics .\nin the example below : Castle will publish mipc messages with topic : \"QSPI1\"\nin the example below : Castle will publish mipc messages with topic : \"QSPI1\"", "type": "Document"}}