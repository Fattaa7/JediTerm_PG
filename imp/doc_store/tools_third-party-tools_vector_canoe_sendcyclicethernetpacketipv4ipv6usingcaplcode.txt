{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_vector_canoe_sendcyclicethernetpacketipv4ipv6usingcaplcode.txt"}, "page_content": "Send Cyclic Ethernet Packet (IPV4/IPV6) using CAPL code\nPost date: Jul 8, 2019 10:08:27 AM\nThis Wiki is to show how to send cyclic packets regardless of its type [ IPV4, IPV6,\nDoIP, ... etc ]  and more important how to do that periodically because so far Canoe\nis limited in supported panels for Ethernet,\nEthernet Interactive generator or Packet builder can't send cyclic packets/Pdus so \nhere I will show a simple workaround to do so,\nfirst you have to configure Canoe ethernet node toMAC Bypass\nfirst you have to configure Canoe ethernet node toMAC Bypass\nfirst you have to configure Canoe ethernet node toMAC Bypass\nsecondly, You will copy the raw data shown at the trace you recorded from ECU ( \nGeneral Data part ).\nsecondly, You will copy the raw data shown at the trace you recorded from ECU ( \nGeneral Data part ).\nsecondly, You will copy the raw data shown at the trace you recorded from ECU ( \nGeneral Data part ).\nThird you will put this raw data inside an array byteraw_obj_1[122] = {0x33, 0x33, \n0x00, 0x00, 0x00, 0x0B, 0x00, 0x16, 0x81, 0x02, 0x5A, 0xD3,,, etc}.Last step you \nwill initialize a timer and send this packet/pdu on timer overflow event ( CAPL node\nattached ) using CAPL functionEthOutputRawPacket().\nThird you will put this raw data inside an array byteraw_obj_1[122] = {0x33, 0x33, \n0x00, 0x00, 0x00, 0x0B, 0x00, 0x16, 0x81, 0x02, 0x5A, 0xD3,,, etc}.\nThird you will put this raw data inside an array byteraw_obj_1[122] = {0x33, 0x33, \n0x00, 0x00, 0x00, 0x0B, 0x00, 0x16, 0x81, 0x02, 0x5A, 0xD3,,, etc}.\nLast step you will initialize a timer and send this packet/pdu on timer overflow \nevent ( CAPL node attached ) using CAPL functionEthOutputRawPacket().\nLast step you will initialize a timer and send this packet/pdu on timer overflow \nevent ( CAPL node attached ) using CAPL functionEthOutputRawPacket().", "type": "Document"}}