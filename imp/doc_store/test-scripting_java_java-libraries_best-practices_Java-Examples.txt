{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_java_java-libraries_best-practices_Java-Examples.txt"}, "page_content": "Java examples\nEvaluate result from a diagnostic request in the CTE (Java):\nSample1:\nimport castle.testenv.base.data.IModuleMessage;\nif( !exu.isDryRun() ) {\n// only in direct mode and also not in dry-mode\n// call SFC get which waits until the module returned the message with the result\nIModuleMessage msg = exu.modTS().objCanDiagKs().sfcSend(\"80 01 30 bd 78 f1 56 4f f6 \n39 00\");\n// from the message get the field with name \"Data\" and get it as an HexString object\nHexString resHex = msg.getValue(\"Data\").getValueAsHexString();\n// ...\n}\nEvaluate a CAN signal value in the CTE (Java):\nSample1:\nimport castle.testenv.base.data.IModuleMessage;\nif( !exu.isDryRun() ) {\n// only in direct mode and also not in dry-mode\n// call SFC get which waits until the module returned the message with the result\nIModuleMessage res = \nexu.modTS().objComCan1().objKamera_Status().objSigKamera_Systemzustand().sfcGet();\n// from the message get the field with name \"Value\" and get it as an integer\nint resData = res.getValue(\"Value\").getValueAsInt();\nexu.comment(\"ResData=%s\", resData );\n// ...\n}\nGenerate a random hex string:\nSample1:\nint numBytes = 3;\nRandom r = new Random();\n// generate a stream of numBytes integers\nreturn r.ints(numBytes)\n// to String in upper case 2-digit hex and 0-padded\n.mapToObj(i -> String.format(\"%02X\", i & 0xFF ))\n// combine to single string with spaces in between\n.collect(Collectors.joining(\" \"));\nLog a CTE comment with the actual exu id:\nSample1:\nexu.comment( \"@exu%s my comment\", exu.getHwExu().getId() );", "type": "Document"}}