{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_platform-core_checking-castle-messages-using-ensuremsg-api.txt"}, "page_content": "Checking Castle Messages using EnsureMsg API\nDuring Castle SystemTest activity, it's required to test Castle APIs both positively\nand negatively.\nExample:\nIf Rx Signal (GOLDEN_CanSignal11) Value is -2.998, we've to check the following:\n+ve testing >> objSigGOLDEN_CanSignal11.afcEqualsCheck(-2.998) will pass without \nerror messages in the c5r\n-ve testing >> objSigGOLDEN_CanSignal11.afcEqualsCheck(-2.997) and \nobjSigGOLDEN_CanSignal11.afcEqualsCheck(-2.999) should give error message.\nBut if this error message was already expected using ensureMsg API then it'll be \nlogged as Error if not received according to this API configuration parameters.\nexu.ensureMsg(String objPath, String actionPath, Severity severity, int count, \nboolean countIsExact, double timeout)\nIn our case\nobjPath modDT/objComCanDut01/objSignals/objSigGOLDEN_CanSignal11\nActionPath Itf_SignalValue/msgEqualsCheck\nSeverity MessageAppError\ncount is number of messages to be received within the timeout and we've the option \ncountIsExact that can be set to false if we don't know the exact count\nAs per the attached c5r\nEqualsCheck(-2.998) is ok\nensureMsg then EqualsCheck(-2.997) is ok\nensureMsg then EqualsCheck(-2.999) is ok\nensureMsg then EqualsCheck(-2.998) fails after timeout", "type": "Document"}}