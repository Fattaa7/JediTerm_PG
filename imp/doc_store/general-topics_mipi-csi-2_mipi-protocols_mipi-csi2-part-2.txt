{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "general-topics_mipi-csi-2_mipi-protocols_mipi-csi2-part-2.txt"}, "page_content": "MIPI CSI2 - Part 2\nIn this article, we will walk through the last and most important MIPI CSI2 layer \n(Low Level Protocol Layer)\nIn this article, we will walk through the last and most important MIPI CSI2 layer \n(Low Level Protocol Layer)\nLow Level Protocol Layer is also known as thePacketization / Serialization Layer\nLow Level Protocol Layer is also known as thePacketization / Serialization Layer\nWhich is the most important layer as it holds the core MIPI CSI-2 serialization \nlogic\nWhich is the most important layer as it holds the core MIPI CSI-2 serialization \nlogic\nThe Low Level Protocol (LLP) is a byte orientated, packet based protocol that \nsupports the transport of arbitrary data using Short and Long packet formats.\nThe Low Level Protocol (LLP) is a byte orientated, packet based protocol that \nsupports the transport of arbitrary data using Short and Long packet formats.\nOverview of the Packetization Layer\nThe Packetization layer handles the conversion of raw image data and control \ninformation into a series of serial packets\nThe Packetization layer handles the conversion of raw image data and control \ninformation into a series of serial packets\nEach packet consists of a header and a payload\nEach packet consists of a header and a payload\nThe header contains essential metadata about the packet\nThe header contains essential metadata about the packet\nWhile the payload contains the actual data being transmitted\nWhile the payload contains the actual data being transmitted\nSuch as image pixels or control information\nSuch as image pixels or control information\nKey Functions of the Packetization Layer\n-Data Framing:\n- The raw image data captured by the camera sensor is formed into smaller chunks \ncalled frames (images) (e.g. 1280 x 960 frames)\n- Each frame is further divided into serial packets to achieve transmission over the\nCSI-2 interface\n-We have two types of serial packets:\n- Short Packets\n- Long Packets\nShort Packet Formation:A short packet is used mainly for synchronization, control, \nand status exchange between the sender and the receiverCamera and CPULike when the \nsender is saying to the receiver that the following packet holds the first frame in \nthe video, last frame, first line in frame, line number 120, ..etc.A Short Packet \nshall be identified by Data Types 0x00 to 0x0FA Short Packet contains only a Packet \nHeaderA Packet Footer shall not be present (not needed)The Word Count field in the \nPacket Header shall be replaced by a Short Packet Data FieldFor Frame \nSynchronization Data Types the Short Packet Data Field shall be the frame number.For\nLine Synchronization Data Types the Short Packet Data Field shall be the line number\nShort Packet Formation:\nA short packet is used mainly for synchronization, control, and status exchange \nbetween the sender and the receiver\nA short packet is used mainly for synchronization, control, and status exchange \nbetween the sender and the receiver\nCamera and CPU\nCamera and CPU\nLike when the sender is saying to the receiver that the following packet holds the \nfirst frame in the video, last frame, first line in frame, line number 120, ..etc.\nLike when the sender is saying to the receiver that the following packet holds the \nfirst frame in the video, last frame, first line in frame, line number 120, ..etc.\nA Short Packet shall be identified by Data Types 0x00 to 0x0F\nA Short Packet shall be identified by Data Types 0x00 to 0x0F\nA Short Packet contains only a Packet Header\nA Short Packet contains only a Packet Header\nA Packet Footer shall not be present (not needed)\nA Packet Footer shall not be present (not needed)\nThe Word Count field in the Packet Header shall be replaced by a Short Packet Data \nField\nThe Word Count field in the Packet Header shall be replaced by a Short Packet Data \nField\nFor Frame Synchronization Data Types the Short Packet Data Field shall be the frame \nnumber.\nFor Frame Synchronization Data Types the Short Packet Data Field shall be the frame \nnumber.\nFor Line Synchronization Data Types the Short Packet Data Field shall be the line \nnumber\nFor Line Synchronization Data Types the Short Packet Data Field shall be the line \nnumber\nEach image frame begins with a Frame Start (FS) Short Packet\nEach image frame begins with a Frame Start (FS) Short Packet\nThe FS Packet shall be followed by one or more long packets containing image data \nand zero or more short packets containing synchronization codes (line sync for \nexample)\nThe FS Packet shall be followed by one or more long packets containing image data \nand zero or more short packets containing synchronization codes (line sync for \nexample)\nEach image frame shall end with a Frame End (FE) Short Packet.\nEach image frame shall end with a Frame End (FE) Short Packet.\nFor FS and FE synchronization packets the Short Packet Data Field shall contain a \n16-bit frame number.\nFor FS and FE synchronization packets the Short Packet Data Field shall contain a \n16-bit frame number.\nThis frame number shall be the same for the FS and FE Short Packets\nThis frame number shall be the same for the FS and FE Short Packets\nThe 16-bit frame number, when used, shall be non-zero to distinguish it from the \nuse-case where frame number is inoperative and remains set to zero\nThe 16-bit frame number, when used, shall be non-zero to distinguish it from the \nuse-case where frame number is inoperative and remains set to zero\nFrame number increments by 1 for every FS packet with the same Virtual Channel and \nis 1043 periodically reset to one e.g. 1, 2, 1, 2, 1, 2, 1, 2 or 1, 2, 3, 4, 1, 2, \n3, 4\nFrame number increments by 1 for every FS packet with the same Virtual Channel and \nis 1043 periodically reset to one e.g. 1, 2, 1, 2, 1, 2, 1, 2 or 1, 2, 3, 4, 1, 2, \n3, 4\nLine synchronization packets are optional\nLine synchronization packets are optional\nGeneric Short Packet Data Type Codes\nGeneric Short Packet Data Type Codes\nThe intention of the Generic Short Packet Data Types is to provide a mechanism for \nthe CPU to instruct timing information for the opening/closing of shutters, \ntriggering of flashes, etc within the data stream.\nThe intention of the Generic Short Packet Data Types is to provide a mechanism for \nthe CPU to instruct timing information for the opening/closing of shutters, \ntriggering of flashes, etc within the data stream.\nLong Packet Formation:Each long packet is composed of:Packet Header (PH)Packet Data \n(Payload) (PD)And a packet footer (PF)\nLong Packet Formation:\nEach long packet is composed of:Packet Header (PH)Packet Data (Payload) (PD)And a \npacket footer (PF)\nEach long packet is composed of:\nPacket Header (PH)\nPacket Header (PH)\nPacket Data (Payload) (PD)\nPacket Data (Payload) (PD)\nAnd a packet footer (PF)\nAnd a packet footer (PF)\nPacket Header includes fields such as:Data identifier (DI)Virtual Channel Identifier\n(VC)Word Count (WC)Error Correction Code (ECC)\nPacket Header includes fields such as:Data identifier (DI)Virtual Channel Identifier\n(VC)Word Count (WC)Error Correction Code (ECC)\nPacket Header includes fields such as:\nData identifier (DI)\nData identifier (DI)\nVirtual Channel Identifier (VC)\nVirtual Channel Identifier (VC)\nWord Count (WC)\nWord Count (WC)\nError Correction Code (ECC)\nError Correction Code (ECC)\nPacket Payload Data (PD):Contains the actual image dataOr control & status data\nPacket Payload Data (PD):Contains the actual image dataOr control & status data\nPacket Payload Data (PD):\nContains the actual image data\nContains the actual image data\nOr control & status data\nOr control & status data\nHeader Information:Data identifier (DI):DI = DT + VCData Identifier = Data type + \nVirtual Channel Identifier\nHeader Information:\nData identifier (DI):DI = DT + VCData Identifier = Data type + Virtual Channel \nIdentifier\nData identifier (DI):\nDI = DT + VC\nDI = DT + VC\nData Identifier = Data type + Virtual Channel Identifier\nData Identifier = Data type + Virtual Channel Identifier\nData Type (DT):The Data Type value specifies the format and content of the payload \ndataThere are eight different data type classesWithin each class there are up to \neight different data type definitions.\nData Type (DT):\nThe Data Type value specifies the format and content of the payload data\nThe Data Type value specifies the format and content of the payload data\nThere are eight different data type classes\nThere are eight different data type classes\nWithin each class there are up to eight different data type definitions.\nWithin each class there are up to eight different data type definitions.\nWord Count:Specifies the size of the payload in bytes.\nWord Count:Specifies the size of the payload in bytes.\nECC:(Error Correct Code) Ensures the integrity of the header by detecting and \ncorrecting errors.\nECC:(Error Correct Code) Ensures the integrity of the header by detecting and \ncorrecting errors.\nData Payload:For image data packets, the payload contains pixel data.For embedded \ndata packets (such as the Generic Short Packet Data type 0x12), the payload contains\nmetadata or control information.\nData Payload:\nFor image data packets, the payload contains pixel data.\nFor image data packets, the payload contains pixel data.\nFor embedded data packets (such as the Generic Short Packet Data type 0x12), the \npayload contains metadata or control information.\nFor embedded data packets (such as the Generic Short Packet Data type 0x12), the \npayload contains metadata or control information.\nTypes of Packets:Long Packets: For image data, containing a large payload.Short \nPackets: For synchronization, control and status information\nTypes of Packets:\nLong Packets: For image data, containing a large payload.\nLong Packets: For image data, containing a large payload.\nShort Packets: For synchronization, control and status information\nShort Packets: For synchronization, control and status information\nA very important note here is that the SOT & EOT signals are not part of the packet\nA very important note here is that the SOT & EOT signals are not part of the packet\nThey are like the preample in Ethernet comm\nThey are like the preample in Ethernet comm\nA frame transmission example\nA frame transmission example\nEmbedded InformationIt is possible to embed extra lines containing additional \ninformation to the beginning and to the end of each picture frame.Most likely this \nis done for security reasons.If embedded information exists, then the lines \ncontaining the embedded data must use the embedded data code in the data identifier.\nEmbedded Information\nIt is possible to embed extra lines containing additional information to the \nbeginning and to the end of each picture frame.\nIt is possible to embed extra lines containing additional information to the \nbeginning and to the end of each picture frame.\nMost likely this is done for security reasons.\nMost likely this is done for security reasons.\nIf embedded information exists, then the lines containing the embedded data must use\nthe embedded data code in the data identifier.\nIf embedded information exists, then the lines containing the embedded data must use\nthe embedded data code in the data identifier.", "type": "Document"}}