{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-strategy_test-types_tooling.txt"}, "page_content": "Castle for SW Validation (SWE6)\nCDV Validation Tooling Teamforge Project:\nhttps://forge.vnet.valeo.com/sf/projects/valtooling/\n(CDV TTE Tooling)\nThe Old Tools Architecture - (from where we are comming and what is used)\nTo get an overview on the single steps - please findthis presentation\nThe Process that the tools are serving - (SMART SWE6 Software Qualification Test)\nThe Overall Future Vision - (what do we target and work at)\nThe entrire SWE6 process consists of cyclic activities that are performed using \nvarious machines and a variety of tools.\nThe long termsgoal is to abstract and encapsultate these tools into 4 blocks:\nTEST GENERATION ENVIRONMENT(tsxml format)\nTEST GENERATION ENVIRONMENT(tsxml format)\nInput:\nInput:\nRQXML/RQBIN (Requirements from requirement management tool (DOORS))TSDB (ModelAPI \nXML  as test bench API)Output:TSXML (runnable test sequence specification)TSECG V4 \n(Test Sequence Editor Case Generator)TEST RUN TIME ENVIRONMENT(Running test \nspecification-on CASTLE system or also NI bench)  local or remote  -> \"HIL Fram\" \n)Input:TSXML (runnable test sequence specification)Output:TSRES/TSXML with \nresultsTSDB (ModelAPI XML  as test bench API)CREX (Castle Remote Execution)\nRQXML/RQBIN (Requirements from requirement management tool (DOORS))\nTSDB (ModelAPI XML  as test bench API)\nTSDB (ModelAPI XML  as test bench API)\nOutput:\nOutput:\nTSXML (runnable test sequence specification)\nTSXML (runnable test sequence specification)\nTSECG V4 (Test Sequence Editor Case Generator)\nTSECG V4 (Test Sequence Editor Case Generator)\nTEST RUN TIME ENVIRONMENT(Running test specification-on CASTLE system or also NI \nbench)  local or remote  -> \"HIL Fram\" )\nTEST RUN TIME ENVIRONMENT(Running test specification-on CASTLE system or also NI \nbench)  local or remote  -> \"HIL Fram\" )\nInput:\nInput:\nTSXML (runnable test sequence specification)\nTSXML (runnable test sequence specification)\nOutput:\nOutput:\nTSRES/TSXML with results\nTSRES/TSXML with results\nTSDB (ModelAPI XML  as test bench API)\nTSDB (ModelAPI XML  as test bench API)\nCREX (Castle Remote Execution)\nCREX (Castle Remote Execution)\nTEST ANALYSIS AND REPORTING\nTEST ANALYSIS AND REPORTING\nInput:\nInput:\nTSRES/TSXML (executed  test specification in TSXML format or test sequence (TSXML) \nand test result TSRES)RQXML/RQBIN (Requirements from requirement management tool \n(DOORS))Output:JSON (summary of the results for SMART CI dashboard)HTML (Single page\nweb application visualizing the test traceability, and results)(Remarks: \nCiPublisher, SwTestReporter) -> under construction: CI Publisher will be part of CI \nPlugin and will be enritched with the rfeatures of the SwTestReporter over time.  \nSwTestReporter will continue to be the be the local tool for test report generation)\nTSRES/TSXML (executed  test specification in TSXML format or test sequence (TSXML) \nand test result TSRES)\nTSRES/TSXML (executed  test specification in TSXML format or test sequence (TSXML) \nand test result TSRES)\nRQXML/RQBIN (Requirements from requirement management tool (DOORS))\nRQXML/RQBIN (Requirements from requirement management tool (DOORS))\nOutput:\nOutput:\nJSON (summary of the results for SMART CI dashboard)\nJSON (summary of the results for SMART CI dashboard)\nHTML (Single page web application visualizing the test traceability, and results)\nHTML (Single page web application visualizing the test traceability, and results)\n(Remarks: CiPublisher, SwTestReporter) -> under construction: CI Publisher will be \npart of CI Plugin and will be enritched with the rfeatures of the SwTestReporter \nover time.  SwTestReporter will continue to be the be the local tool for test report\ngeneration)\n(Remarks: CiPublisher, SwTestReporter) -> under construction: CI Publisher will be \npart of CI Plugin and will be enritched with the rfeatures of the SwTestReporter \nover time.  SwTestReporter will continue to be the be the local tool for test report\ngeneration)\nTEST MANAGEMENT and ORCHESTRATION (CI)\nTEST MANAGEMENT and ORCHESTRATION (CI)\nOver all handling will be done via CI Gradle plugin - mainly due to the simplicity \nof deployment and maintainance among with the support for \nJavaInput:Pipeline.properties (properties file specifying all in and outputs for \nblock 1-3 - to be adjusted by the project team)Pipeline.bat (sequence of the hhigh \nlevel tasks to be adjusted by the project team)CDV Continuous Integration Setup \nGuideline for SWE6\nOver all handling will be done via CI Gradle plugin - mainly due to the simplicity \nof deployment and maintainance among with the support for Java\nOver all handling will be done via CI Gradle plugin - mainly due to the simplicity \nof deployment and maintainance among with the support for Java\nInput:\nInput:\nPipeline.properties (properties file specifying all in and outputs for block 1-3 - \nto be adjusted by the project team)\nPipeline.properties (properties file specifying all in and outputs for block 1-3 - \nto be adjusted by the project team)\nPipeline.bat (sequence of the hhigh level tasks to be adjusted by the project team)\nPipeline.bat (sequence of the hhigh level tasks to be adjusted by the project team)\nCDV Continuous Integration Setup Guideline for SWE6\nCDV Continuous Integration Setup Guideline for SWE6", "type": "Document"}}