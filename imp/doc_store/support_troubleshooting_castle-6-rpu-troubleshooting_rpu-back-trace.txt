{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "support_troubleshooting_castle-6-rpu-troubleshooting_rpu-back-trace.txt"}, "page_content": "CASTLE 6 RPU Back-trace\nUnwind Tables for Back-Trace\nIn CASTLE 6 RPU, ARM family features exception index tables (unwind tables) for \nproviding back-trace in runtime.\nWith libgcc support and (-funwind-tables) directive, we can fetch the backtrace in \nruntime.\nThis is done with Minimal Memory and Zero Code overhead.\nMechanism:Fetch Current PC \u2192Check PC Range in.ARM.exidxtable \u2192Perform unwind \ninstruction to get previous PC \u2192Repeat until end of stack\nMechanism:\nFetch Current PC \u2192\nFetch Current PC \u2192\nCheck PC Range in.ARM.exidxtable \u2192\nCheck PC Range in.ARM.exidxtable \u2192\nPerform unwind instruction to get previous PC \u2192\nPerform unwind instruction to get previous PC \u2192\nRepeat until end of stack\nRepeat until end of stack\nYou can find more info about unwind tables for ARMhere\nYou can find more info about unwind tables for ARMhere\nP1 Support:This feature is provided in1_Castlestarting \ncommit7c974713ad7b73983639e2a806497420a80f7de6Call this API in your \ncode:platform_log_ll(LogFatalWithTrace, \"My BackTrace Test\")\nP1 Support:\nThis feature is provided in1_Castlestarting \ncommit7c974713ad7b73983639e2a806497420a80f7de6\nThis feature is provided in1_Castlestarting \ncommit7c974713ad7b73983639e2a806497420a80f7de6\nCall this API in your code:platform_log_ll(LogFatalWithTrace, \"My BackTrace Test\")\nCall this API in your code:platform_log_ll(LogFatalWithTrace, \"My BackTrace Test\")\nException Handling\nAnother fruit is the exception handling report, as you can see in example below \nwhich access wrong address initentionally to fire exception", "type": "Document"}}