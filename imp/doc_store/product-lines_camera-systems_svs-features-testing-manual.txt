{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_svs-features-testing-manual.txt"}, "page_content": "SVS Features Testing Manual (Capture / Store Parts)\nSVS validation activities usually involve the following Castle 5 video features :\nCapture Frame : Capture static frame from input ECU video to Castle 5`s SD-ram (over\nLVDS interface).Store Frame : Retrieve captured static frame from Castle 5`s SD-ram \nto PC (over Ethernet interface).Load Frame : Load a static image from PC to Castle \n5`s SD-ram (over Ethernet interface).Stream View (over LVDS interface).Apply Camera \nFaults : by interfacing a Fault box and plugging fault cards into video path.\nCapture Frame : Capture static frame from input ECU video to Castle 5`s SD-ram (over\nLVDS interface).\nCapture Frame : Capture static frame from input ECU video to Castle 5`s SD-ram (over\nLVDS interface).\nStore Frame : Retrieve captured static frame from Castle 5`s SD-ram to PC (over \nEthernet interface).\nStore Frame : Retrieve captured static frame from Castle 5`s SD-ram to PC (over \nEthernet interface).\nLoad Frame : Load a static image from PC to Castle 5`s SD-ram (over Ethernet \ninterface).\nLoad Frame : Load a static image from PC to Castle 5`s SD-ram (over Ethernet \ninterface).\nStream View (over LVDS interface).\nStream View (over LVDS interface).\nApply Camera Faults : by interfacing a Fault box and plugging fault cards into video\npath.\nApply Camera Faults : by interfacing a Fault box and plugging fault cards into video\npath.\nCastle 5 test bench has three main objectives to fulfill in SVS validation :\nStub the surrounding view cameras in vehicle and simulate their output videos.Stub \nthe HU or the vehicle cluster and capture the input video stream.Apply faults to the\nvideo lines.\nStub the surrounding view cameras in vehicle and simulate their output videos.\nStub the surrounding view cameras in vehicle and simulate their output videos.\nStub the HU or the vehicle cluster and capture the input video stream.\nStub the HU or the vehicle cluster and capture the input video stream.\nApply faults to the video lines.\nApply faults to the video lines.\nIn this article, we will go through the process of capturing / storing a static \nimage from an input video stream.\nLoad / Stream features features documentation could be found in thiswiki.\nFor applying camera faults, please have a look at thiswiki.\nFirst of all we will describe the main steps to be followed by tester in order to \ncapture / store a static image from an input video from the ECU :\nFirst of all, you need to study your PIP, know all embedded chips in it, and the \noperation of each.You can explore all documented Castle 5 PIPs in thispage.If you \ncannot find your PIP listed in the page, please request a full documentation WIKI \nfrom the responsible FW developer.Now, you need to setup the HW environment for \ntesting the SVS features.\nFirst of all, you need to study your PIP, know all embedded chips in it, and the \noperation of each.\nFirst of all, you need to study your PIP, know all embedded chips in it, and the \noperation of each.\nYou can explore all documented Castle 5 PIPs in thispage.\nYou can explore all documented Castle 5 PIPs in thispage.\nIf you cannot find your PIP listed in the page, please request a full documentation \nWIKI from the responsible FW developer.\nIf you cannot find your PIP listed in the page, please request a full documentation \nWIKI from the responsible FW developer.\nNow, you need to setup the HW environment for testing the SVS features.\nNow, you need to setup the HW environment for testing the SVS features.\nSetting up the SVS testing environment\nIf you are working on a fusion project, and it is running on a two PIM solution, you\nneed to plug them both into a Castle 5 housing.In most fusion projects, the lower \ninserted PIM should be the TS module (usually for Comm, Diagnostics, and UPA \napplications).Upper inserted PIM module should be the VD module (usually for SVS \nvalidation).Plug the ECU video connector into the capture video connector of the SVS\nPIP.Launch your project`s CTE.Observe the state of the \"Pass\" led in the PIP.You can\nfind both the \"Pass\" and \"Lock\" leds located just above the deserializer as depicted\nin the following image.\nIf you are working on a fusion project, and it is running on a two PIM solution, you\nneed to plug them both into a Castle 5 housing.\nIf you are working on a fusion project, and it is running on a two PIM solution, you\nneed to plug them both into a Castle 5 housing.\nIn most fusion projects, the lower inserted PIM should be the TS module (usually for\nComm, Diagnostics, and UPA applications).\nIn most fusion projects, the lower inserted PIM should be the TS module (usually for\nComm, Diagnostics, and UPA applications).\nUpper inserted PIM module should be the VD module (usually for SVS validation).\nUpper inserted PIM module should be the VD module (usually for SVS validation).\nPlug the ECU video connector into the capture video connector of the SVS PIP.\nPlug the ECU video connector into the capture video connector of the SVS PIP.\nLaunch your project`s CTE.\nLaunch your project`s CTE.\nObserve the state of the \"Pass\" led in the PIP.\nObserve the state of the \"Pass\" led in the PIP.\nYou can find both the \"Pass\" and \"Lock\" leds located just above the deserializer as \ndepicted in the following image.\nYou can find both the \"Pass\" and \"Lock\" leds located just above the deserializer as \ndepicted in the following image.\nIf the \"Pass\" is switched off, this indicates that the Deserializer chip is in the \n\"Self test mode\", this should be reported to the FW developer to fix.If the \"Pass\" \nled is switched on, you can proceed with the following steps.Power on the ECU and \nsend all necessary communication frames to make the ECU provide a view.It is \npreferred to embed the past action in Turn_System_On CTE API.Ensure that the \n\"Lock\"led is switched on, indicating a successful lock status of the input video.If \nthe Lock led is switched off, please do the following :Ensure you are using the \ncorrect specific PIP for your project.Ensure the LVDS connections between the PIP \nand ECU are right.(some projects like FUS_GEELY_FS11 need to rotate the input cable \n90 degrees clock wise)\nIf the \"Pass\" is switched off, this indicates that the Deserializer chip is in the \n\"Self test mode\", this should be reported to the FW developer to fix.\nIf the \"Pass\" is switched off, this indicates that the Deserializer chip is in the \n\"Self test mode\", this should be reported to the FW developer to fix.\nIf the \"Pass\" led is switched on, you can proceed with the following steps.\nIf the \"Pass\" led is switched on, you can proceed with the following steps.\nPower on the ECU and send all necessary communication frames to make the ECU provide\na view.\nPower on the ECU and send all necessary communication frames to make the ECU provide\na view.\nIt is preferred to embed the past action in Turn_System_On CTE API.\nIt is preferred to embed the past action in Turn_System_On CTE API.\nEnsure that the \"Lock\"led is switched on, indicating a successful lock status of the\ninput video.\nEnsure that the \"Lock\"led is switched on, indicating a successful lock status of the\ninput video.\nIf the Lock led is switched off, please do the following :Ensure you are using the \ncorrect specific PIP for your project.Ensure the LVDS connections between the PIP \nand ECU are right.(some projects like FUS_GEELY_FS11 need to rotate the input cable \n90 degrees clock wise)\nIf the Lock led is switched off, please do the following :\nEnsure you are using the correct specific PIP for your project.\nEnsure you are using the correct specific PIP for your project.\nEnsure the LVDS connections between the PIP and ECU are right.\nEnsure the LVDS connections between the PIP and ECU are right.\n(some projects like FUS_GEELY_FS11 need to rotate the input cable 90 degrees clock \nwise)\n(some projects like FUS_GEELY_FS11 need to rotate the input cable 90 degrees clock \nwise)\nEnsure that all communicated HW patches are made to the PIP.GEELY_FS11 HW patches \nare listed in thiswiki.Connect the ECU to Epiphane video capture tool to ensure that\nthe ECU is providing a view.LVDS cables can be straight (one to one) or flipped, \nmake sure you are using the correct one for your project.\nEnsure that all communicated HW patches are made to the PIP.GEELY_FS11 HW patches \nare listed in thiswiki.Connect the ECU to Epiphane video capture tool to ensure that\nthe ECU is providing a view.LVDS cables can be straight (one to one) or flipped, \nmake sure you are using the correct one for your project.\nEnsure that all communicated HW patches are made to the PIP.\nEnsure that all communicated HW patches are made to the PIP.\nGEELY_FS11 HW patches are listed in thiswiki.\nGEELY_FS11 HW patches are listed in thiswiki.\nConnect the ECU to Epiphane video capture tool to ensure that the ECU is providing a\nview.\nConnect the ECU to Epiphane video capture tool to ensure that the ECU is providing a\nview.\nLVDS cables can be straight (one to one) or flipped, make sure you are using the \ncorrect one for your project.\nLVDS cables can be straight (one to one) or flipped, make sure you are using the \ncorrect one for your project.\nOnce you got the \"Pass\" and \"Lock\" leds switched on, you have successfully set up \nthe SVS HW environment for using the Capture / Store feature.\nOnce you got the \"Pass\" and \"Lock\" leds switched on, you have successfully set up \nthe SVS HW environment for using the Capture / Store feature.\nOnce you got the \"Pass\" and \"Lock\" leds switched on, you have successfully set up \nthe SVS HW environment for using the Capture / Store feature.\nTest case implementation\nFirst of all, you need to explore and study all APIs listed in objCamerasDriver in \nyour project`s generated HTML.The HTML of any Castle 5 project can be found in this \ndirectory : Project_Name_Cte\\config\\data\\FUIf you see that any point is vague or \ncannot understand it`s content, please do not hesitate to ask the responsible FW \ndeveloper.You can capture a frame by invoking the following API.\nFirst of all, you need to explore and study all APIs listed in objCamerasDriver in \nyour project`s generated HTML.\nFirst of all, you need to explore and study all APIs listed in objCamerasDriver in \nyour project`s generated HTML.\nThe HTML of any Castle 5 project can be found in this directory : \nProject_Name_Cte\\config\\data\\FU\nThe HTML of any Castle 5 project can be found in this directory : \nProject_Name_Cte\\config\\data\\FU\nIf you see that any point is vague or cannot understand it`s content, please do not \nhesitate to ask the responsible FW developer.\nIf you see that any point is vague or cannot understand it`s content, please do not \nhesitate to ask the responsible FW developer.\nYou can capture a frame by invoking the following API.\nYou can capture a frame by invoking the following API.\nPlace the following instruction in your test case to capture a video frame into \nCAP_FrameBuffer_0 :\nPlace the following instruction in your test case to capture a video frame into \nCAP_FrameBuffer_0 :\nPlace the following instruction in your test case to capture a video frame into \nCAP_FrameBuffer_0 :\nPlace the following instruction in your test case to capture a video frame into \nCAP_FrameBuffer_0 :\nexu.modVD().objCamerasDriver().afcCapture(EnmCaptureFrameBuffer.CAP_FrameBuffer_0);N\note that here in this example, we assumed that the cameras driver is installed in \nthe modVD().Please change modVD() into correct module holding cameras driver in your\nFW project.Castle 5 has 4 capture frame buffers that you can save your frame \nonto.This can boost the performance of the video capture process by 4 x times.As you\ndo not need to flush / store the buffer you have saved the frame into, you can \nsmoothly switch between cap buffers.In this example, we used the first cap frame \nbuffer, but users can arbitrarily choose any suitable buffer to work on.Now, your \nframe is stored in the SD ram of the test bench.You can now transfer the captured \nframe to the PC with the Store API.Please note that you should retrieve the frame \ndata from the same cap frame buffer that you have captured into.Storing the captured\nframe could be done in either Direct or Hil mode as per the validation need.Place \nthe following instructions in your test case to store a frame in Hil mode :\nexu.modVD().objCamerasDriver().afcCapture(EnmCaptureFrameBuffer.CAP_FrameBuffer_0);\nexu.modVD().objCamerasDriver().afcCapture(EnmCaptureFrameBuffer.CAP_FrameBuffer_0);\nNote that here in this example, we assumed that the cameras driver is installed in \nthe modVD().\nNote that here in this example, we assumed that the cameras driver is installed in \nthe modVD().\nPlease change modVD() into correct module holding cameras driver in your FW project.\nPlease change modVD() into correct module holding cameras driver in your FW project.\nCastle 5 has 4 capture frame buffers that you can save your frame onto.\nCastle 5 has 4 capture frame buffers that you can save your frame onto.\nThis can boost the performance of the video capture process by 4 x times.\nThis can boost the performance of the video capture process by 4 x times.\nAs you do not need to flush / store the buffer you have saved the frame into, you \ncan smoothly switch between cap buffers.\nAs you do not need to flush / store the buffer you have saved the frame into, you \ncan smoothly switch between cap buffers.\nIn this example, we used the first cap frame buffer, but users can arbitrarily \nchoose any suitable buffer to work on.\nIn this example, we used the first cap frame buffer, but users can arbitrarily \nchoose any suitable buffer to work on.\nNow, your frame is stored in the SD ram of the test bench.\nNow, your frame is stored in the SD ram of the test bench.\nYou can now transfer the captured frame to the PC with the Store API.\nYou can now transfer the captured frame to the PC with the Store API.\nPlease note that you should retrieve the frame data from the same cap frame buffer \nthat you have captured into.\nPlease note that you should retrieve the frame data from the same cap frame buffer \nthat you have captured into.\nStoring the captured frame could be done in either Direct or Hil mode as per the \nvalidation need.\nStoring the captured frame could be done in either Direct or Hil mode as per the \nvalidation need.\nPlace the following instructions in your test case to store a frame in Hil mode :\nPlace the following instructions in your test case to store a frame in Hil mode :\nItfCamerasDriver.EnmCaptureFrameBuffer b_CapFrameBufferID;\nItfCamerasDriver.EnmCaptureFrameBuffer b_CapFrameBufferID;\nb_CapFrameBufferID  = \nconfig.ItfCamerasDriver.EnmCaptureFrameBuffer.CAP_FrameBuffer_0 ;\nb_CapFrameBufferID  = \nconfig.ItfCamerasDriver.EnmCaptureFrameBuffer.CAP_FrameBuffer_0 ;\nStoreFrameHIL frameStore = new StoreFrameHIL(b_CapFrameBufferID, \"ImageName.bmp\");It\nis better to name the second input argument of the StoreFrameHIL class with the \naction preceding the cap / store processYou can also add the windows directory path \nto the saved name.\nStoreFrameHIL frameStore = new StoreFrameHIL(b_CapFrameBufferID, \"ImageName.bmp\");\nIt is better to name the second input argument of the StoreFrameHIL class with the \naction preceding the cap / store process\nIt is better to name the second input argument of the StoreFrameHIL class with the \naction preceding the cap / store process\nYou can also add the windows directory path to the saved name.\nYou can also add the windows directory path to the saved name.\nexu.exec(frameStore );Place the following instructions in your test case to store \nthe captured frame in the Directmode :\nexu.exec(frameStore );\nPlace the following instructions in your test case to store the captured frame in \nthe Directmode :\nPlace the following instructions in your test case to store the captured frame in \nthe Directmode :\nItfCamerasDriver.EnmCaptureFrameBuffer b_CapFrameBufferID;\nItfCamerasDriver.EnmCaptureFrameBuffer b_CapFrameBufferID;\nb_CapFrameBufferID  = \nconfig.ItfCamerasDriver.EnmCaptureFrameBuffer.CAP_FrameBuffer_0 ;\nb_CapFrameBufferID  = \nconfig.ItfCamerasDriver.EnmCaptureFrameBuffer.CAP_FrameBuffer_0 ;\nStoreFrameHIL frameStore = new StoreFrame(b_CapFrameBufferID, \"ImageName.bmp\");\nStoreFrameHIL frameStore = new StoreFrame(b_CapFrameBufferID, \"ImageName.bmp\");\nexu.exec(frameStore );It is better to name the second input argument of the \nStoreFrame class with the action preceding the cap / store processYou can also add \nthe windows directory path to the saved name.Once you have executed the StoreFrame \ntest case (in either Direct or HIL modes), you will see a lot of consecutive \"make \nmessages\" printed in CTE.You can validate the retrieved data in \"Make messages\" by \nobserving the content of the message.If the message content is all zeros, then there\nmust have been an issue in the capture / store process.Root causes of the issue \ncould be one of the following :You stored data from a different frame buffer other \nthan the one you captured into.The \"Lock\" status between ECU video stream and the \nPIP is lost, please revise the connections.\nexu.exec(frameStore );\nIt is better to name the second input argument of the StoreFrame class with the \naction preceding the cap / store process\nIt is better to name the second input argument of the StoreFrame class with the \naction preceding the cap / store process\nYou can also add the windows directory path to the saved name.\nYou can also add the windows directory path to the saved name.\nOnce you have executed the StoreFrame test case (in either Direct or HIL modes), you\nwill see a lot of consecutive \"make messages\" printed in CTE.\nOnce you have executed the StoreFrame test case (in either Direct or HIL modes), you\nwill see a lot of consecutive \"make messages\" printed in CTE.\nYou can validate the retrieved data in \"Make messages\" by observing the content of \nthe message.\nYou can validate the retrieved data in \"Make messages\" by observing the content of \nthe message.\nIf the message content is all zeros, then there must have been an issue in the \ncapture / store process.\nIf the message content is all zeros, then there must have been an issue in the \ncapture / store process.\nRoot causes of the issue could be one of the following :\nRoot causes of the issue could be one of the following :\nYou stored data from a different frame buffer other than the one you captured into.\nYou stored data from a different frame buffer other than the one you captured into.\nThe \"Lock\" status between ECU video stream and the PIP is lost, please revise the \nconnections.\nThe \"Lock\" status between ECU video stream and the PIP is lost, please revise the \nconnections.", "type": "Document"}}