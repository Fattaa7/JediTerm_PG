{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_networking-can_best-practices_canerrorssimulationincastle.txt"}, "page_content": "CAN Errors Simulation in Castle\nPost date: Feb 16, 2020 6:15:30 PM\nActive error flag violates The active error flag consists of six consecutive \ndominant bits and violates the rule of bit stuffing.\nThe Error Handling is an implemented mechanism inside each CAN controller.The first \nCAN bus node that detects any corrupted message (that violates the CAN standard) \nsends an error frame on the bus. The error frame terminates sending corrupted \nmessages, warns all the receivers (If they haven\u2019t detected it yet) and informs the \ntransmitter node to retransmit the corrupted messages.\nThe error frame is composed of 2 parts as illustrated in the following figure:\nError Flag: 6 consecutive dominant bits \u20180\u2019sError Delimiter: 8 consecutive recessive\nbits \u20181\u2019s\nError Flag: 6 consecutive dominant bits \u20180\u2019s\nError Flag: 6 consecutive dominant bits \u20180\u2019s\nError Delimiter: 8 consecutive recessive bits \u20181\u2019s\nError Delimiter: 8 consecutive recessive bits \u20181\u2019s\nAs shown later: The error flag itself may be interpreted by some nodes on the bus as\nstuff error condition the error frame may be changed.\nThe illustrated Error frame is followed by \u201c111\u201d (interframe space) to separate \nbetween the error frame and the retransmitted message (Like what happened between \nnormal messages).\nCAN Error Types:\nBased on the following CAN frame structure there are 5 main error types\nCRC Error:\nThis error is generated when a receiver node finds a mismatch between its calculated\nCRC (For a received frame) and the received CRC.\nForm Error:\nThis error is generated If there is any violation in the value of the CAN frame \ndelimiters shown in the previous figure(CRC Delimiter, ACK Delimiter, End of Frame, \nand IFS).\nBit Monitoring Error:\nEach Can controller at the transmission state read back what is sent on the bus. \nThis error is generated if the transmitter finds a different value from what it \ntries to send. This error cannot be raised at the arbitration phase.\nStuffing Error:\nIf there is a need to transmit 5 consecutive bits of the same value, they should be \nfollowed by a stuff bit of an opposite value as a kind of protection against \nexcessive DC components on the bus. If any receiver finds a violation of the stuff \nbit rule it generates a stuff error. As the error flag itself can be recognized as a\nstuff error it\u2019s length can reach 12 consecutive 0s.\nAck Error:\nAt the acknowledge bit part of the CAN frame the transmitter sends recessive 1, any \nnode that receives the frame correctly should send a dominant 0 as an ack. If there \nis no detected ack by the transmitter, it will raise an ACK error.\nCastle CAN error Injection APIs:\nDisableNextRxMessageAck, this API (inside the can driver) forces Castle to stop \nsending the ACK bit for the next received frame only then Castle works normally \nagain. In BIP v9 it will toggle the flag of sending ACK in can_bsp.v if the \nrx_stop_ack signal is activated by the mentioned API as illustrated in the following\ncode.\nEach tx frame object (from Castle) includesSetErrorsAPI,  this API injects a tx \nerror for one time to avoid leading the ECU to a buss off state. Based on the passed\ntype different errors can be injected:\nTxStuffErr:\nThis argument toggles the calculated stuff error in can_bsp.v based on the raised \nflag tx_stuff_err as illustrated in the following code.\nTxFormErr:\nThis argument toggles the end of frame bits from 1 to 0 based on the corresponding \nargument flag tx_form_err as illustrated in the following code of can_bsp.v.\nTx CRC Err:\nThis argument toggles the calculated CRC value  based on the corresponding argument \nflag tx_form_err as illustrated in the following code of can_bsp.v.\nThe following shot illustrates canoe detection for Castle injected errors:", "type": "Document"}}