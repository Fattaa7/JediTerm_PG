{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_git_dealinginthemostsimplestwaywithgitincastleuserprojectsusecases.txt"}, "page_content": "Dealing in the most simplest way with git in Castle User projects (use cases)\nPost date: Jul 9, 2018 5:26:27 AM\nThe recommondations below shall be applicable for projects with:\n- no lfs usage\n- no sub projects\nFor the beginning I recommend to deal with git basd on defined usecases:\nUsecase1: If u need to do a change:\n1) Before opening a new change (doing a commit and push with a new change ID)  \nmaking sure u fetch from the upstream andreset your local stuff to the origin master\n(the local master should be checked out (black checkbox icon))\n2) Then do the change  and acommit and push with a new change ID\n3) If you are requested to submit a patch for a change that u did (requested by \nreviewer that was reviewing ur change in gerrit) then do agit commit ammend and a \npush\n4) As soon as you got a + 2 and verified rating in Gerrit then do a submit and start\nagain with point 1)\nUsecase2: If you are requested to review (and test) the change of someone else:\n1)Fetch the change u are requested to test(\"fetch from gerrit\"). The eclipse plugin \ndoes by default then not only a \"git fetch\" but also it creates a local branch for u\nand checks it out (black checkbox icon)\n2) Thentest the change- if there are problems with it then write a review in \nteamforge and give a negative rating and ask originator of the change to submit a \npatchset to his/ her change\n3)Checkout the local master again and delete the local branchwith the change (to \nhave less confusion)", "type": "Document"}}