{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_vector_canoe_genericethernetcaplcode.txt"}, "page_content": "Generic Ethernet CAPL Code\nPost date: Jan 17, 2018 10:44:40 AM\n// this code opens a socket to receive and send UDP pdus without needing to include \nthe .arxml file as a database.\n// it is good practice to use the Canoe help to search for the CAPL fuctions to know\nthe function's parameters and return value.\n// This code need special Canoe configuration which will be declared in another \npostHere.\nincludes\n{\n}\nvariables\n{\ndword socketHandle;\nCHAR rxBuffer[1472]; // The buffer in which the received pdus are stored. Make it \nlarge as possible to store the payload and its ethernet headers.\nchar CASTLE_DIAG_RS_ADDRESS[16] =\"169.254.17.72\"; // The IP address of the server \n(sender)\nlong socketPort = 10000; // Port number of the server\nlong flag; // flag for the sake of debugging\nCHAR errorText[200]; // string to store the error message for the sake of debugging\n}\nOn start // The variables and functions that are called in the program start\n{\nsocketHandle = UdpOpen(0, socketPort);  // Openning a soket to receive pdus\nflag = UdpReceiveFrom(socketHandle, rxBuffer, elCount(rxBuffer)); // Receive the \npdus at the opened socket and store it in the buffer. This function calls the \ncallback                                                                            \n                                          // function \"OnUdpReceiveFrom\" which is \nimplemented below\nwrite(\"flag value is %d\",flag); // Appear in the write window of canoe. Good for \ndebugging\nif(flag == -1){\nwrite(\"socket error is %s and the error number is \n%d\",IpGetLastSocketErrorAsString(socketHandle, errorText, elcount(errorText)), \nIpGetLastSocketError(socketHandle));\n}\nelse if(flag == 0){\nwrite(\"*****************************************************************************\n****\");\n}\n}\nOnUdpReceiveFrom(dword socket, long result, dword address, dword port, char \nbuffer[], dword size) // callback function\n{\nbyte payload[16]; // payload is 16 bytes, 4 for the pdu id, 4 for the pdu length and\n8 for data.\nwrite(\"#####callback#############\"); // Some prints for debugging\nif (result == 0){\nwrite(\"receiving is successfull\");\nwrite(\"Ip address of current successful operation %x\", SwapDWord(address));\nwrite(\"data received in buffer %x\\r %x\\r %x\\r %x\\r %x\\r %x\\r %x\\r %x\\r %x\\r %x\\r \n%x\\r %x\\r %x\\r %x\\r %x\\r %x\\r\", (byte)buffer[0], (byte)buffer[1], (byte)buffer[2],  \n                  (byte)buffer[3], (byte)buffer[4], (byte)buffer[5], \n(byte)buffer[6], (byte)buffer[7], (byte)buffer[8], (byte)buffer[9], \n(byte)buffer[10], (byte)buffer[11], (byte)buffer[12],                     \n(byte)buffer[13], (byte)buffer[14], (byte)buffer[15] );\nwrite(\"port number of current successful operation %ld\", port);\nwrite(\"number of bytes received of current successful operation %ld\", size);\n}\nelse{\nwrite(\"Ip address of current unsuccessful operation %ld\", SwapDWord(address));\n}\nif (\n((byte)buffer[0] == 0xFE) && // received pdu id\n((byte)buffer[1] == 0x80) &&\n((byte)buffer[2] == 0xA1) &&\n((byte)buffer[3] == 0x6F)\n)\n{\nwrite(\"pdu received\");\npayload[0] = 0xFE; // sent pdu id\npayload[1] = 0x80;\npayload[2] = 0x21;\npayload[3] = 0x6F;\npayload[4] = 0x00; // sent pdu length\npayload[5] = 0x00;\npayload[6] = 0x00;\npayload[7] = 0x08;\npayload[8] = buffer[8]; //sent pdu data\npayload[9] = buffer[9];\npayload[10] = buffer[10];\npayload[11] = buffer[11];\npayload[12] = buffer[12];\npayload[13] = buffer[13];\npayload[14] = buffer[14];\npayload[15] = buffer[15];\nUdpSendTo(socketHandle, IpGetAddressAsNumber(CASTLE_DIAG_RS_ADDRESS), socketPort, \npayload, 16); //echo the received payload data to anther pdu to                     \n                                                                                    \n                                                                                    \n    // castle\nwrite(\"another pdu sent\");\n}\n// Some prints for debugging\nflag = UdpReceiveFrom(socketHandle, rxBuffer, elCount(rxBuffer));\nwrite(\"**call back**flag value is %d\",flag);\nif(flag == -1){\nwrite(\"**call back**socket error is %s and the error number is \n%d\",IpGetLastSocketErrorAsString(socketHandle, errorText, elcount(errorText)),      \n                                          IpGetLastSocketError(socketHandle));\n}\nelse if(flag == 0){\nwrite(\"*****************************************************************************\n****\");\n}\n}", "type": "Document"}}