{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_wireshark_wiresharkdissector.txt"}, "page_content": "Wireshark Dissector\nPost date: Feb 24, 2021 9:10:12 AM\nWireshark Dissector is a useful feature to interpret any specific protocol fields \n(at any layer of TCP/IP stack) in an easy way. Wireshark Dissector can be \nimplemented using Lua. Lua is alightweight,high-level,multi-paradigm programming \nlanguagethat can be used as simple scripting language.\nFor example Wireshark can interpret the UDP fields by default and if we are using a \nstandard protocol above UDP (like DOIP) it will be interpreted too:\nBut if we are using a specific protocol at any TCP/IP layer, Wireshark will just \npreview the raw payload without any useful declaration for its  specific fields \n(which will make it very hard to debug in it)\nA common use case in CASTLE is the PC-Com protocol above the different connections \nbetween CTE and CASTLE which cannot be interpreted automatically.\nWe used to interpret it  manually (while debugging), while we can use Wireshark \nDissector to bypass this complication like the following example in HONDA-AS \nproject.\nIn HONDA-AS project the fused data from the vehicle different sensors are sent over \nTCP in a specific protocol called Cood (The same IDE of CASTLE PC-Com), The attached\nLua script is implemented to interpret the attached specific protocol fields as \nfollowing.\nTo implement your own Lua script:\nRefer to the sample scriptherePaste the Lua script in the following path: \n%appdata%\\wireshark\\pluginsRestart wiresharkIn wireshark, go to Help / About \nWireshark / Plugins (tab). You shall find your scriptAfter that wireshark shall \nautomatically decode your specific protocol fields.\nRefer to the sample scripthere\nRefer to the sample scripthere\nPaste the Lua script in the following path: %appdata%\\wireshark\\plugins\nPaste the Lua script in the following path: %appdata%\\wireshark\\plugins\nRestart wireshark\nRestart wireshark\nIn wireshark, go to Help / About Wireshark / Plugins (tab). You shall find your \nscript\nIn wireshark, go to Help / About Wireshark / Plugins (tab). You shall find your \nscript\nAfter that wireshark shall automatically decode your specific protocol fields.\nAfter that wireshark shall automatically decode your specific protocol fields.\nNone Castle  User Guide  -- r2023.2            Access  Restricted  \n \nCastle  User Guide   \nWelcome to Castle! You are invited to check the Common Castle \nApplications slides. This user guide provides a quick start guide and \ncan be used to reach an intermediate user level.  \n \nIf your project already uses Castle, you can reach the dedicated \nsupport engineer. Otherwise, please contact . Islam ELSHARKAWY\nIt\u2019s also useful to know the worldwide Castle team and management \norganization. \nPre-requisites \nCoreALM \nValeo has selected a standard tool-set for all configuration management, ticketing, reviewing \nand file releases. To gain CoreALM Access to Castle project, you need to: \n1. Sign-in in CoreALM to activate your account \n2. Request to join Castle Project: \n1. Search for \"Castle\" in CoreALM projects \n2. Select \"Castle\" then select \"Request Membership\" \nGit \nGit is a distributed version control system. It\u2019s used to deliver and track changes for all \nCastle projects. You need it to ensure all team members work in the same environment, and \ncan easily share their test libraries and scripts. \nInstall  \nPlease follow these easy steps for Windows OS (may require admin): \n1. Download and install the latest version of https://git-scm.com (support LFS too) \nSimilarly on Linux OS, please install git and git-lfs packages. Names may differ according to \nyour linux distribution. \nConfigure  \nIt\u2019s mandatory to let Git know your identity. Please run the following command in your CMD: \n \ngit config --global user.email \"your.name@valeo.com\" \ngit config --global user.name \"Your NAME\" \nMake sure to replace the quoted content with your Valeo identity. \nPasswordless  Commands  (Optional)  \nIt\u2019s more productive to work without a password, yet secured. This is done by having your \nSSH keys copied to CoreALM. All git/git-lfs commands to the CoreALM will still be secured, \nbut the CoreALM server will not ask about your password. Please follow the steps. \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \nLearn  Git \nTo get started with Git, please go thoroughly through the slides. This will teach you the \nbasics and the common commands you will need on a daily basis. Afterwards you will need \nto learn Gerrit, our collaborative code review tool.  \n \nAdvanced Git branching may be needed in some cases. The bottom line here is to make \nsure you are able to work within those two common use cases. \nGradle Configuration \nWith CoreALM and Git ready, it is time to configure Gradle to be able to automatically fetch \nall needed tools and libraries. \nInstall Hardware Driver \nYou need to connect CASTLE with an ethernet port into your machine. You can connect \nCASTLE using the standard Ethernet port in your machine or using the USB port using the \nD-Link Ethernet Adapter. \n \nD-Link driver can be found here \n \n \nNetwork Configuration \nTo connect your PC/laptop with a Castle box through a network interface, the IP should be \nmanually set to 1 9 2 . 1 6 8 . 1 4 4 . 1. If you do not have access to change this configuration, \nplease refer to your local IS for support. Moreover, Valeo IS has introduced a security policy \nfor McAfee firewall to allow Castle. If connection problems are reported, make sure that \npolicy is enabled. \nJava Knowledge \nRefresh your Java knowledge with those Quick slides for Java. You may also want to try \nJava OOP concepts yourself! You can use latest eclipse IDE \nGetting Your Castle Project \nEither you are doing SW Validation, System Validation, PV, DV, or EoL testing, there should \nbe a Castle project for your activity. The project contains the test environment, toolchain, test \nlibraries and scripts. \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \nRequesting a new Project \nTo start with Castle, you need to communicate with  to check your Islam ELSHARKAWY\nrequirements, and supports the next 2 steps \n1. Hardware Purchase and delivery Process: Owner  Ulrich SCHNEIDER\n2. Firmware Development and Configuration Process: Owner  Islam ELSHARKAWY\nCloning an existing project \nIf your colleagues are already working with Castle, you can simply clone it from CoreALM \nand join the pace. With your git configured, the following steps are easy to follow. \n \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n \nConnecting Castle Testbench \n \n \n \nLet\u2019s list the common part names, let\u2019s speak the same language! \n\u25cf Castle Rack: Castle Box that hosts 1 or more modules \n\u25cf PIM: Product Interface Module. \n\u25cf PIP: Product Interface PCB. A product-specific electronic board within the PIM \n\u25cf BIP: Bus Interface PCB. A common electric board that provide COM to the PIM \n\u25cf DUT: Device Under Test. Probably the ECU, sometimes another product (sensor, \ndisplay). A DUT is typically connected to 1 or more PIMs. Multiple DUTs may be \ntested in parallel too. \nThis section covers the common hardware connections only. Alternatively, please can go \nthrough the complete Hardware Installation guide. \nPower Connections \nEvery Castle rack has a fixed internal power supply. It is used to power up the test bench. \nAccording to the number of installed PIMs and the DUT power requirements,  the internal \npower supply may be used to power the DUT too. Another option, specially for power-hungry \nDUTs, is to use an external power supply. Castle is able to control a PPS using RS232 or \nEthernet. \n \nEither manually or automatically controlled, the \nexternal power supply should be connected to \nthe Castle rack back connector. This \nconfiguration enables power monitoring and \ncontrol. Voltage and current levels can be \nlogged and tested. Moreover, Klemma lines are \ncontrolled and faults may be injected. It is not \nrecommended to directly connect the external \npower supply to the DUT. At least Klemma \ncontrol is needed through Castle. \n \nPower Pins that are output from Castle\u2019s internal power supply: \n\u25cf +5v o \n\u25cf +12v    o \n\u25cf -12v o \n\u25cf GND o \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n \nPower Pins that are input to Castle for power monitoring and control. Those inputs may be \nsourced either from an external power supply or a direct connection from the above output \npower pins: \n\u25cf V_EXT31  o:  Connect to GND \n\u25cf V_EXT15  o:  Klemme-15 \n\u25cf V_EXT30  o:  Klemme-30 \n \nNote: Klemma 15 and 30 may be sourced from the same power supply channel.  \nNote: To use Castle internal power supply, you have to manually connect the output to the \ninput power pin using a banana connector.  This can be from +5v or +12v connectors \naccording to the DUT power requirement. \nNote: Use the RS232-0 Connector to connect the external programmable power supply. \nBase Connector Pinout \nThe DUT Base connector is a 44-pin Female D-Sub connector. It contains the following \nfeatures: \n \n\u25cf CAN-FD x2 \n\u25cf CAN (Single Wire) \n\u25cf LIN \n\u25cf Flexray (Channels A, B) \u25cf KL 15, 30, 31 \n\u25cf ADC x2 \n\u25cf DAC x2 \n\u25cf Digital Input (DI) x2 \n\u25cf Digital Output (DO) x2 \n \nThis is a detailed pinout for the Base DUT connector. \nDUT/PIP Interface \nAccording to the DUT, a PIP is selected to cover all its test requirements. Because the PIP is \nproduct-dependent, there cannot be a unified pinout. Please refer to the PIP list to find the \npinout for your match. \nCastle Toolchain (CRE/CTE) \nCastle Toolchain is divided into 2 main components:  \n\u25cf CRE: Castle Runtime engine (SW core handling logic for castle HW communication) \n\u25cf CTE: Castle Test Environment UI (User interface for running APIs, tests ..) => it \ncommunicates with CRE via gRPC \nOther external tools (other than CTE) can communicate with CRE via MQTT. Please refer to \nthis link for toolchain guide  \nFolder Structure \nThe castle project contains the following \n\u25cf config/* \u21d2 Base Firmware \n\u25cf config.appl/* \u21d2 Application Firmware  \n\u25cf tools/* \u21d2 (External tools: java, gcc, ...) \n\u25cf exported.castle.*(cre, testenv, view ..) \u21d2 Exported Castle Toolchain \n\u25cf prj/src/**/*.java \u21d2 Java Libraries Sources \n\u25cf bin/** \u21d2 Java Libraries Compiled Binaries \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n\u25cf .classpath \u21d2 Java Classpath (includes paths to other .jar libraries) \n\u25cf build.gradle, gradlew.bat \u21d2 Gradle Build Files \n\u25cf .cteproject (xml indicating it\u2019s a Castle project) \n\u25cf *.cmd launchers \n\u25cb Exu Launcher (launches CTE while provides \nexu type and other params) \n\u25a0 PRJ_NAME_ARCH_ExuType.cmd \n(e.g. UPA_RIVIAN_64B_EE.cmd) \n\u25cb Sysgen Launcher (Run Sysgen to \nre-generate config.appl binaries) \n\u25a0 PRJ_NAME_ARCH_Sysgen.cmd \n\u25cb Application Configurator Launcher (UI to \nconfigure config.appl/ ) \n\u25a0 PRJ_NAME_ARCH \nApplication_Configurator.cmd \n \n \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \nLaunching CTE \nRun Exu launcher PRJ_NAME_ARCH_ExuType.cmd as per desired exu type e.g. \nUPA_RIVIAN_64B_EE.cmd \n \n \n \n \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \nCTE API Tree \nThe CTE tree provides all firmware APIs, input parameters are entered in the panel below. \nUsers can double-click the selected API or click Send. The CTE log and progress bar then \nshow the firmware response. \n \n \nCTE Configurator \nThe configurator allows users to dynamically configure their projects \n \nThe main features are: \n\u25cf DBC / FIBEX / ARXML / LDF Update for CAN, LIN, Flexray, Ethernet, and SPI \n\u25cf Add Exus + Modules + Select Hw Image \n\u25cf Modify/Add API Tree Objects \n\u25cf Add Checksum / Alive Counter Signals \n\u25cf Modify/Add Diag Messages for CAN / Ethernet / Flexray / LIN \n\u25cf Add Security Algorithm for Diag \n\nJa v a\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nTest Case Examples (Basic Operation) \nCAN \nA Controller  Area  Network  (CAN  bus) is a robust  vehicle  bus standard  designed  to allow  \nmicrocontrollers  and devices  to communicate  with each  other's  applications,  and it's both types  \nare supported  by CASTLE  (Normal _CAN  and CAN_FD)  \n \n \n- For the differences  between  CAN  and CAN_FD  , please  refer to this link (Only  first two \nsections)  \n \n- How to init CAN  bus From  CASTLE  ? \n \nexu.modMM().objCanDriverCan_0().afcInit(ItfCanDriver.EnmMode.N\nORMAL); //normal mode is used when other nodes are active \n \nOr \n \nexu.modMM().objCanDriverCan_0().afcInit(ItfCanDriver.EnmMode.S\nELF_ACK); //SELF_ACK mode means an acknowledge from other \nnodes is not needed \n \n- How to set the controller  mode  ? Either  CAN  (NonIsoCanFD)   or CAN_FD  (IsoCanFD)  \n \nexu.modMM().objCanDriverCan_0().afcSetCanControllerMode(I\ntfCanDriver.EnmCanControllerMode.NonIsoCanFd); //Normal \nCAN \n \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nexu.modMM().objCanDriverCan_0().afcSetCanControllerMode(I\ntfCanDriver.EnmCanControllerMode.IsoCanFd); //CAN_FD \n \n- How to set the speed  if the CAN  (NonIsoCanFD)  controller  is activated  \n \n \nexu.modMM().objCanDriverCan_0().afcSetCanSpeed(ItfCanDriver.En\nmCAN_bitRate.BITRATE_500_KBPS); \n \n \n- How to set the speed  if the CAN  (IsoCanFD)  controller  is activated  (we have  2 different  \nRates  here \u201cBItRate\u201d  and \u201cDataRate\u201d  ) \u201cYou can find theses  speed  in the requirement  of \nthe working  project  \n \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \n \n \n \nexu.modMM().objCanDriverCan_0().afcSetCanFdSpeed( \n  ItfCanDriver.EnmCAN_bitRate.BITRATE_33_KBPS, \n  ItfCanDriver.EnmCAN_dataRate.DATARATE_500_KBPS); \n \n- How to send  Frames  after integrating  the DBC/AXML  as mentioned  in this guide  ? \n\nJa v a\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \n \n \nexu.modMM().objComCAN().objFrames().objCONFIG_DWA_CKM().a\nfcSendOnce(); \n \n \n \nexu.modMM().objComCAN().objFrames().objCONFIG_DWA_CKM().afcSen\ndPerTimer(100); \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n//You can send the frame once (SendOnce) or SendPerTimer \n(periodically with \u201cDelay\u201d value separation, for example in \nthis case this frame will be sent on the bus each 100ms) \nEthernet \nAutomotive Ethernet is a form of Ethernet network with a physical layer adapted to \nautomotive use cases. The network description can be found in autosar file (*.arxml) \n \nThe network mainly consists of Pdus and each Pdu consists of multiple signals. \nAlso, It\u2019s common to have service based communication. Where Castle can simulate the \nservice server or service client. \n \n \n- How to send  Frames  after integrating  the ARXML  ? \n \n \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nexu.modETH().objComEthernet().objPdus().objPduADAS_POSITION_ST\n3().afcSendOnce(); \n- How to subscribe  to a service  as a client  ? \nFirst,  You need  to send  \u201cFind  Service\u201d  to the server  \n \n \nThen, You need to send \u201cSubscribe to Event Group\u201d within the service \n \nAs you see above, you can find the related Pdus in each event group for easy access. \n \n \n- How to send  Offer Service  as a server  ? \n \n \n- How to control  the ethernet  connection  ? \nYou can find objEthernetDeviceDut0  which  controls  the communication  with the DUT. \n \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \n \n \nYou can make  failures  with the following  command.  \nexu.modETH().objEthernetDeviceDut0().afcSetFailure(ItfEthernet\nDevice.EnmFailureType.OpenCircuitFailure); \nexu.modETH().objEthernetDeviceDut0().afcSetLinkStatus(ItfEther\nnetDevice.EnmLinkStatus.Down);  \n \nAlso,  we have  already  defined  4 network  interfaces.  \n \nYou can configure  the network  interface  as follows  \n \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nexu.modETH().objEthernetDeviceDut0().objEthernetNetworkInterfa\nce(0).afcConfigure(new String[] { \"AA BB CC DD EE FF\" } , \nfalse, 0, false, new int[] { 10, 0, 0, 1 } , new int[] { 255, \n255, 0, 0 } ); \n \n \n- How to send/receive  data to/from  udp/tcp  socket  ? \n \nFirst,  You need  to create  a socket.   \nYou have  2 interfaces,  EthernetSocket  which  can support  UDP  which  can find below .  \n \n \n \n \nYou can configure  the socket  as follows:  \n\nJa v a\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \n \nexu.modETH().objUdpSocket().afcBind(false, 0, false, \nItfEthernetSocket.EnmTpType.Udp, new int[] { 10, 0, 0, 1 } , \n4444); \nexu.modETH().objUdpSocket().afcConnect(new int[] { 10, 0, 0, 2 \n} , 5555); \nexu.modETH().objUdpSocket().objTransmitData().afcSet(new \njava.math.BigDecimal(\"11 22 33\")); \nexu.modETH().objUdpSocket().afcSendOnce(); \n \nAlso, We have EthernetServerSocket which can support Tcp Server \n \n \nexu.modETH().objTcpSocket().afcBind(false, 0, false, new int[] \n{ 10, 0, 0, 1 } , 255, 255, 0, 0); \n \nWe have 4 locations to clients to be connected to our server \n \n \n\nJa v a\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nOnce the client connects to our server, it will be allocated in the first empty slot then you can \ncommunicate with this client. \n \nexu.modETH().objTcpSocket().objEthernetServerSocketConnection(\n0).afcSendOnce(); \n \nFlexray \n//TBD \nDiag \n- Please refer to the link for the diagnostics induction, and for the CASTLE firmware \nused functions, you can find it at the last section of the mentioned link. \nHP/HPFL/HPFL shrink Sensors \nHP sensors family is the next Valeo sensor family after AK sensors.  \n\u25cf Each sensor is connected to the ECU through a separate LIN bus, where ECU is the \nmaster, and Castle is the slave. \n\u25cf LIN bus is a 3 wire bus: Vcc, Gnd and Signal line. \n\u25cf BIPs supporting HP family sensor simulation are 3.6, 3.7, 3.8. \n \nHere are examples for most used APIs: \n \n//ConfigureTypeAllSensors  \n// NOTE: Reset ECU/Sensor power is mandatory to make effect. \nexu.modTS().objHpGeneric().afcConfigureTypeAllSensors(Enme_sen\nsor_type.xxx) \n//EchoMM \nexu.modTS().objHpGeneric().afcEchoMM(ItfHpSensors.Enme_sensor.\nxxx, Dist, Dist, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, \n0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, \n0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); \n//SetMagnitude \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \nexu.modTS().objHpGeneric().afcSetMagnitude(ItfBaseSensors.Enme\n_sensor.xxx, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); \n//SetConfidenceLevelAllSensors \nexu.modTS().objHpGeneric().afcSetConfidenceLevelAllSensors(val\nue,Enme_mode.UserInput); \n//SWError \nexu.modTS().objHpGeneric().afcSWError(ItfBaseSensors.Enme_sens\nor.xxx, config.ItfHpGeneric.Enme_type.yyy); \n \nUSV Sensors \nLatest version of Ultrasonic Sensors. Where the ECU is usually connected to 12 and up to \n24 sensors over a DSI3xc (Extended Class) bus. There are three types of connections: \n \n\u25cf Point-To-Point (P2P) topology:  \nrequires that each sensor is connected to a separate channel of the DSI master. \nSuch a connection allows all sensors to be clearly identified in terms of the position \nthey are mounted in the car. \n \n \n \n\u25cf Parallel Bus (BUS) topology:  \nallows to connect multiple sensors to a single channel of a DSI master thus reducing \nthe total cable lengths. Unlike in P2P the BUS topology requires the attached \nsensors to be preprogrammed with addresses (code numbers) reflecting their mount \npositions in the car. \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \n \n \n \n\u25cf Daisy-Chain (CHAIN) topology: \n allows to connect multiple sensors to a single channel of a DSI master (similar like \nBUS) but due to the specific way of wiring the sensors are chained one after another \nalong the cable. This allows for identifying the mount position of each sensor \nautomatically using some additional logic and protocol at both master and sensor \nsides. \n \n \n \nSupported PIP is USV PIP Slave 5.2. You can check connections in the link \n \nHere are examples for most used APIs: \n \n//Select_TapeOut: To select sensor TapeOut version \nexu.modTS().objUSV10().afcSelect_TapeOut(Enme_tape_out.xxx); \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \n//SendSignalWay: To simulate sensors Echos \nexu.modTS().objUSV10().afcSendSignalWay(Enme_signalway.xxx, \n500, 80, 0, 0, 0, 0, 0, 0, 0, 0); \n//SetSensorSwError: To simulate sensor SW errors \nexu.modTS().objUSV10_Switches().afcSetSensorHwError(Enme_senso\nr_usv.xxx, Enme_hw_error.yyy); \n//SetSafetyFlagsError: To set/clear sensor safety flags for \nerrors simulation \nexu.modTS().objUSV10().afcSetSafetyFlagsError(Enme_sensor_usv.\nxxx, Enme_safety_flags_error.yyy); \n//WriteCfgMemIdx: To write in sensor configuration memory \nexu.modTS().objUSV10().afcWriteCfgMemIdx(Enme_sensor_usv.xxx, \nItfUSV10.Enme_cfgMem_page.yyy, 6, 37044); \n \nVideo Stream Camera \nCastle 5 is capable of simulating 5 cameras (maximum) to the vision ECU. Simulation \ncovers: \n\u25cf Power supply lines \n\u25cf Backchannel communication \n\u25cf Video stream replay \n \nCameras power supply operation is achieved by KL15 & KL30 CTE objects: \n// clamp 0 -> Activate simulated cameras connected to KL15 \nexu.modMM().objClamp(0).objState().afcSet(true); \n \n// clamp 1 -> Activate simulated cameras connected to KL30 \nexu.modMM().objClamp(1).objState().afcSet(true); \n \nBackchannel communication supports famous serial communication buses; I2C / SPI / \nUART. Several video formats are included in the video stream replay feature: \n\u25cf RAW \n\u25cf RGB \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \n\u25cf YCrCb \n\u25cf Analog (NTSC / PAL) \n\u25cf Progressive / Interlaced  \nThe physical link may be GMSL & FPD serial link inputs with up to 3.12 Gbps bandwidth. \nCastle 5 shows stable performance operating at high resolutions, such as 1920x720 and \nframe rate of 30 FPS. Video stream APIs are included in the CamerasDriver CTE interface \n \nThe following test case example demonstrates the best practice in simulating a video \nplayback to the ECU: \n \n \n//First we need to simulate the Camera start and visibility   \nexu.modVD().objCamerasDriver().afcSetCameraStarted(EnmCameraSt\nream.CAM_0, true); \nexu().pause(10); \nexu.modVD().objCamerasDriver().afcSetCameraVisible(EnmCameraSt\nream.CAM_0, true); \n//Then, we need to Load a frame to the Simulated Camera (slow) \nLoadFrame loadFrame_01 = new \nLoadFrame(EnmCameraFrameBuffer.CAM_FrameBuffer_0, cam_01.bmp); \nexu.exec(loadFrame_01); \n \nNote that cam_01.bmp is a static frame stored on PC at project's home directory (e.g. \n3_Projects\\proj1150_c5prjusr_ccc_renault_ivc_2\\cam_01.bmp). A user can set a custom \nWindows URL in this step. Each simulated camera has a set of four connected buffers to \nswitch between in runtime, resulting in 16 cam frame buffers dedicated to simulated video \nstreams: \n\u25cf EnmCameraFrameBuffer.CAM_FrameBuffer_0 to \nEnmCameraFrameBuffer.CAM_FrameBuffer_15 \nThis wiki contains extra best practices for setting up the camera test setup and creating a \nstream test. \n\nJa v a\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nVideo Capture \n \nCastle 5 is capable of capturing video streams from 2 automotive cameras (maximum). \nOperations on the camera video stream include: \n \n\u25cf Capture single Frame : Capture static frame from input ECU video to Castle`s \nSD-ram (over LVDS interface). \n \n\u25cf Store Frame : Retrieve captured static frame from Castle 5`s SD-ram to PC (over \nEthernet interface). \n \n\u25cf Apply Camera Faults : with the support of a HW Fault box and plugging fault cards \ninto the video path. \n\u25cf Image compare : compare the captured video frame to a reference image on PC \n \nThe following instruction example demonstrates the method for capturing a single frame \nfrom connected camera to \"CAP_FrameBuffer_0\" : \n \nexu.modVD().objCamerasDriver().afcCapture(EnmCaptureFrameBuffe\nr.CAP_FrameBuffer_0); \n \nIn order to retrieve the captured image from the native test bench buffer \n\"CAP_FrameBuffer_0\" to PC, please follow the following simple test case example: \n \nItfCamerasDriver.EnmCaptureFrameBuffer \nb_CapFrameBufferID; \n \nb_CapFrameBufferID  = \nconfig.ItfCamerasDriver.EnmCaptureFrameBuffer.CAP_FrameBu\nffer_0 ; \n \nStoreFrameHIL frameStore = new \n  StoreFrameHIL(b_CapFrameBufferID, \"ImageName.bmp\"); \n \nexu.exec(frameStore ); \nImage  Compare  \nImage compare operations are performed on the PC side, and hence can only run in Direct \nExecution Mode. Such a feature allows for saving time and effort in comparing images \n\nNone\nNone\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nmanually.The feature is implemented using a Python script that analyzes the similarity \nbetween features of interest in both input images and produces the similarity percentage as \na result. The script has gained recognition for its efficiency in detecting overlays, which has \nled to its adoption in various renowned use cases including CI integration. The script is \nincluded in the cameras projects test libs located at: \n \nprj\\src\\prj\\lib\\Pattern_and_Color_Detection.py \nThe script is compiled into a Windows executable to ease the test case integration: \nprj\\src\\prj\\lib\\\\Pattern_and_Color_Detection.exe \nThe following test case example demonstrates the method for comparing the captured \nimage to a reference one: \n \npublic void dbFucntionCompareStoredtoReference(String d1, \nString d2, int d3) \n { \n  String capImageUrl = d1; \n  String refImageUrl = d2; \nint Threshold = d3; \nString cmpScriptDir = new \nString(System.getProperty(\"user.dir\") + \n\"\\\\prj\\\\src\\\\prj\\\\lib\\\\Pattern_and_Color_Detection.exe\"); \n \nExternCmd externCmd; \nexternCmd = new ExternCmd(CollectionUtil.asList(cmpScriptDir, \nrefImageUrl, capImageUrl), 10000); \nexternCmd.enableConsoleOutput(\"ImageCompare\", \"Error \"); \n \ntry { \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \nRunner runner = externCmd.run(new \nFile(System.getProperty(\"user.dir\") + \n\"\\\\prj\\\\src\\\\prj\\\\lib\").toPath()); \n \nrunner.joinAll(); \nString output = runner.getOutput(); \noutput = output.trim(); \n \noutput = output.substring(output.lastIndexOf(\"=\") + 3); \n \nif(Integer.valueOf(output) < Threshold){ \nexu.comment(ErrorLevel.ERROR, \"matching points \" + output \n+ \" under threshold \" + Threshold); \n}else { \nexu.comment(ErrorLevel.INFO, \"matching points \" + output \n+ \" above threshold \" + Threshold); \n} \n} \ncatch (RuntimeException e) { \nExceptionUtil.ignore(e); \n e.printStackTrace(); \n System.out.println(\"Exception occured while trying to run \nthe script\"); \n} \ncatch (InterruptedException e) { \n Thread.currentThread().interrupt(); \n } \n} \n \nTCM_ePIP \n \n- TCM_ePIP is widely used in the ISD/ISC department and you can find the features of \nthis board mentioned here in this link \n- Here is the basic functions you can use with the TCM_epip \n- DIOs : each DIO can be set and an output or input  \n- Input :  \n \n\nJa v a\nJa v a\nJa v a\nJa v a\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nexu.modMM().objPip().objDioGroup(0).objDio(0).afcSetOutputMode\n(ItfDio.EnmOutputMode.Input); \n \n- Output \n \nexu.modMM().objPip().objDioGroup(0).objDio(0).afcSetOutputMode\n(ItfDio.EnmOutputMode.PushPull); \n \n \n- Set the output high or low :  \n \nexu.modMM().objPip().objDioGroup(0).objDio(0).objOutput().afcS\net(x); \n \nIf x = 0 : pin is low , x = 1 pin is high \n \n- LeverSimulation (Normal DACs with 16-Bit Resolution): \n- Before using any of leverSims you have to set the reference value of the \nContaining group  \n \nexu.modMM().objPip().objLeverSimGroup(0).afcVRefSelection(ItfL\neverSimGroup.EnmVRefSelection.Internal) \n \n- Secondly you have to enable the output of the used leverSim object) \nexu.modMM().objPip().objLeverSimGroup(0).objLeverSim(0).afcEna\nbleOutput(true); \n- If you want the output of this DAC to be x% of the \nDAC_reference:  \n\nJa v a Castle  User Guide  -- r2023.2            Access  Restricted  \nexu.modMM().objPip().objLeverSimGroup(0).objLeverSim(0).objVal\nuePercent().afcSet(x); \n \nRunning Castle Tests \nSWTestIDE \nCTE: TSXML Starter (F5) \nUsers select TSXMLs to execute as per the entered search path. Selected Paths are sent to \nCRE for execution in a row. Progress Bar indicates remaining time and log shows the test \nstatus and steps. Please refer to the TSXML integration document. \n \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n \nCTE: Test Starter [Java] (F6) \nUsers select from registered tests in CteSetup.java/CteSetup.xml \n \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n \nFT-Menu \nFT-Menu is used for environmental testing. It was developed in the programming language \nLabVIEW. The FT-Menu uses the VI-Server function of LabVIEW, which allows it to load \nSub-VIs during run-time (dynamically) and execute them. This enables the test bench to be \nenhanced with new functions without changing the main program. \n \nThe main functions are:  \n\u25cf Script controlled test sequencer \n\u25cf Data presentation (tabular, graphical, error counter) \n\u25cf Network based dashboard \n\u25cf Support of CASTLE PIMs Generation 3-5 (CTE) \n\u25cf Support of cRIO based MARS \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n\u25cf Climate chamber control (V\u00f6tsch/Wei\u00df, CTS, KSON, ACS, CLIMATS, ESPEC, ....) \n\u25cf Motor control \n\u25cf Power supply control \n\u25cf NI GPIB command interface \n\u25cf USB IO interface \nPlease refer to the Bietigheim Test/Validation site for more info about installation, \nconfiguration and usage. \nEoL Tool \nPython Client \nCRE Python Client is mainly intended to write test cases in both Direct and HIL mode. The \nAPI call syntax is almost the same as in Java. The client communicates with CRE via MQTT. \nIt uses config.py which is the equivalent of config jar. Please refer to the guide. \n \nCastle Viewer \nComments and Filters \nExport Formats \nHardware Troubleshooting \nStatus Leds \nFlashing \nFirst, ensure the Xilinx Platform Cable USB II led turns green when connected, otherwise \nupdate the drive. Then you may use the XMD script for flashing. \n \nAdvanced Topics \nHow Castle Works \nSignals \nEvents \nSystem Variables \nULS Simulation \nVS6 \nVosstrex \n \n\n Castle  User Guide  -- r2023.2            Access  Restricted  \n \n \n \n \n \n \n\n \n CASTLE ordering  process  U. Schneider \nVersion:  1.5 \n2025-01-17 \n \n \n \n \nContents \n \n \nHistory  \nObject  and responsibility  \nTerms  and Definitions  \nProcess  definition  \nOrder  for Hardware  \nOrder  for development  services  \nRepair  process  \n \n \n \n \n \n \n \n \nUlrich  Schneider  CASTLE  ordering  process  Page  1 of 5 \n\n \n CASTLE ordering  process  U. Schneider \nVersion:  1.5 \n2025-01-17 \n \nHistory \n \nVersion  Date  Notes  \n1.0 2012-01-10  1st Release  \n1.1 2012-09-14  Add hardware  development  services  \n1.2 2015-03-20  Add repair  process  \n1.3 2019-05-28  Introduced  supplier  124013  for Castle  supplies.  \nAdd Mr. Eberhard  Kilian  as contact  person  for Castle  HW. \n1.4 2019-09-16  Changed  supplier  to 14337   \n1.5 2025-01-17  Changed  supplier  to 170234    \"E51  - Valeo Schalter  und Sensoren\".  \nIntroduced  Castle  e-mail  address.   \nUpdated  Castle  HW team.  \n   \n \n \nUlrich  Schneider  CASTLE  ordering  process  Page  2 of 5 \n\n \n CASTLE ordering  process  U. Schneider \nVersion:  1.5 \n2025-01-17 \n \nObject and responsibility \nThis document  defines  the process  to order  CASTLE  test equipment  and hardware  development  \nservices.  \n \nCASTLE  hardware  is developed  and manufactured  by  \n \nValeo Schalter  und Sensoren  GmbH  \nLaiernstrasse  12 \n74321  Bietigheim-  Bissingen  \n \nAs CASTLE  is the standardized  test system  for several  Valeo divisions  respectively  product  lines  \nthe project  is organized  as a shared  service  within  CDA.   \n \nIf you have  any questions  or problems  regarding  CASTLE  hardware  orders  or hardware  \ndevelopment  services  do not hesitate  to contact  the hardware  team  under  its common  e-mail:   \n Mailbox BIE2-CASTLE\n \nCastle  hardware  team  members:  \n \nName  Fon e-mail  \nUlrich  Schneider  +49 7142  916 - 4024   Ulrich SCHNEIDER\nEberhard  Kilian  +49 7142  916 - 2441   Eberhard KILIAN\nStefan  M\u00fcller  +49 7142  916 - 4098    Stefan MUELLER\n \n \nThe responsible  person  is hereafter  called  supplier . \n \n \nTerms and Definitions \n \nAbbr. Term \nPO Purchase order \nIAR Investment Authorization request \n#IO Internal Order Number \n  \n  \n  \nUlrich  Schneider  CASTLE  ordering  process  Page  3 of 5 \n\n \n CASTLE ordering  process  U. Schneider \nVersion:  1.5 \n2025-01-17 \n \nProcess definition \nOrder  for Hardware  \nIn general  CASTLE  test equipment  is used project  independent.  Therefore  CASTLE  has to be \ntreated  as a capital  good.  \n \nProcess  steps  to your CASTLE  hardwar e order : \n\u25cf If you have  planned  the amount  of required  equipment,  refer  to the CASTLE  price  list to \ncalculate  cost. Optionally  you may ask the supplier  for a quote.  To do so please  use the \ncommon  CASTLE  e-mail  address:        Mailbox BIE2-CASTLE\n\u25cf Create  an IAR (Investment  Authorization  request).  Your finance  department  will provide  a \ntemplate  or form.   \n\u25cf If the IAR is approved  an #IO (Internal  Order  Number)  will be assigned.  \n\u25cf For sites which  belong  to Valeo Schalter  und Sensor en GmbH  (e.g. Valeo plant  in \nWemding)  it is enough  to provide  this #IO to the supplier  (refer  to Object  and responsibility ). \n\u25cf All other  Valeo entities  have  to create  an official  purchase  order  (using  eProc)  to the supplier  \n(refer  to Object  and responsibility ).  \nIt is important  to use supplier   170234   \"E51 - Valeo Schalter und Sensoren\" for such orders. \n\u25cf To minimize  lead time  and to meet  your  delivery  time,  inform  the supplier  as soon  as \npossible  about  your  planned  sourcing.  Without  any preliminary  information,  lead time can \nbe 14 up to 20 weeks  (depending  on ordered  quantities)!   \n \n \nOrder  for development  services  \nFor development  services  a purchase  order  or a project  number  or an internal  order  is required.  \n \nProcess  steps  to your CASTLE  service  order : \n\u25cf Ask the supplier  for a quote.  \n\u25cf Provide  either  \n\u25cb a project  number   \n\u25cb or an #IO (Internal  Order  Number)  \n\u25cb or, for Valeo entities  other  than Valeo Schalter  und Sensor en GmbH,  \n            a purchase  order  issued  on supplier  \n            170234   \"E51 - Valeo Schalter und Sensoren\"  \n \n \n \nUlrich  Schneider  CASTLE  ordering  process  Page  4 of 5 \n\n \n CASTLE ordering  process  U. Schneider \nVersion:  1.5 \n2025-01-17 \n \nRepair  process  \n\u25cf If you need  to ship some  defective  HW please  contact  the supplier  (refer  to Object  and \nresponsibility ) and ask for an incident  number  and further  information  (value  of shipment,  \nPO number , etc). \n\u25cf Use the incident  number  for all communication  and mark  also the shipment  with this \nnumber . \n\u25cf Please  always  provide  a detailed  failure  description.  \n\u25cf Send  the defective  HW to the following  address:  \n  \n Valeo Schalter  und Sensoren  GmbH  \n Eberhard  KILIAN  \n Laiernstrasse  12  \n 74321  Bietigheim-Bissingen  \n Germany  \n \n\u25cf Once  the analysis  is done,  the Castle  team  will inform  you if the repair  is related  to some  \ncost or not.  \n\u25cf After  repairing  the defective  HW we will send it back  to the sender . \n \n!! Shipments without Incident # and the correct data will be rejected !! \n \nUlrich  Schneider  CASTLE  ordering  process  Page  5 of 5 \n\n6e5997_988 R06.0  Radar PIP\nST10:  Amphenol ICC Minitek PWR 3.0: 10127720-062LF (6 pin male connector; 2 row)\nFor the wiring Harness use: \n  Housing:  Amphenol ICC: 10127716-06LF (female)\n  Contact:   Amphenol ICC: 10127718-002PLF (socket; AWG30...20; 0,05...0,5mm\u00b2) Front view\nPIM PIM\nFunction PIN Function PIN\nKL31 3 DUT_AL 6\nKL31 2 DUT_ST 5\nKL30M 1 KL15M 4\n6e5997_988 R06.0  Radar PIP Front view\nST11:  Molex Milligrid: 087833-2620 (26 pin male connector; 2 row)\nFor the wiring Harness use: \n  Housing:  Molex 0511102651 (female)\n  Contact:   Molex 050394-8054 (socket; AWG30...24; 0,05...0,25mm\u00b2) \nPIM PIM\nFunction PIN Function PIN\nGND 26 GND 25\nADC_GND0 24 ADC_GND1 23\nKL15 22 CS1 21\nKL30 20 CS0 19\nDIO7 18 DIO6 17\nDIO5 16 DIO4 15\nDIO3 14 DIO2 13\n\nDIO1 12 DIO0 11\nDAC_R_E_H 10 DAC_R_E_L 9\nDAC3 8 DAC2 7\nDAC1 6 DAC0 5\nADC3 4 ADC2 3\nADC1 2 ADC0 1\n6e5997_988 R06.0  Radar PIP Front view\nST12:  Harting 09452812560 (ix-Industrial;  Type A;  IEC 61076-3-124)\nFor the wiring Harness use: \n  IDC:       Harting 09451812562XL (type A male; IDC)\n  Solder:  Harting 09451812560XL (type A; male; Solder)\nPIM PIM\nFunction PIN Function PIN\nPIP_CAN_L0 5 SPE_MDIP0 6\nPIP_CAN_H0 4 SPE_MDIN0 7\nGND 3 GND 8\nSPE_MDIN1 2 PIP_CAN_H1 9\nSPE_MDIP1 1 PIP_CAN_L1 10\n6e5997_988 R06.0  Radar PIP\nST15:  Molex Milligrid: 87833-0832 (8 pin male connector; 2 row) Front view\nFor the wiring Harness use: \n  Housing:  Molex 0511100856 (female)\n  Contact:   Molex 050394-8054 (socket; AWG30...24; 0,05...0,25mm\u00b2) \n\nPIM PIM\nFunction PIN Function PIN\nRS232_RXD1 8 HMI_ST0 7\nGND 6 HMI_AL0 5\nGND 4 HMI_ST1 3\nRS232_TXD1 2 HMI_AL1 1\n6e5997_988 R06.0  Radar PIP Front view\nST18:  Molex Milligrid: 87833-3020 (30 pin male connector; 2 row)\nFor the wiring Harness use: \n  Housing:  Molex 0511103051 (female)\n  Contact:   Molex 050394-8054 (socket; AWG30...24; 0,05...0,25mm\u00b2) \nPIM PIM\nFunction PIN Function PIN\nI#N2 30 I_N2 29\nI#B2 28 I_B2 27\nI#A2 26 I_A2 25\nRS232_RXD2 24 I#US2 23\nGND 22 I_VCC2 21\nI#N1 20 I_N1 19\nI#B1 18 I_B1 17\nI#A1 16 I_A1 15\nRS232_TXD2 14 I#US1 13\nGND 12 I_VCC1 11\nI#N0 10 I_N0 9\nI#B0 8 I_B0 7\n\nI#A0 6 I_A0 5\nn.c. 4 I#US0 3\nGND 2 I_VCC0 1\nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/2025UPA PIP (6e5997_998 R03.6) - connector pinning\nST01: SubD 50pol. Male on the PIP.  For the cable a Female connector is required!\nPinning of connector ST01 is configured to have a 1:1 connection to a standard UPA- ECU (using a ribbon cable). \nNote: Pinning of soldering connector is different to the pinning of the connector for ribbon cable.\nPin PIP\nsolder\nconnector Function PIP - Signal namePin\nribbon \nconnectorPin \nribbon wireECU\nconnector\nR1 R2 R3 R1 R2 R3\n1 KL15 (Ignition) *3 KL15 1 1 A1\n34 Rear Sounder - TON_H- 2 2 A2\n18 KL30 (Battery) KL30 3 3 A3\n2 Switch UPA TASTER_UPA 4 4 A4\n35 Trailer ANHAENGER 5 5 A5\n19 Reverse gear RUECKWAERTS 6 6 A6\n3 CAN- Low CAN0_L_IN 7 7 A7\n36 KL31 (GND) *3 KL31 8 8 A8\n20 Status LED PSM LED_PSM 9 9 A9\n4 Rear Sounder + TON_H+12V 10 10 A10\n37 Speed  *9  GESCHWINDIGKEIT 11 11 A11\n21 LIN / K-Line (Diagnose) DIAG_IN 12 12 A12\n5 Status LED UPA LED_UPA 13 13 A13\n38 CAN - High CAN0_H_IN 14 14 A14\n22 Reserve  *9  RESERVE 15 15 A15\n6 Switch PSM TASTER_PSM 16 16 A16\n39 Sensor Front GND S_V_GND 17 17 B1\n23 Sensor Front VBat S_V_12V 18 18 B2\n7 Front Sounder - TON_V- 19 19 B3\n40 Front Sounder + TON_V+12V 20 20 B4\n24 Sensor Signal FL S_VAL 21 21 B5\n8 Sensor Signal FML S_VML 22 22 B6\n41 Sensor Signal FMR S_VMR 23 23 B7\n25 Sensor Signal FR S_VAR 24 24 B8\n9 Sensor Signal FSL (PSM) S_VSL 25 25 B9\n42 Sensor Signal FSR (PSM) S_VSR 26 26 B10\n26Display Front GND / Sensor Front Center Right D_V_GND /  S_VCR  27 27B11\n10Display Front Vcc / Sensor Front Center Left D_V_VCC  / S_VCL  28 28B12\n43 Display Rear GND D_H_GND 29 29 C1\nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/202527 Sensor Signal RMR S_HMR 30 30 C2\n11 Sensor Signal RML S_HML 31 31 C3\n44 Sensor Signal RR S_HAR 32 32 C4\n28 Sensor Signal RL S_HAL 33 33 C5\n12 Sensor Signal RSR S_HSR 34 34 C6\n45 Sensor Rear Center Left  (HRES1)   S_HCL  (S_HRES1) 35 35 C7\n29 Sensor GND S_H_GND 36 36 C8\n13 Sensor Rear Center Right (HRES2)   S_HCR  (S_HRES2) 37 37 C9\n46 Sensor Signal RSL S_HSL 38 38 C10\n30 Sensor Rear Vbat S_H_12V 39 39 C11\n14 Display Rear Vcc D_H_VCC 40 40 C12\n47 RS232 - TXD0 *4 / ADC TXD0  / AD3  41\n31 RS232 - RXD0 *4 / ADC RXD0  / AD0  42\n15 RS232 - TXD1 *4 / CAN1_L_IN   TXD1 / CAN1_L_IN   43\n48 RS232 - RXD1 *4 / CAN1_H_IN  RXD1 / CAN1_H_IN   44\n32 LIN_BATT *5 LIN_BATT 45\n16 Failure Sim. Display supply *6 BTS5210ST1 46\n49 Failure Sim. Display supply *6 BTS5210ST2 47\n33 Comparator / \u00b5C - ECT *7 C_IN4  / C_ECT7_IN   48\n17Comparator / \u00b5C - PWM7 *8 C_IN5  / C_PWM7  / D_V_GND  49\n50 SW- CAN SW_CAN_IN  / D_V_VCC 50\nSchematic is according to the grey backgrounded pinning (Soldering connector)!\nstandard function  / optionally function \n*3ECUs that expect KL15 on A9 and KL31 on A16 can be operated by simulating a short circuit to Vcc on the \"LED_PSM\" line and a short \ncircuit to GND on the \"TASTER_PSM\" line. Restrictions: Due to the restrictions, it is better to use a suitable connection cable.\n*4 Two serial interfaces, intended for controlling a Power Supply and the existing simulation box. (Optional assignment CAN 1)\n*5 Supply for the LIN-Transceiver on the BIP, if the PIM is used as Slave.\n*6If the ECU contains a display, which is supplied from a High-Side-Switch in the ECU, this IO can be used to simulate an overcurrent (pull-\ndown the status pin to GND).\n*7 A ECT- (Enhanced Capture Timer) channel of the \u00b5C.\n*8 A PWM- (Puls Width Modulation) channel of the \u00b5C\n*9: Input require a external Current limiting!\nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/2025ST04:  HD-SubD 15pol. female on the PIP.  For the cable a Male connector is required!\nNote: Pinning of soldering connector is different to the pinning of the connector for ribbon cable.\npinning \nsoldering \nconnector\n(female)\nR. 1 R. 2 R. 3 Function PIP - Signal name\n1 ADC- Channel 0 / Flexray BM Ch.2 AD0 / BM0_2   \n6 ADC- Channel 1 AD1\n11 ADC- Channel 2 AD2\n2 ADC- Channel 3 / Flexray BP Ch.2 AD3 / BP0_2   \n7 external reference for ADC- Channels AD_REF_E\n12 DAC- Channel A DA_A\n3 DAC- Channel B DA_B\n8 DAC- Channel E DA_E\n13 DAC- Channel F DA_F\n4 external reference for DAC- Channels DA_REF_E\n9 comparator Channel 0 / Flexray BM Ch.1 C_IN0 / BM0_1   \n14 comparator Channel 1 C_IN1\n5 comparator Channel 2 C_IN2\n10 comparator Channel 3 / Flexray BP Ch.1 C_IN3 / BP0_1   \n15 external threshold for comparators C_REF_E\nScematic is according to the grey backgrounded pinning (Soldering connector!\nstandard function  / optionally function \n\nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/2025Configuration is documented in the Schematic or in the BOM \"6e5997_998 R03.4 Montagest\u00fcckliste\u2026xls\" \nchanges compared to Rev. 3.5\nCAN0 is by default equipped as HS-CAN on the BIP!\nCAN1 is by default equipped as LS-CAN on the BIP!\nBM0_1, BP0_1 is used for project BR222\nNotes:\nFlexray BP (Bus plus)  = pink  (Pin 7 at Vector FlexCard)\nFlexray BM (Bus minus)  = green (Pin 2 at Vector FlexCard)\n\nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/2025Basisplatine\nSubD 15 pol.\n7, 14\n6, 13\n3\n8, 15\n10 (K-Line), 9 (LIN)\n11\nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/20255 (SW-CAN), \nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/2025\nIO 998 R03.6 Valeo, E2T1, J\u00fcrgen Bauer 8/28/2025\nInterface UPA PIP IO 998 R03.8.xlsx Valeo Schalter und Sensoren GmbH ITC- E- HW  Ulrich Schneider 28.08.2025 Seite 1 von UPA PIP (6e5997_998 R03.8) - Front Connector Pinning\nST01: HD- SubD 78pol. Female on the PIP.    For the cable a male connector is required!\nPins 1 - 50 are same as R03.6\nPIP pinning\n(female) PIP - Signal name Function IO- Type DirectionDUT\nColor               \nPinR1 R2 R3 R4\n1 KL15 KL15 (Ignition) *3 PWR O\n21 DIAG_IN LIN / K-Line (Diagnose) S I\n40 TON_V+12V Front Sounder + PWR I\n60 S_17_GND Sensor 17-24 GND PWR I\n2 TASTER_UPA Switch UPA S O\n22 RESERVE Reserve  *9  S I\n41 S_VMR Sensor Signal FMR S IO\n61 BSD_ALERT_L BSD Alert Left PWR I\n3 CAN0_L_IN CAN0 - Low C IO green\n23 S_V_12V_IN Sensor Front VBat PWR I\n42 S_VSR Sensor Signal Front Side Right (FSR) S IO\n62 BSD_STATE_L BSD State Left PWR I\n4 TON_H+12V Rear Sounder + PWR I\n24 S_VAL Sensor Signal FL S IO\n43 D_H_GND Display Rear KL31 PWR I\n63 BSD_ALERT_R BSD Alert Right PWR I\n5 LED_UPA Status LED UPA S I\n25 S_VAR Sensor Signal FR S IO\n44 S_HAR Sensor Signal Rear Outer Right (ROR) S IO\n64 BSD_STATE_R BSD State Right PWR I\n6 TASTER_PSM Switch PSM S O\n26 S_VCR   (S_VRES2) Sensor Front Center Right S IO\n45 S_HCL   (S_HRES1) Sensor Rear Center Left  (RCL)   S IO\n65 TASTER_BSD Switch BSD S O\n7 TON_V- Front Sounder - PWR I\n27 S_HMR Sensor Signal Rear Middle Right (RMR) S IO\n46 S_HSL Sensor Signal Rear Side Left (RSL) S IO\n66 LED_BSD Status LED BSD S I\n8 S_VML Sensor Signal FML S IO\n28 S_HAL Sensor Signal Rear Outer Left (ROL) S IO\n47 TXD0  RS232 - TXD Ch. 0 *4 S O\n67 T_GND Input to Test GND connection PWR I\n9 S_VSL Sensor Signal FSL (PSM) S IO\n29 S_H_GND Sensor Rear GND PWR I\n48CAN1_H_IN CAN1 - High C IO pink\n68TASTER_TM Switch Totmann S O\n10S_VCL  (S_VRES1) Sensor Front Center Left (FCL) S IO\n30 S_H_12V_IN Sensor Rear Vbat PWR I\n49 BTS5210ST2 Failure Sim. Display supply *6 S I\n69 LED_TM Status LED Totmann S I\n11 S_HML Sensor Signal Rear Middle Left (RML) S IO\n31 RXD0 RS232 - RXD Ch.0 *4 S I\n50 D_V_VCC Display Front Vcc PWR I\n70 RESERVE2 Reserve 2  *9  S I\n12 S_HSR Sensor Signal Rear Side Right (RSR) S IO\n32 LIN_BATT LIN_BATT *5 PWR I\n51 S_17_12V_IN Sensor 17-24 Vbat PWR I\n71 reserved -- PWR\n13 S_HCR  (S_HRES2) Sensor Rear Center Right (RCR)   S IO\n33 C_IN4 Comparator 4 S I\n52 S_C17 Sensor ch. 17 S IO\n72 AD0 Analog input Ch. 0 S I\n14 D_H_VCC Display Rear Vcc PWR I\n34 TON_H- Rear Sounder - PWR I\n53 S_C18 Sensor ch. 18 S IO\n73 AD3 Analog input Ch. 3 S I\n15 CAN1_L_IN  CAN1 - Low   C IO green\n35 ANHAENGER Trailer S I\n54 S_C19 Sensor ch. 19 S IO\n74 C_IN0 Comparator 0 S I\n16 BTS5210ST1 Failure Sim. Display supply *6 S I\n36 KL31 KL31 (GND) *3 PWR O\n55 S_C20 Sensor ch. 20 S IO\n75 C_IN3 Comparator 3 S I\n17 D_V_GND Display Front KL31 PWR I\n37 SPEED Speed Simulation In *9  S I\n56 S_C21 Sensor ch. 21 S IO\n76 DA_B  / C_IN5    Analog Output Ch. B / Comparator 5 S O / I\n18 KL30 KL30 (Battery) PWR O\n38 CAN0_H_IN CAN0 - High C IO pink\n57 S_C22 Sensor ch. 22 S IO\n77 TXD1 RS232 TXD Ch. 1 S O\n19 RUECKWAERTS Reverse gear S I\n39 S_V_GND Sensor Front GND PWR I\n58 S_C23 Sensor ch. 23 S IO\n78 RXD1 RS232 RXD Ch. 1 S I\n20 LED_PSM Status LED PSM S I\n59 S_C24 Sensor ch. 24 S IO\nchanges compared to Rev. 3.6 standard function  / optionally function \nDefinition IO- Types:Full size\nharnes\nPWR Power   0,22 mm\u00b2 # PWR: 2424 x 0,25 mm\u00b2\nInterface UPA PIP IO 998 R03.8.xlsx Valeo Schalter und Sensoren GmbH ITC- E- HW  Ulrich Schneider 28.08.2025 Seite 2 von S Signal   0,14 mm\u00b2 # S: 5050pol x 0,1 mm\u00b2\nC Communication   twisted pair  100R \u00b1 10R # C: 42 x TP\nInterface UPA PIP IO 998 R03.8.xlsx Valeo Schalter und Sensoren GmbH ITC- E- HW  Ulrich Schneider 28.08.2025 Seite 3 von Pairs are:  CAN0_L - CAN0_H;    CAN1_L - VAN1_H;\nAdaptor \n78 -> 50 pin\n# PWR: 1616 x 0,25 mm\u00b2\n# S: 3030pol x 0,1 mm\u00b2\n# C: 42 x TP\n*3ECUs that expect KL15 on A9 and KL31 on A16 can be operated by simulating a short circuit to Vcc on the \"LED_PSM\" line and a short circuit to \nGND on the \"TASTER_PSM\" line. Restrictions: Due to the restrictions, it is better to use a suitable connection cable.\n*4 Two serial interfaces, intended for controlling a Power Supply and the existing simulation box. (Optional assignment CAN 1)\n*5 Supply for the LIN-Transceiver on the BIP, if the PIM is used as Slave.\n*6If the ECU contains a display, which is supplied from a High-Side-Switch in the ECU, this IO can be used to simulate an overcurrent (pull-down the \nstatus pin to GND).\n*7 A ECT- (Enhanced Capture Timer) channel of the \u00b5C.\n*8 A PWM- (Puls Width Modulation) channel of the \u00b5C\n*9: Input require a external Current limiting!\nST04:  HD-SubD 15pol. Female on the PIP.   For the cable a male connector is required!\nNote: Pinning of soldering connector is different to the pinning of the connector for ribbon cable.\nPIP pinning\n(female)\nPIP - Signal name Function IO- Type DirectionDUT\nColor               \nPin R. 1 R. 2 R. 3\n1 BM0_2  Flexray BM Ch.2 C IO green\n6 AD1 ADC- Channel 1 S I\n11 AD2 ADC- Channel 2 S I\n2 BP0_2  Flexray BP Ch.2 C IO pink\n7 AD_REF_E / DA_REF_E external reference for ADC & DACs S I / I\n12 DA_A DAC- Channel A S O\n3 BP_BC BroadR-Reach Bus Plus C IO pink\n8 DA_E DAC- Channel E S O\n13 DA_F DAC- Channel F S O\n4 BM_BC BroadR-Reach Bus Minus C IO green\n9 BM0_1  Flexray BM Ch.1 C IO green\n14 C_IN1 comparator Channel 1 S I\n5 C_IN2 comparator Channel 2 S I\n10 BP0_1  Flexray BP Ch.1 C IO pink\n15 C_REF_E external threshold for comparators S I\nstandard function  / optionally function \nchanges compared to Rev. 3.6\nDefenition IO- Types: Full size & Adaptor\nPWR Power   0,22 mm\u00b2 # PWR: 0\nS Signal   0,14 mm\u00b2 # S: 910pol x 0,1 mm\u00b2\nC Communication   twisted pair  100R \u00b1 10R # C: 63 x TP\nPairs are:  BM0_1 - BP0_1;   BM0_2 - BP0_2;   BM_PC - BP_BC;\nConfiguration is documented in the Schematic or in the BOM.\nFor CASTLE Rev. 3 CAN0 is High Speed.\nFor CASTLE Rev. 3 CAN1 is Low Speed.\nAs of CASTLE Rev. 4 both CAN Interfaces are configurable to High or Low speed.\nBM0_1, BP0_1 is used for project BR222\nNotes:\nFlexray BP (Bus plus)  = pink  (Pin 7 at Vector FlexCard)\nFlexray BM (Bus minus)  = green (Pin 2 at Vector FlexCard)\nUSV10 (2 Wire) Master PIP Front Connectors IOs\nST10\nPIN # Function PIN # Function PIN # Function PIN # Function\n59GND 20GND\n78DAC_R_E_H 58DAC_R_E_L 39DAC1 19DAC0\n77ADC3 57ADC2 38ADC1 18ADC0\n76 56 37 17DIO3\n75LIO0 55LIO4 36DIO7 16DIO2\n74LIO1 54LIO5 35DIO6 15DIO1\n73LIO2 53LIO6 34DIO5 14DIO0\n72LIO3 52LIO7 33DIO4 13DIO_VDD_A\n71 51 32DIO_VDD_B 12\n70 50 31 11-12V_F\n69 49 30 10\n68 48GND 29 9+12V_F\n67 47 28 8\n66 46GND 27 7+5V_F\n65 45 26 6\n64 44GND 25 5\n63sensor GND 43sensor GND 24DSI12 4DSI12\n62sensor GND 42sensor GND 23DSI11 3DSI11\n61sensor GND 41sensor GND 22DSI02 2DSI02\n60sensor GND 40sensor GND 21DSI01 1DSI01\nUSV10 (3 Wire) Master PIP Front Connectors IOs\nST10\nPIN # Function PIN # Function PIN # Function PIN # Function\n59GND 20GND\n78DAC_R_E_H 58DAC_R_E_L 39DAC1 19DAC0\n77ADC3 57ADC2 38ADC1 18ADC0\n76 56 37 17DIO3\n75LIO0 55LIO4 36DIO7 16DIO2\n74LIO1 54LIO5 35DIO6 15DIO1\n73LIO2 53LIO6 34DIO5 14DIO0\n72LIO3 52LIO7 33DIO4 13DIO_VDD_A\n71 51 32DIO_VDD_B 12\n70S116 50S113 31S106 11S103\n69S115 49S112 30S105 10S102\n68S114 48S111 29S104 9S101\n67S016 47S013 28S006 8S003\n66S015 46S012 27S005 7S002\n65S014 45S011 26S004 6S001\n64 44 25 5\n63sensor supply 43sensor supply 24S_VCC3 4S_VCC3\n62sensor supply 42sensor supply 23S_VCC2 3S_VCC2\n61sensor supply 41sensor supply 22S_VCC1 2S_VCC1\n60sensor supply 40sensor supply 21S_VCC0 1S_VCC0\nUSV 10 Slave Revision 5.2 PIP Front Connectors IOs\nST10 ST11 ST12\nHD-Sub-D-Female-78pin BroadR- Reach interface SPK & Sound interface\nPIN # Function PIN # Function PIN # Function PIN # Function PIN # Function Function PIN # PIN # Function\n59GND 20GND 1BP_BC SPK_F_M 2 1SPK_SIM_F\n78D_F_VCC 58SPEED 39BSD_STATE_L 19BSD_ALERT_R 2BM_BC SPK_R_M 4 3SPK_SIM_R\n77D_R_VCC 57REVERSE 38ADC_GND0 18BSD_STATE_R EP_GND 6 5SPK_VCC\n76ADC0 56TRAILER 37ADC_GND1 17SPK_F_M EP_R 8 7EP_F\n75ADC1 55LED_BSD 36ADC_GND2 16SPK_R_M MIC_GND 10 9MIC_IN\n74ADC2 54LED_TM 35ADC_GND3 15BSD_ALERT_L\n73ADC3 53C_IN1 34ADC_GND4 14SPK_F_P\n72LED_UPA 52C_VDD_B 33ADC_GND5 13SPK_R_P\n71LED_PSM 51C_IN3 32BUTTON_UPA 12\n70C_IN0 50DAC1 31BUTTON_PSM 11\n69C_VDD_A 49DAC_R_E_H 30BUTTON_BSD 10\n68C_IN2 48DAC3 29BUTTON_TM 9\n67DAC0 47DAC2 28 8S_CHAIN_POWER0\n66DAC_R_E_L 46RESERVE2 27S_BUS_P2P0 7S_CHAIN_POWER1\n65GND 45RESERVE 26S_BUS_P2P1 6S_CHAIN_POWER2\n64GND 44 25S_BUS_P2P2 5S_CHAIN_POWER3\n63GND 43 24S_BUS_P2P3 4DIO1\n62GND 42RS232_TX1 23DIO0 3DIO_VDD_B\n61RS232_TX0 41RS232_RX1 22DIO_VDD_A 2DIO3\n60RS232_RX0 40GND 21DIO2 1GND", "type": "Document"}}