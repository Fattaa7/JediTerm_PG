{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_third-party-tools_linux-os_debugmissinglibsoonlinuxusinglddcommand.txt"}, "page_content": "Debug Missing Lib.so on Linux using Ldd command\nPost date: Mar 24, 2021 8:24:32 AM\nDynamic Loadinga shared object (an *.so file similar to *.DLL in windows) is a basic\noperation in any linux OS. The Dynamic loader program is 'ld' can be inferred by \nthePOSIXfunction:\n#include <dlfcn.h>void *dlopen(const char *filename, intflags);int dlclose(void \n*handle);\nThe configurations forldcan be normally found in/etc/ld.so.conf.d/*, each file has a\npath per line that should be included.\nTo debug a failing lib.so that cannot be loaded (sometimes application report that \nas file not found), it's useful to get introduced tolddcommand. Syntax is pretty \nclear, just pass the lib.so to the command and it will list all dependencies and \ntheir location if found.\nExample:\nteldeeb@cai1-wu20325:~$ ldd \n/opt/petalinux2019.1/tools/xsct/lib/lnx64.o/librdi_commonxillic.so\nlinux-vdso.so.1 =>  (0x00007fffc7373000)\nlibXil_lmgr11.so => /opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libXil_lmgr11.so \n(0x00007f13fdb7c000)\nlibboost_filesystem.so => \n/opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libboost_filesystem.so \n(0x00007f13fd965000)\nlibboost_regex.so => /opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libboost_regex.so \n(0x00007f13fd682000)\nlibboost_system.so => /opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libboost_system.so\n(0x00007f13fd47f000)\nlibisl_iostreams.so =>not found\nlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f13fc0e1000)\nlibrt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f13fbed9000)\nlibstdc++.so.6 => /opt/anaconda3/lib/libstdc++.so.6 (0x00007f13fe5fe000)\nlibgcc_s.so.1 => /opt/anaconda3/lib/libgcc_s.so.1 (0x00007f13fe5ea000)\nlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f13fbcbc000)\nlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f13fb8f2000)\nlibboost_date_time.so => \n/opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libboost_date_time.so \n(0x00007f13fb6e3000)\nlibboost_iostreams.so => \n/opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libboost_iostreams.so \n(0x00007f13fb4d0000)\nlibboost_thread.so => /opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libboost_thread.so\n(0x00007f13fb2ac000)\nlibisl_iosutils.so => /opt/petalinux2019.1/tools/xsct/lib/lnx64.o/libisl_iosutils.so\n(0x00007f13fb093000)\nlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f13fad8a000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f13fe580000)\nlibrdizlib.so => /opt/petalinux2019.1/tools/xsct/lib/lnx64.o/librdizlib.so \n(0x00007f13fab65000)\nNote that:\nSome shared objects have no file name, they are directly mapped from the kernel \n(nosyscallneeded to reach)Some shared objects are missing ==> Uselocate missing.soto\nfind them and ensure their paths configuredTake care about the paths used for \nlinking, if a 2019 binary tool is linked to an older 2018.so there might be \nproblems.\nSome shared objects have no file name, they are directly mapped from the kernel \n(nosyscallneeded to reach)\nSome shared objects have no file name, they are directly mapped from the kernel \n(nosyscallneeded to reach)\nSome shared objects are missing ==> Uselocate missing.soto find them and ensure \ntheir paths configured\nSome shared objects are missing ==> Uselocate missing.soto find them and ensure \ntheir paths configured\nTake care about the paths used for linking, if a 2019 binary tool is linked to an \nolder 2018.so there might be problems.\nTake care about the paths used for linking, if a 2019 binary tool is linked to an \nolder 2018.so there might be problems.\nWhenlddshows it finds all needed objects, then the lib.so should be loadable with no\nproblems.", "type": "Document"}}