{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "general-topics_ethernet_tcp.txt"}, "page_content": "TCP\nPost date: Apr 28, 2016 1:08:34 PM\nTCP is Transmission Control Protocol, through this \"transport layer\" protocol, \npackets can be transported to the correct destination within the same IP. This is \ndone through the port number. Each TCP packet contains source Port number and \ndestination Port number, to identify the sender and the receiver.\nCommunication Sides\nServer\nThe server shall be listening to its local port, waiting for a remote connection \nrequest.\nThe server shall be listening to its local port, waiting for a remote connection \nrequest.\nThe server shall be listening to its local port, waiting for a remote connection \nrequest.\nClient\nThe client starts the connection.\nThe client starts the connection.\nThe client starts the connection.\nConnection Establish\nIn TCP a connection must be established to start communicationHere is the \nstepsClient -> Srever:Broadcast ARP RequestThe Client must know the IP of the \nServer.The client send to all nodes in the network, an ARP request, asking about the\nMAC address which has this IP.Server -> Client:ARP ResponseThe Server Reply with its\nMAC addressClient -> Server:TCP SYN PacketThe Client send a tcp packet to the \nserver, with SYN Flag raised.Server -> Client:TCP SYN-ACK PacketThe Server send a \ntcp packet to the client, with the followingACK Flag high --> To Acknowledge the SYN\nRequestSYN Flag HighClient -> Server:TCP ACK PacketThe Client send a tcp packet to \nthe server, with ACK flag raised acknowledge the Server SYN\nIn TCP a connection must be established to start communication\nIn TCP a connection must be established to start communication\nHere is the stepsClient -> Srever:Broadcast ARP RequestThe Client must know the IP \nof the Server.The client send to all nodes in the network, an ARP request, asking \nabout the MAC address which has this IP.\nHere is the steps\nClient -> Srever:Broadcast ARP RequestThe Client must know the IP of the Server.The \nclient send to all nodes in the network, an ARP request, asking about the MAC \naddress which has this IP.\nClient -> Srever:Broadcast ARP Request\nThe Client must know the IP of the Server.\nThe Client must know the IP of the Server.\nThe client send to all nodes in the network, an ARP request, asking about the MAC \naddress which has this IP.\nThe client send to all nodes in the network, an ARP request, asking about the MAC \naddress which has this IP.\nServer -> Client:ARP ResponseThe Server Reply with its MAC addressClient -> \nServer:TCP SYN PacketThe Client send a tcp packet to the server, with SYN Flag \nraised.Server -> Client:TCP SYN-ACK PacketThe Server send a tcp packet to the \nclient, with the followingACK Flag high --> To Acknowledge the SYN RequestSYN Flag \nHighClient -> Server:TCP ACK PacketThe Client send a tcp packet to the server, with \nACK flag raised acknowledge the Server SYN\nServer -> Client:ARP Response\nThe Server Reply with its MAC address\nThe Server Reply with its MAC address\nThe Server Reply with its MAC address\nClient -> Server:TCP SYN PacketThe Client send a tcp packet to the server, with SYN \nFlag raised.\nClient -> Server:TCP SYN Packet\nThe Client send a tcp packet to the server, with SYN Flag raised.\nThe Client send a tcp packet to the server, with SYN Flag raised.\nServer -> Client:TCP SYN-ACK PacketThe Server send a tcp packet to the client, with \nthe followingACK Flag high --> To Acknowledge the SYN RequestSYN Flag High\nServer -> Client:TCP SYN-ACK Packet\nThe Server send a tcp packet to the client, with the followingACK Flag high --> To \nAcknowledge the SYN RequestSYN Flag High\nThe Server send a tcp packet to the client, with the following\nACK Flag high --> To Acknowledge the SYN Request\nACK Flag high --> To Acknowledge the SYN Request\nSYN Flag High\nSYN Flag High\nClient -> Server:TCP ACK PacketThe Client send a tcp packet to the server, with ACK \nflag raised acknowledge the Server SYN\nClient -> Server:TCP ACK Packet\nThe Client send a tcp packet to the server, with ACK flag raised acknowledge the \nServer SYN\nThe Client send a tcp packet to the server, with ACK flag raised acknowledge the \nServer SYN\nRe-transmission\nAfter Connection is established, the server and client can send and receive from \neach other, any byte that is sent from one point shall be ACKed by the other.\nIn case of data loss, the receiver does not ACK the lost data. Here, the Sender \nshall retransmit.\nRe-transmission Timeout\nThe sender waits for a time out to receive ACK for the sent data.If the timeout \nelapsed without ACK, Re-transmission is doneIf Timeout is too large:The \ncommunication will be slower when data is dropped.If the Timeout is too small:The \ntransmitter will make re-transmission without need.Hence, the timeout shall be \nchosen carefully\nThe sender waits for a time out to receive ACK for the sent data.If the timeout \nelapsed without ACK, Re-transmission is doneIf Timeout is too large:The \ncommunication will be slower when data is dropped.If the Timeout is too small:The \ntransmitter will make re-transmission without need.Hence, the timeout shall be \nchosen carefully\nThe sender waits for a time out to receive ACK for the sent data.\nThe sender waits for a time out to receive ACK for the sent data.\nIf the timeout elapsed without ACK, Re-transmission is done\nIf the timeout elapsed without ACK, Re-transmission is done\nIf Timeout is too large:The communication will be slower when data is dropped.\nIf Timeout is too large:\nThe communication will be slower when data is dropped.\nThe communication will be slower when data is dropped.\nIf the Timeout is too small:The transmitter will make re-transmission without need.\nIf the Timeout is too small:\nThe transmitter will make re-transmission without need.\nThe transmitter will make re-transmission without need.\nHence, the timeout shall be chosen carefully\nHence, the timeout shall be chosen carefully\nRe-transmission Mechanisms\nIn case of a timeout, the transmitter will do one of the following:Send all the \npackets since the dropped packet (Go back N)Send only the dropped packet. (Selective\nRepeat)\nIn case of a timeout, the transmitter will do one of the following:Send all the \npackets since the dropped packet (Go back N)Send only the dropped packet. (Selective\nRepeat)\nIn case of a timeout, the transmitter will do one of the following:Send all the \npackets since the dropped packet (Go back N)Send only the dropped packet. (Selective\nRepeat)\nIn case of a timeout, the transmitter will do one of the following:\nSend all the packets since the dropped packet (Go back N)\nSend all the packets since the dropped packet (Go back N)\nSend only the dropped packet. (Selective Repeat)\nSend only the dropped packet. (Selective Repeat)\nHereis so nice tool visualizing the effect of time out value, mechanism on the \nspeed.\nOther LLs about TCP\nMSS and Window Size\nMSS and Window Size\nZero Window Probing\nZero Window Probing\nAlsohereis the Wikipedia page for TCP, I find it so useful.", "type": "Document"}}