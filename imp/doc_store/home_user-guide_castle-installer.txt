{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "home_user-guide_castle-installer.txt"}, "page_content": "CASTLE Installer\nThe Castle Installer is a Java-based tool that allows users to configure, download, \nand install various tools and files as per their requirements. It uses a JSON \nconfiguration file to specify the tools, their source locations, destinations, and \nadditional installation or setup steps required.\nFiles and Components\nThe Castle Installer consists of the following files:\nCastle Installer Jar\nCastle Installer Jar\nconfig.jsonA configuration file that contains the tools to be downloaded and \ninstalled. It specifies details such as:Tool names.Download URLs.Installation \nlocations.Commands to execute.\nconfig.json\nA configuration file that contains the tools to be downloaded and installed. It \nspecifies details such as:Tool names.Download URLs.Installation locations.Commands \nto execute.\nA configuration file that contains the tools to be downloaded and installed. It \nspecifies details such as:\nTool names.\nTool names.\nDownload URLs.\nDownload URLs.\nInstallation locations.\nInstallation locations.\nCommands to execute.\nCommands to execute.\nThe configurations are dynamic and can be modified as needed using \nsupportedaction_type.\nJava 8 FolderA portable Java runtime environment (JRE) folder that is bundled with \nthe installer to ensure compatibility and avoid dependency issues.\nJava 8 Folder\nA portable Java runtime environment (JRE) folder that is bundled with the installer \nto ensure compatibility and avoid dependency issues.\nA portable Java runtime environment (JRE) folder that is bundled with the installer \nto ensure compatibility and avoid dependency issues.\nrun.cmd\nrun.cmd\nFeatures\n1. Configurable Installation and Downloads\nThe tool enablesdownloading and/or installingsoftware or tools using a pre-defined \nJSON configuration file. Each tool can be configured with:\nDownload source and method (e.g., URLs).\nDownload source and method (e.g., URLs).\nActions for installation, including copying files, setting environment variables, \nand executing commands.\nActions for installation, including copying files, setting environment variables, \nand executing commands.\n2. Actions: Gradle Properties\nInstalling bothgradle.propertiesandcacertsfiles to their respective target locations\nfor the user.\nInstalling bothgradle.propertiesandcacertsfiles to their respective target locations\nfor the user.\n3. Git Cloning\nThe installer provides the capability to clone Castle user projects.\nDefault Configuration Example\nTheconfig.jsonfile contains all the necessary details for tool configuration and \ninstallation. Below is an example:\n{\n\"global_config\": {\n\"cache_location\": {\n\"path\": \".\\\\Cache\"\n}\n},\n\"tools\": [\n{\n\"name\": \"Java\",\n\"actions\": {\n\"install\": [\n{\n\"action_type\": \"copy\",\n\"source\": {\n\"path\": \".\\\\java-8.275.1\"\n},\n\"destination\": {\n\"path\": \"{cache_location}\\\\..\\\\Java8\"\n}\n},\n{\n\"action_type\": \"add_env\",\n\"env\": {\n\"JAVA_HOME\": {\n\"value\": \"C:\\\\Java8\",\n\"override\": true\n}\n}\n},\n{\n\"action_type\": \"execute\",\n\"command\": \"{cache_location}\\\\..\\\\Java8\\\\bin\\\\java.exe\",\n\"args\": [\"-version\"]\n}\n]\n}\n},\n{\n\"name\": \"Git\",\n\"actions\": {\n\"download\": {\n\"source\": {\n\"path\": \n\"https://forge-nexus.vnet.valeo.com/nexus/repository/c5/com/valeo/castle5/git/2.39.2\n/git-2.39.2.zip\"\n},\n\"source_type\": \"url\",\n\"zipped\": true\n},\n\"install\": [\n{\n\"action_type\": \"copy\",\n\"source\": {\n\"path\": \"{cache_location}/git-2.39.2\"\n},\n\"destination\": {\n\"path\": \"C:\\\\Git\"\n}\n},\n{\n\"action_type\": \"execute\",\n\"command\": \"C:\\\\Git\\\\Git-2.39.2-64-bit.exe\",\n\"args\": [\"/SILENT\"]\n}\n]\n}\n},\n{\n\"name\": \"Eclipse\",\n\"actions\": {\n\"download\": {\n\"source\": {\n\"path\": \n\"https://forge-nexus.vnet.valeo.com/nexus/repository/c5/com/valeo/castle5/eclipse/22\n.12.0/eclipse-22.12.0-0.zip\"\n},\n\"source_type\": \"url\",\n\"zipped\": true\n},\n\"install\": [\n{\n\"action_type\": \"copy\",\n\"source\": {\n\"path\": \"{cache_location}/eclipse-22.12.0-0\"\n},\n\"destination\": {\n\"path\": \"C:\\\\Eclipse\"\n}\n}\n]\n}\n}\n]\n}\nConfiguration Details\nGlobal Config\nDefines global settings, the location for caching downloaded files.\nDefines global settings, the location for caching downloaded files.\nTools\nEach tool entry contains:name: Name of the tool (e.g.,Java,Git, \nEclipse).Actions:download: Specifies how to download the tool (if required).source: \nURL or file path.zipped: Whether the download is a compressed file.install: Steps \nfor installing the tool.Action Types:copy: Copies files to the target \nlocation.add_env: Adds or updates environment variables.execute: Executes a command \nwith optional arguments.\nEach tool entry contains:\nname: Name of the tool (e.g.,Java,Git, Eclipse).\nname: Name of the tool (e.g.,Java,Git, Eclipse).\nActions:download: Specifies how to download the tool (if required).source: URL or \nfile path.zipped: Whether the download is a compressed file.install: Steps for \ninstalling the tool.Action Types:copy: Copies files to the target location.add_env: \nAdds or updates environment variables.execute: Executes a command with optional \narguments.\nActions:\ndownload: Specifies how to download the tool (if required).source: URL or file \npath.zipped: Whether the download is a compressed file.\ndownload: Specifies how to download the tool (if required).\nsource: URL or file path.\nsource: URL or file path.\nzipped: Whether the download is a compressed file.\nzipped: Whether the download is a compressed file.\ninstall: Steps for installing the tool.Action Types:copy: Copies files to the target\nlocation.add_env: Adds or updates environment variables.execute: Executes a command \nwith optional arguments.\ninstall: Steps for installing the tool.\nAction Types:copy: Copies files to the target location.add_env: Adds or updates \nenvironment variables.execute: Executes a command with optional arguments.\nAction Types:\ncopy: Copies files to the target location.\ncopy: Copies files to the target location.\nadd_env: Adds or updates environment variables.\nadd_env: Adds or updates environment variables.\nexecute: Executes a command with optional arguments.\nexecute: Executes a command with optional arguments.\nExample: Installing Java\nThe Java installation performs the following steps:\nCopies thejavafolder to a new location (C:\\Java8).\nCopies thejavafolder to a new location (C:\\Java8).\nSets theJAVA_HOMEenvironment variable and override option.\nSets theJAVA_HOMEenvironment variable and override option.\nExecutes thejava.exe -versioncommand to verify installation.\nExecutes thejava.exe -versioncommand to verify installation.\nHow to Use\nStep 1: Edit or Validate theconfig.json\nEnsure that theconfig.jsonfile is correctly configured according to your \nrequirements. Specify the tools, their download sources, destinations, and any \nnecessary actions.\nStep 2: Run the Installer\nEnter your CoreALM username and password in the prompt.\nEnter your CoreALM username and password in the prompt.\n2.Log in to authenticate your session.\nStep 3: Use the Tool\nSelect a parent Target Directory for cloning projects.(Don't care if cloning isn't \nused)\nSelect a parent Target Directory for cloning projects.(Don't care if cloning isn't \nused)\nAfter selecting desired actions ->Run Selected\nAfter selecting desired actions ->Run Selected", "type": "Document"}}