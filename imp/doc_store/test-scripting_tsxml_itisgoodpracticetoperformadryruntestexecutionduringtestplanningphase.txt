{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_tsxml_itisgoodpracticetoperformadryruntestexecutionduringtestplanningphase.txt"}, "page_content": "It is good practice to perform a Dryrun Test Execution duringTestPlanning phase\nPost date: Jun 6, 2019 6:15:09 AM\nCase 1) Only Castle Libs were modified\n- Check the newly generated TsDb.jar is not throwing any Errors in the TestModels.\nNote:If SpecText and attributes were not modified/added, there is no need to \ngenerate the TsDb.jar.\n- If Errors were found on TestModels, fix them first and make them compatible with \nTsDb.jar.\n- Identify the TestModels which might have effected on modified Libs and update the \nTestModels accordingly.\n- Generate the .Tsxmls of effected/modified TestModels and perform a Dryrun Test \nExecution with CTE. Fix the Errors if caught during DryRun in TestPlanning phase \nitself instead of identifying and fixing them during Test Execution phase.\nCase 2)  Only TestModels were modified\n- Generate the .tsxmls of modified TestModels and make sure  Dryrun Test Execution \nwith CTE  is successful for the following use cases:\n2.1) When using DiscreteParameters in Library functions and the .Tsxmls have wrong \nparameter names defined.\n@SpecText(text = \"Set Simulation Header [signal] to value [value]\", type = \nSpecType.Action)\npublic void updateSimulationHeader(@ParamDiscrete(valid = \"Version\" + \",\" + \n\"TimeStamp\" + \",\" + \"CycleNumber\" + \",\"\n+ \"DrivingForward\" + \",\" + \"Valid\" + \",\" + \"NumObjects\" + \",\" + \"HostSpeed\" + \",\" + \n\"HostYawRate\" + \",\"\n+ \"DetectionRange\" + \",\" + \"MCC\", init = \"0\") String signal, double value)\n2.2) When using Scalar Parameters in Library functions and the .Tsxmls have out of \nrange values.\n@SpecText(text = \"Set Object [id] attribute [attribute] to [value]\", type = \nSpecType.Action)\npublic void setObjectAttribute(\n@ParamScalar(validMin = \"0\", validMax = \"63\", specific = \"0\", init = \"0\", increment \n= \"1\") Integer id,\nObjectAttribute attribute,\n@ParamScalar(validMin = \"-50000\", validMax = \"50000\", specific = \"0\", init = \"0\", \nincrement = \"1\") double value)\nCase 3)\nWhen both Case 1) and Case2) arises.", "type": "Document"}}