{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_external-tools-interfacing_robot-operating-system-ros_ros-delay-analysis.txt"}, "page_content": "ROS Delay Analysis\nIntro\nTo setup ROS as a simulation back end for CASTLE, a critical factor is the closed \nloop delay. This is a show stopper for any real HIL simulation if the delay exceeded\na certain threshold. This threshold is defined per application. The delay is \nmeasured from the ECU point of view; from HW to HW. Example, from a CAN message with\na request till the response CAN message with the simulated values.\nEnvironment Setup\nFor ROS as a dependancy, Ubuntu is used. Castle is java based and was easily ported.\nThe delay contributors are as:\nSeveral point to regard in this model:\nThe real ROS Simulation is modeled with zero delay. This is the best case, the real \nsimulation WILL have more delay according to its complexity, optimization, \n..etc.Variations of the non-real time blocks are expected to be much biggerCastle \ndriver delay depends on the network type, its utilization and other activated \nfirmware functionalities.Logs are savedhere\nThe real ROS Simulation is modeled with zero delay. This is the best case, the real \nsimulation WILL have more delay according to its complexity, optimization, ..etc.\nThe real ROS Simulation is modeled with zero delay. This is the best case, the real \nsimulation WILL have more delay according to its complexity, optimization, ..etc.\nVariations of the non-real time blocks are expected to be much bigger\nVariations of the non-real time blocks are expected to be much bigger\nCastle driver delay depends on the network type, its utilization and other activated\nfirmware functionalities.\nCastle driver delay depends on the network type, its utilization and other activated\nfirmware functionalities.\nLogs are savedhere\nLogs are savedhere\nNon Real Time Results\nWith zero delay simulation model, the delay of the non real time subsystem highly \ndepends on the OS. The OS is responsible to run its UDP stack and pass the data to \nthe python socket. On the other side, it send back the response data. Python as an \ninterpreted language should have negligible delay contribution.\nOS Level 3->6\nThe delay from [3] to [6] is measured using Canoe from a separate PC. All delays are\nmeasured in milliseconds. The results are as good as:\nApplication Level 4->5\nAt this step,Wiresharkwas used on the host PC to monitor incoming and outgoing \npackets.\nClosed Loop: Real Time Results\nThe real time part defines the interface and driver between the ECU and CASTLE. This\ninterface highly contributes to the overall closed loop delay.\nDelay at Ethernet Interface (2,7)\nDue to the fact that not all ECUs interfaces with ROS using CAN, we have two \nmeasurement points. The first shows the measurements from the ethernet closed loop \ninterface. Next section will show the complete loop including the CAN interface \ndelays.\nBased on Bare TCP Connection\nBased on ERPC Library (Embedded Remote Procedure)\nDelay at CAN Interface (1->8)\nUsing Canoe's Interactive generator to send CAN requests and tracing back the \nresponse. CAN in general is slow, but haslow latency. This is due to the fact that \nhigh priority frames may be transmitted instantaneously if the bus is free, and \n~100us (longest frame) if not.\nObsolete: Ethernet Reception Issue\nAlthough the Ethernet communication is handled by Castle, it's implemented as a non \nreal time low-priority service. This dramatically harm the latency of the overall \nsystem. Currently a new implementation is developed; NetConn. This fixed the \nEthernet Reception Issue reported prior May'17 Netconn updates\nWhen measuring from [2] to [7] from Castle firmware internals, the latency is \napparently too high when compared to the previous delay figures. Point [2] only \nconsumes 0.7 ms as measured from the firmware tracer (~0.5 ms without \ninstrumentation). The problem relies in the [7].\nand the delay figures from the CAN interface looked as:", "type": "Document"}}