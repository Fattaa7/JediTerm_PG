{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_networking-lin_testcaseadjustmentsfordifferentlindiagsessions.txt"}, "page_content": "Test case adjustments for different Lin Diag sessions\nPost date: Dec 11, 2018 1:40:19 PM\nFor projects working with Diagnostics, we need to command the ECU to enter different\nDiag modes(sessions). In this article we will walk through two Diag sessions \n(Default and programming / bootloader) and discuss best practices for test case \nimplementation and parameters tweaking.\nLin Diag Default session\nBefore we start scheduling, we should first define the schedule table to work on \n(Diag table)\nBefore we start scheduling, we should first define the schedule table to work on \n(Diag table)\nBefore we start scheduling, we should first define the schedule table to work on \n(Diag table)\nexu.modTS().objLinMaster().afcSetNextScheduleTable(EnmScheduleEvent.NEXT_FRAME, \nEnmScheduleTables.Diag_Table);Start frame generation.\nexu.modTS().objLinMaster().afcSetNextScheduleTable(EnmScheduleEvent.NEXT_FRAME, \nEnmScheduleTables.Diag_Table);\nStart frame generation.\nStart frame generation.\nexu.modTS().objLinMaster().afcStartScheduling(SendWakeUp);If SendWakeup is false, \nscheduling starts immediately. If SendWakeup is true, then first a wakeup signal is \nsent (250 \u00b5s long dominant signal). The start of the scheduling is delayed with \n[1,200] msec (default is 100 msec). This delay can be configured with the \n'SetStartSchedulingDelay' function.According to Lin (V2.2) specs, there should be a \n100 msec time delay between sending wake up and first frame transmission.Please \nrefer toLIN Protocol SpecificationV2.2. Pages 44 & 45 (document attached).\nexu.modTS().objLinMaster().afcStartScheduling(SendWakeUp);\nIf SendWakeup is false, scheduling starts immediately. If SendWakeup is true, then \nfirst a wakeup signal is sent (250 \u00b5s long dominant signal). The start of the \nscheduling is delayed with [1,200] msec (default is 100 msec). This delay can be \nconfigured with the 'SetStartSchedulingDelay' function.\nIf SendWakeup is false, scheduling starts immediately. If SendWakeup is true, then \nfirst a wakeup signal is sent (250 \u00b5s long dominant signal). The start of the \nscheduling is delayed with [1,200] msec (default is 100 msec). This delay can be \nconfigured with the 'SetStartSchedulingDelay' function.\nAccording to Lin (V2.2) specs, there should be a 100 msec time delay between sending\nwake up and first frame transmission.\nAccording to Lin (V2.2) specs, there should be a 100 msec time delay between sending\nwake up and first frame transmission.\nPlease refer toLIN Protocol SpecificationV2.2. Pages 44 & 45 (document attached).\nPlease refer toLIN Protocol SpecificationV2.2. Pages 44 & 45 (document attached).\nexu.pause(100);\nexu.pause(100);\nexu.modTS().objLinDiag().afcSend(diagData);Here, Diag master request frame will \nbeperiodicallytransmitted from Castle side to the ECU, holding the data defined in \nexu.modTS().objLinDiag().afcSend(diagData)Having the Diag frame being transmitted on\ncyclic basis is ok / required in Default Diag sessions.\nexu.modTS().objLinDiag().afcSend(diagData);\nHere, Diag master request frame will beperiodicallytransmitted from Castle side to \nthe ECU, holding the data defined in exu.modTS().objLinDiag().afcSend(diagData)\nHere, Diag master request frame will beperiodicallytransmitted from Castle side to \nthe ECU, holding the data defined in exu.modTS().objLinDiag().afcSend(diagData)\nHaving the Diag frame being transmitted on cyclic basis is ok / required in Default \nDiag sessions.\nHaving the Diag frame being transmitted on cyclic basis is ok / required in Default \nDiag sessions.\nLin Diag Programming (Bootloader) session\nUnlike Diag default session, master node is not allowed to send periodic frames in \nprogramming mode.\nUnlike Diag default session, master node is not allowed to send periodic frames in \nprogramming mode.\nUnlike Diag default session, master node is not allowed to send periodic frames in \nprogramming mode.\nexu.modTS().objLinMaster().afcStopScheduling(EnmScheduleEvent.NEXT_FRAME, true);then\nwe will just start scheduling for sending a Diag request once and stop it after \nthat.\nexu.modTS().objLinMaster().afcStopScheduling(EnmScheduleEvent.NEXT_FRAME, true);\nthen we will just start scheduling for sending a Diag request once and stop it after\nthat.\nthen we will just start scheduling for sending a Diag request once and stop it after\nthat.\nexu.modTS().objLinMaster().afcStartScheduling(true);\nexu.modTS().objLinMaster().afcStartScheduling(true);\nexu.pause(100);\nexu.pause(100);\nexu.modTS().objLinDiag().afcSend(\"10 02\");\nexu.modTS().objLinDiag().afcSend(\"10 02\");\nexu.pause(20);Here, we added a 20 msec delay before stopping the scheduler to make \nsure frame data is downloaded first on the bus.20 msec is the time window between \nDiag request frames as defined in the project LDF (project specific).\nexu.pause(20);\nHere, we added a 20 msec delay before stopping the scheduler to make sure frame data\nis downloaded first on the bus.\nHere, we added a 20 msec delay before stopping the scheduler to make sure frame data\nis downloaded first on the bus.\n20 msec is the time window between Diag request frames as defined in the project LDF\n(project specific).\n20 msec is the time window between Diag request frames as defined in the project LDF\n(project specific).\nexu.modTS().objLinMaster().afcStopScheduling(EnmScheduleEvent.NEXT_FRAME, \ntrue);Following is a Canoe trace of sending a single Lin Diagnostics frame :\nexu.modTS().objLinMaster().afcStopScheduling(EnmScheduleEvent.NEXT_FRAME, true);\nFollowing is a Canoe trace of sending a single Lin Diagnostics frame :\nFollowing is a Canoe trace of sending a single Lin Diagnostics frame :", "type": "Document"}}