{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_castleschoolminivideoseries_directvshilexecution.txt"}, "page_content": "Direct VS HIL Execution\nPost date: Jul 17, 2018 1:34:44 PM\nIn Castle we have 2 main modes to send the test case steps from the PC to  Castle \nDirect and Hil mode.\nHere is a quick reminder of the needed basics in each mode.\nDirect Mode and. Hil Mode are activated via Java annotations at class or method \nlevel.\nExample:\n@RunContextDirect\npublicclassFirstTestFlexrayextendsAMainTaskTS {\nor\n@RunContextHil\npublicclassFirstTestFlexrayextendsAMainTaskTS {\nHIL Mode:\nHil mode is real time mode as the execution of the test case steps depends on Castle\nreal time clock.\nOnly afc calls are allowed in Hil mode. To achieve real time execution, Castle FW \ndoesn't synchronous any execution steps with the PC.\nWe have two buffers to store the test case steps . The first one in the CTE side \nwhere the afc test steps are stored from the test case with their calculated \ncorresponding time to be executed (based on the pauses between afc steps calls). The\nsecond buffer is located in Castle FW, which is filled from the first buffer through\nthe PC-Com Ethernet.\nCastle FW begins to schedule the needed test steps (From the second buffer with no \ndependencies on PC) with their calculated corresponding time, so the Performace \nmonitor will be able to detect any occurred delay in starting a specific test step.\nPer the Previous Structure:\nPauses are implemented on the EXU clock, the test sequence is pre calculated.\nIn HIL mode the test sequence cannot access results from the DUT and react on it \ndirectly.\nSequences in HIL mode support the parallel execution of other HIL sequences.\nDirect Mode:\nDirect mode is non real time mode as the execution time of the test case steps is \ntotally depending on PC (non real time clock).\nBoth afc and sfc calls are allowed in direct mode.\nWe have No buffers in Direct mode. FW is directly receive the test steps  from CTE. \nIn this mode we have no pre calculated time to start the execution for each test \ncase step. The steps will be executed sequentially so there is no way to guarantee \nwhen a specific test step will be executed.\nIn case of using afc test case steps in direct mode, they will be received and \nexecuted one by one from CTE (each on in it\u2019s turn) and no synchronization will \nhappen between Castle FW and the PC based on the steps return results.\nFrom the CTE side, it will send a new step after receiving ack message  (From Castle\nFW) of the previous sent step.\nIn case of using sfc test case step in direct mode, After passing it from the PC to \nCastle the execution will be paused until Castle FW finish this sfc step and return \nback the result or fault message (defined in c5c) to the PC  (Sync with the PC). If \nCastle FW doesn\u2019t make the return message the CTE will wait for a timeout period \ndefined in c5c) then it will continue the execution.\nPer the Previous Structure:\nPauses are implemented on the PC clock, the test sequence just waits.\nIn direct mode the test sequence can access results from the DUT and react on it.", "type": "Document"}}