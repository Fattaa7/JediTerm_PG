{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_implementing-capture-feature-checklist.txt"}, "page_content": "Implementing capture feature checklist\nIn this article we will go through an incremental approach to implement the capture \n/ store feature in our project\nYou should have a look at thisarticlefor an overall view regarding the whole capture\n/ store process.\nYou should have a look at thisarticlefor an overall view regarding the whole capture\n/ store process.\nYou should have a look at thisarticlefor an overall view regarding the whole capture\n/ store process.\nWhere to start ?\nFirst, you have to check your project checklist to get the used color mapping scheme\n(RGB, YUV422, ....)Get inside the video in module .mpd file to check the \nC_M_AXIS_VIDEO_FORMAT parameter to make sure it matches the used color mapping \nformat.Assuming that you found the used color mapping scheme RGBStart from the \nschematic of the DSP to get the color components assignment of the DSP data out pins\n:For example, you may found the DSP output pin DOUT0 is mapped to R2 color \ncomponentYou should form an excel sheet to map the DSP outputs pins to the assigned \ncolor componentsThe captured data flow starts from the DSP, then enters the \nserializer to encode it in GMSL link, pass it to the deserializer, then ends its \njourney at the FPGA.Thistemplatewill help you do the (DSP - serializer - \ndeserializer - FPGA ) pin mapping in an organized way.The template was first used \ninBAIC_SVSproject and it helped in the debugging process of the capture feature when\nthe stored frames were corrupted.\nFirst, you have to check your project checklist to get the used color mapping scheme\n(RGB, YUV422, ....)\nFirst, you have to check your project checklist to get the used color mapping scheme\n(RGB, YUV422, ....)\nGet inside the video in module .mpd file to check the C_M_AXIS_VIDEO_FORMAT \nparameter to make sure it matches the used color mapping format.\nGet inside the video in module .mpd file to check the C_M_AXIS_VIDEO_FORMAT \nparameter to make sure it matches the used color mapping format.\nAssuming that you found the used color mapping scheme RGB\nAssuming that you found the used color mapping scheme RGB\nStart from the schematic of the DSP to get the color components assignment of the \nDSP data out pins :\nStart from the schematic of the DSP to get the color components assignment of the \nDSP data out pins :\nFor example, you may found the DSP output pin DOUT0 is mapped to R2 color component\nFor example, you may found the DSP output pin DOUT0 is mapped to R2 color component\nYou should form an excel sheet to map the DSP outputs pins to the assigned color \ncomponents\nYou should form an excel sheet to map the DSP outputs pins to the assigned color \ncomponents\nThe captured data flow starts from the DSP, then enters the serializer to encode it \nin GMSL link, pass it to the deserializer, then ends its journey at the FPGA.\nThe captured data flow starts from the DSP, then enters the serializer to encode it \nin GMSL link, pass it to the deserializer, then ends its journey at the FPGA.\nThistemplatewill help you do the (DSP - serializer - deserializer - FPGA ) pin \nmapping in an organized way.\nThistemplatewill help you do the (DSP - serializer - deserializer - FPGA ) pin \nmapping in an organized way.\nThe template was first used inBAIC_SVSproject and it helped in the debugging process\nof the capture feature when the stored frames were corrupted.\nThe template was first used inBAIC_SVSproject and it helped in the debugging process\nof the capture feature when the stored frames were corrupted.\nThe FPGA Side\nIn the .UCF file create a captured data vector and assign the capture FPGA pins in \nthe template to it.Add the following cores to your project .mhs file [just copy them\nfrom any cameras project like FCA, Volvo, Baic] :\nIn the .UCF file create a captured data vector and assign the capture FPGA pins in \nthe template to it.\nIn the .UCF file create a captured data vector and assign the capture FPGA pins in \nthe template to it.\nAdd the following cores to your project .mhs file [just copy them from any cameras \nproject like FCA, Volvo, Baic] :\nAdd the following cores to your project .mhs file [just copy them from any cameras \nproject like FCA, Volvo, Baic] :\nv_vid_in_axi4spll_modulevideo_test_srcaxi_vdmaaxi_gpio\nv_vid_in_axi4s\nv_vid_in_axi4s\npll_module\npll_module\nvideo_test_src\nvideo_test_src\naxi_vdma\naxi_vdma\naxi_gpio\naxi_gpio\nIn theaxi_s6_ddrxcore, append theaxi_vdmabus interface toS0_AXI_MASTERSAlso in \ntheaxi_intccore, append the interrupt outs2mm_intrfrom theaxi_vdmaScan all \nrepositoriesNavigate toSystem Assembly View>> pushGenerate Addressesbutton :\nIn theaxi_s6_ddrxcore, append theaxi_vdmabus interface toS0_AXI_MASTERS\nIn theaxi_s6_ddrxcore, append theaxi_vdmabus interface toS0_AXI_MASTERS\nAlso in theaxi_intccore, append the interrupt outs2mm_intrfrom theaxi_vdma\nAlso in theaxi_intccore, append the interrupt outs2mm_intrfrom theaxi_vdma\nScan all repositories\nScan all repositories\nNavigate toSystem Assembly View>> pushGenerate Addressesbutton :\nNavigate toSystem Assembly View>> pushGenerate Addressesbutton :\nNow you can go ahead and make a hardware build\nNow you can go ahead and make a hardware build\nNow you can go ahead and make a hardware build\nProject Configuration\nYou need to define some parameters at High level as configuration parameters \n[CFG]This parameters will be used then in FW  to configure some of its componentsAdd\nyour CFG parameters in your main C5C file as shown below :\nYou need to define some parameters at High level as configuration parameters [CFG]\nYou need to define some parameters at High level as configuration parameters [CFG]\nThis parameters will be used then in FW  to configure some of its components\nThis parameters will be used then in FW  to configure some of its components\nAdd your CFG parameters in your main C5C file as shown below :\nAdd your CFG parameters in your main C5C file as shown below :\n<Option Type=\"sysgen\" Name=\"Constants\">\n<Option Type=\"int\" Name=\"STREAM_NO_OF_FRAMES_PER_SECOND\"Value=\"30\"/>\n<Option Type=\"int\" Name=\"STREAM_START_OFFSET\"Value=\"0\"/>\n<Option Type=\"int\" Name=\"STREAM_NO_OF_CHANNELS_PER_PIXEL\"Value=\"3\"/>\n<Option Type=\"int\" Name=\"STREAM_NO_BITS_PER_CHANNEL\"Value=\"8\"/>\n<Option Type=\"int\" Name=\"STREAM_HORIZONTAL_RESOLUTION\"Value=\"768\"/>\n<Option Type=\"int\" Name=\"STREAM_VERTICAL_RESOLUTION\"Value=\"1024\"/>\n<Option Type=\"int\" Name=\"CAPTURE_NO_OF_CHANNELS_PER_PIXEL\"Value=\"3\"/>\n<Option Type=\"int\" Name=\"CAPTURE_NO_BITS_PER_CHANNEL\"Value=\"8\"/>\n<Option Type=\"int\" Name=\"CAPTURE_VALUES_PER_CHANNEL\"Value=\"256\"/>\n<Option Type=\"int\" Name=\"CAPTURE_HORIZONTAL_RESOLUTION\"Value=\"768\"/>\n<Option Type=\"int\" Name=\"CAPTURE_VERTICAL_RESOLUTION\"Value=\"1024\"/>\n</Option>\nRun SysGen , and navigate toMT_APIfolder you will find the following file generated \nhaving all the constants you defined above :\nRun SysGen , and navigate toMT_APIfolder you will find the following file generated \nhaving all the constants you defined above :\nInclude yourModule_consts.hinprj_features.hto use the CFG parameters , and this will\nreflect in your base project.\nInclude yourModule_consts.hinprj_features.hto use the CFG parameters , and this will\nreflect in your base project.\nInclude yourModule_consts.hinprj_features.hto use the CFG parameters , and this will\nreflect in your base project.\nIncluding FW capture modules (Cameras.c, .h)\nBSP from none to genericInclude the cameras features you need inprj_features.h\nBSP from none to generic\nBSP from none to generic\nInclude the cameras features you need inprj_features.h\nInclude the cameras features you need inprj_features.h\nFor the capture feature you will only need the following :\nFor the capture feature you will only need the following :\n#define FEATURE_CAM_V1\n#define FEATURE_CAM_RVC\n#define FEATURE_CAM_NO_STREAM\n#define FEATURE_CAM_NO_FAULTBOX\nAlso, you will need to include the generated constants in MT_API / module_consts.h  \n:\nAlso, you will need to include the generated constants in MT_API / module_consts.h  \n:\nAlso, you will need to include the generated constants in MT_API / module_consts.h  \n:\n#defineCAPParams_CamChannelsC5cModuleConst_CAPTURE_NO_OF_CHANNELS_PER_PIXEL\n#defineCAPParams_BitsPerChannelC5cModuleConst_CAPTURE_NO_BITS_PER_CHANNEL\n#defineCAPParams_ValsPerChannelC5cModuleConst_CAPTURE_VALUES_PER_CHANNEL\n#defineCAPParams_HorizontalSizeC5cModuleConst_CAPTURE_HORIZONTAL_RESOLUTION\n#defineCAPParams_VerticalSizeC5cModuleConst_CAPTURE_VERTICAL_RESOLUTION\n#define CAPParams_FPSC5cModuleConst_CAPTURE_FRAMES_PER_SECOND\nInclude Cameras.h in your main :\nInclude Cameras.h in your main :\n#include \"cam/cameras.h\"\nDetecting wrong color pin mapping\nLets say you tried to capture / store for the first frame and the image quality was \nnot as expected (corrupted or does not match the captured view).\nLets say you tried to capture / store for the first frame and the image quality was \nnot as expected (corrupted or does not match the captured view).\nLets say you tried to capture / store for the first frame and the image quality was \nnot as expected (corrupted or does not match the captured view).\nMost likely your color space or color pin mapping is not set correct.Please refer to\nthisarticlefor more relevant info about both issues.\nMost likely your color space or color pin mapping is not set correct.\nMost likely your color space or color pin mapping is not set correct.\nPlease refer to thisarticlefor more relevant info about both issues.\nPlease refer to thisarticlefor more relevant info about both issues.\nSolving the wrong color pin mapping incrementally\nFor RGB color space, we have 3 color components, each represented by 8 bits.Every 8 \nbits are mapped to 8 pins in the FPGA receiving parallel color data from the \ndeserializer.Our problem is that the pin mapping per color is not set correct, so we\nhave to try all combinations for mapping 8 bits to 8 pins resulting in fact(8) \ncombinations (40320).A better approach than trying all combinations sequentially is \ndone by most significant elimination.This resulted in reducing number of \ncombinations to only 40.\nFor RGB color space, we have 3 color components, each represented by 8 bits.\nFor RGB color space, we have 3 color components, each represented by 8 bits.\nEvery 8 bits are mapped to 8 pins in the FPGA receiving parallel color data from the\ndeserializer.\nEvery 8 bits are mapped to 8 pins in the FPGA receiving parallel color data from the\ndeserializer.\nOur problem is that the pin mapping per color is not set correct, so we have to try \nall combinations for mapping 8 bits to 8 pins resulting in fact(8) combinations \n(40320).\nOur problem is that the pin mapping per color is not set correct, so we have to try \nall combinations for mapping 8 bits to 8 pins resulting in fact(8) combinations \n(40320).\nA better approach than trying all combinations sequentially is done by most \nsignificant elimination.\nA better approach than trying all combinations sequentially is done by most \nsignificant elimination.\nThis resulted in reducing number of combinations to only 40.\nThis resulted in reducing number of combinations to only 40.\nMost significant elimination\nFirst, you have to choose an arbitrary pin per color to be your most significant and\nmake a captue / store trial.Now, we have 8 different possibilities with 8 stored \nframes from varying the MSB among 8 pins.Visually comparing the 8 frames, you can \ndescriminate the most likely correct frame from the 8, which mapps to the correct \nMSB pin.Repeating the past 3 steps on the remaining bits will guide you \nincrementally to setting the correct color pin mapping.Changing the color pin \nmapping can be done in either the HW layer by editting your UCF file or in Java \nlayer by the following method snippet :\nFirst, you have to choose an arbitrary pin per color to be your most significant and\nmake a captue / store trial.\nFirst, you have to choose an arbitrary pin per color to be your most significant and\nmake a captue / store trial.\nNow, we have 8 different possibilities with 8 stored frames from varying the MSB \namong 8 pins.\nNow, we have 8 different possibilities with 8 stored frames from varying the MSB \namong 8 pins.\nVisually comparing the 8 frames, you can descriminate the most likely correct frame \nfrom the 8, which mapps to the correct MSB pin.\nVisually comparing the 8 frames, you can descriminate the most likely correct frame \nfrom the 8, which mapps to the correct MSB pin.\nRepeating the past 3 steps on the remaining bits will guide you incrementally to \nsetting the correct color pin mapping.\nRepeating the past 3 steps on the remaining bits will guide you incrementally to \nsetting the correct color pin mapping.\nChanging the color pin mapping can be done in either the HW layer by editting your \nUCF file or in Java layer by the following method snippet :\nChanging the color pin mapping can be done in either the HW layer by editting your \nUCF file or in Java layer by the following method snippet :\nprivatestaticint Byte_Scramble(int colorByte){   int scrcolorByte=0;       \nscrcolorByte|= (colorByte&(0x1<<5))<<2;   scrcolorByte|= (colorByte&(0x1<<4))<<2;   \nscrcolorByte|= (colorByte&(0x1<<3))<<2;   scrcolorByte|= (colorByte&(0x1<<2))<<2;   \nscrcolorByte|= (colorByte&(0x1<<1))<<2;   scrcolorByte|= (colorByte&(0x1<<0))<<2;   \nscrcolorByte|= (colorByte&(0x1<<6))>>6;   scrcolorByte|= (colorByte&(0x1<<7))>>6;   \n  scrcolorByte &= 0x00FF;returnscrcolorByte;      }\nP.S. colorByte is our wrong 8 bit color component to be shifted, scrambled and \nstored in scrcolorByte\nP.S. colorByte is our wrong 8 bit color component to be shifted, scrambled and \nstored in scrcolorByte\nP.S. colorByte is our wrong 8 bit color component to be shifted, scrambled and \nstored in scrcolorByte", "type": "Document"}}