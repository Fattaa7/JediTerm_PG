{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_networking-can_best-practices_workingwithcandbcmultiplexedmessages.txt"}, "page_content": "Working with Can Dbc Multiplexed Messages\nPost date: Mar 11, 2019 10:56:01 AM\nMultiplexed Messages implemented in Castle Toolchain in the same way described in \nthe autosar but we added more friendly references in the java APIs to access dbc \nsimplified structure of signals and messages easily.\nSend Once Multiplexed Message\nHere's an example, Where the user can modify the desired signal, then update the \nswitch signal to it's switch signal then send the whole message once.\nexu.modMM().objComBp().objComCANoe_VS6().objSigSWA_10thdeg().afcSet(0);\nexu.modMM().objComBp().objComCANoe_VS6().objSwitchSignal().afcSet(18);\nexu.modMM().objComBp().objComCANoe_VS6().afcSendOnce();\nSend PerTimer Multiplexed Message\nHere's an example, Where the user can send the Multiplexed Message in total time \n160ms and each dynamic part is sent 40ms.\nThe user shall define the switch signal array first {1,2,4,9} then he shall the \ndefine the time weight for each switch signal group.\nexu.modTS().objComHs().objVEHCONFIG_400CH_AutoSAR().afcSetMuxConf(\nnew int[] {0x01, 0x02, 0x04, 0x09},\nnew int[] {40, 40, 40, 40}\n);\nexu.modTS().objComHs().objVEHCONFIG_400CH_AutoSAR().afcSendPerTimer(160);\nTest Signal Once or Multiple Times\nWhether you need to test it with one time \"Check\" or over time \"Test\", You can \nsimply test the signal regards how switch signal is received on the bus.\nexu.modMM().objComBp().objComVS6_CANoe().objSigOdol_x_cm().afcEqualsCheck(2);\nexu.modMM().objComBp().objComVS6_CANoe().objSigOdol_x_cm().afcEqualsTest(3);", "type": "Document"}}