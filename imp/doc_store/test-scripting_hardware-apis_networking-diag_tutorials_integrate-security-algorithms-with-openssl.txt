{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-scripting_hardware-apis_networking-diag_tutorials_integrate-security-algorithms-with-openssl.txt"}, "page_content": "Integrate Security Algorithms with OpenSSL\nOpenSSLis a cryptographic toolkit that consists of many different utilities.\nOpenSSLis a cryptographic toolkit that consists of many different utilities.\nIt could be considered as an open-source command line tool that is commonly used to \ngenerate private keys, create CSRs, install your SSL/TLS certificate, and identify \ncertificate information.\nIt could be considered as an open-source command line tool that is commonly used to \ngenerate private keys, create CSRs, install your SSL/TLS certificate, and identify \ncertificate information.\nOpenSSL library / binaries are already included / installed in MingW, hence could be\neasily accessed on Windows by Git bash interface.\nOpenSSL library / binaries are already included / installed in MingW, hence could be\neasily accessed on Windows by Git bash interface.\nAnywhere in your file system, Rclick -> Git Bash Here\nAnywhere in your file system, Rclick -> Git Bash Here\nTo get a brief idea of what is on offer, simply request help:\nTo get a brief idea of what is on offer, simply request help:\n$ openssl help\n$ openssl help\nThe first part of the help output lists all available utilities.\nThe first part of the help output lists all available utilities.\nTo get more information about a particular utility, use the man command followed by \nthe name of the utility.\nTo get more information about a particular utility, use the man command followed by \nthe name of the utility.\nFor example, man ciphers will give you detailed information on how cipher suites are\nconfigured.\nFor example, man ciphers will give you detailed information on how cipher suites are\nconfigured.\nHowever, man openssl-ciphers should also work:\nHowever, man openssl-ciphers should also work:\nStandard commands:\nStandard commands:\nWe could benefit from OpenSSL in integrating security access algorithms in Castle \nproject.\nWe could benefit from OpenSSL in integrating security access algorithms in Castle \nproject.\nThis way offers:More portability / resilience (no need for a new FW \nchange)Robustness (all security features are to be used off the shelf)Shorter \ndevelopment cycleAlso it is a solution to complex security algos that include heavy \nmathematical equations that we cannot realize on Microblaze.\nThis way offers:\nMore portability / resilience (no need for a new FW change)\nMore portability / resilience (no need for a new FW change)\nRobustness (all security features are to be used off the shelf)\nRobustness (all security features are to be used off the shelf)\nShorter development cycle\nShorter development cycle\nAlso it is a solution to complex security algos that include heavy mathematical \nequations that we cannot realize on Microblaze.\nAlso it is a solution to complex security algos that include heavy mathematical \nequations that we cannot realize on Microblaze.\nA use case for integrating security access algorithms using OpenSSL, is \n\"upa_nissan_sweet400\" project\nA use case for integrating security access algorithms using OpenSSL, is \n\"upa_nissan_sweet400\" project\nThe project is using RSA_OAEP Encryption Scheme / Security Access Algorithm with \nSHA256 Message Digest\nThe project is using RSA_OAEP Encryption Scheme / Security Access Algorithm with \nSHA256 Message Digest\nRSA with OAEP padding scheme is already supported in OpenSSL.\nRSA with OAEP padding scheme is already supported in OpenSSL.\nSHA256 message digest is included too\nSHA256 message digest is included too\nTo get a list of all supported message digest commands type \"dgst\" in an openssl \nsession\nTo get a list of all supported message digest commands type \"dgst\" in an openssl \nsession\n$openssl\n$openssl\n>dgst\n>dgst\nWe can Generate Private Key / Generate Encrypted Seeds / Decrypt Seeds / Generate \nSignature with a couple of commands to OpenSSL utils.\nWe can Generate Private Key / Generate Encrypted Seeds / Decrypt Seeds / Generate \nSignature with a couple of commands to OpenSSL utils.\nThe following example Encrypts a message embedded in a file \"Original_Message.bin\" \nusing RSA-OAEP then Decrypts it again to add a signature on the final decoded \nmessage:\nThe following example Encrypts a message embedded in a file \"Original_Message.bin\" \nusing RSA-OAEP then Decrypts it again to add a signature on the final decoded \nmessage:\nEncryption command:$ openssl pkeyutl -in Original_Message.bin -inkey Public.key \n-encrypt -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -out \nencrypted_seed.bin\nEncryption command:\n$ openssl pkeyutl -in Original_Message.bin -inkey Public.key -encrypt -pkeyopt \nrsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -out encrypted_seed.bin\n$ openssl pkeyutl -in Original_Message.bin -inkey Public.key -encrypt -pkeyopt \nrsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -out encrypted_seed.bin\nDecryption Command:$ openssl pkeyutl -in encrypted_seed.bin -inkey Public.key \n-decrypt -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -out \nOriginal-message.bin\nDecryption Command:\n$ openssl pkeyutl -in encrypted_seed.bin -inkey Public.key -decrypt -pkeyopt \nrsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -out Original-message.bin\n$ openssl pkeyutl -in encrypted_seed.bin -inkey Public.key -decrypt -pkeyopt \nrsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -out Original-message.bin\nSignature Generation:$ openssl dgst -sha256 -sigopt rsa_padding_mode:pss -sigopt \nrsa_pss_saltlen:32 -sign Public.key -out test.sig Original_Message.bin\nSignature Generation:\n$ openssl dgst -sha256 -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:32 -sign\nPublic.key -out test.sig Original_Message.bin\n$ openssl dgst -sha256 -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:32 -sign\nPublic.key -out test.sig Original_Message.bin\nAn important note here is that OpenSSL only accepts input binary files.\nAn important note here is that OpenSSL only accepts input binary files.\nYou can dump any .txt file in a .bin by few simple steps.Using a third party Hex \nEditor program (HexEditor)File >> Import >> Import Hex-ASCIIFile >> Export >> Export\nBinary Data\nYou can dump any .txt file in a .bin by few simple steps.\nUsing a third party Hex Editor program (HexEditor)\nUsing a third party Hex Editor program (HexEditor)\nFile >> Import >> Import Hex-ASCII\nFile >> Import >> Import Hex-ASCII\nFile >> Export >> Export Binary Data\nFile >> Export >> Export Binary Data\nThis could also be realized in Java by the following simple steps:Create an output \nfile stream (binary file):fileOutputStream = new \nFileOutputStream(System.getProperty(\"user.dir\") + \n\"\\\\prj\\\\src\\\\prj\\\\lib\\\\file.bin\");Write arbitrary data to \nfile:fileOutputStream.write(cypherText[i]);\nThis could also be realized in Java by the following simple steps:\nCreate an output file stream (binary file):fileOutputStream = new \nFileOutputStream(System.getProperty(\"user.dir\") + \"\\\\prj\\\\src\\\\prj\\\\lib\\\\file.bin\");\nCreate an output file stream (binary file):\nfileOutputStream = new FileOutputStream(System.getProperty(\"user.dir\") + \n\"\\\\prj\\\\src\\\\prj\\\\lib\\\\file.bin\");\nfileOutputStream = new FileOutputStream(System.getProperty(\"user.dir\") + \n\"\\\\prj\\\\src\\\\prj\\\\lib\\\\file.bin\");\nWrite arbitrary data to file:fileOutputStream.write(cypherText[i]);\nWrite arbitrary data to file:\nfileOutputStream.write(cypherText[i]);\nfileOutputStream.write(cypherText[i]);", "type": "Document"}}