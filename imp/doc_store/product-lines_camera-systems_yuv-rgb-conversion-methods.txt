{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "product-lines_camera-systems_yuv-rgb-conversion-methods.txt"}, "page_content": "YUV RGB Conversion Methods\nYUV4_2_2 to RGB conversion operation used to be performed in Java layer within test \ncases.Conversion method implemented the following equations :R = (1.164*(Y)  + \n1.793*(V-128))G = (1.164*(Y) - 0.213*(U-128) - 0.533*(V-128))B = (1.164*(Y)  + \n2.112*(U-128))This introduced latency in the runtime performance of Store Frame test\ncases as the multiplication operation is performed millions of times.The first \nattempt to solve this issue was to make the conversion in FW instead.Using all \nMicroblaze HW / SW optimization options, YUV_RGB conversion time reached ~13 msec \nfor 1920x720 resolutionApproximating floating point mult. operations to closest \nfixed point enhanced the performance more.1.164 approx. to 1.125  = Y + Y / 8 = Y + \nY >> 30.213 approx. to .25      = U / 4 = U >> 22.112 approx. to 2.125  = U + U + U \n>> 3 and so on..This decreased FW conversion to ~ 1 second for 1920x720 \nresolution.But this was still huge latency in Store Frame test case.Hence, a HW \nsolution was developed to accelerate color map conversion and make it performed \nonline.The HW solution is deployed in \"castle_v_vid_in_axi4s_v1_00_a\" video \ncore.Color map conversion is performed online on a pixel basis.Where every pixel is \nconverted from YUV to RGB after being received from deserializer and prior to saving\nin Video In FIFO.This removed the conversion latency in FW and CTE Java layers.\nYUV4_2_2 to RGB conversion operation used to be performed in Java layer within test \ncases.\nYUV4_2_2 to RGB conversion operation used to be performed in Java layer within test \ncases.\nConversion method implemented the following equations :R = (1.164*(Y)  + \n1.793*(V-128))G = (1.164*(Y) - 0.213*(U-128) - 0.533*(V-128))B = (1.164*(Y)  + \n2.112*(U-128))\nConversion method implemented the following equations :\nR = (1.164*(Y)  + 1.793*(V-128))\nR = (1.164*(Y)  + 1.793*(V-128))\nG = (1.164*(Y) - 0.213*(U-128) - 0.533*(V-128))\nG = (1.164*(Y) - 0.213*(U-128) - 0.533*(V-128))\nB = (1.164*(Y)  + 2.112*(U-128))\nB = (1.164*(Y)  + 2.112*(U-128))\nThis introduced latency in the runtime performance of Store Frame test cases as the \nmultiplication operation is performed millions of times.\nThis introduced latency in the runtime performance of Store Frame test cases as the \nmultiplication operation is performed millions of times.\nThe first attempt to solve this issue was to make the conversion in FW instead.\nThe first attempt to solve this issue was to make the conversion in FW instead.\nUsing all Microblaze HW / SW optimization options, YUV_RGB conversion time reached \n~13 msec for 1920x720 resolution\nUsing all Microblaze HW / SW optimization options, YUV_RGB conversion time reached \n~13 msec for 1920x720 resolution\nApproximating floating point mult. operations to closest fixed point enhanced the \nperformance more.\nApproximating floating point mult. operations to closest fixed point enhanced the \nperformance more.\n1.164 approx. to 1.125  = Y + Y / 8 = Y + Y >> 3\n1.164 approx. to 1.125  = Y + Y / 8 = Y + Y >> 3\n0.213 approx. to .25      = U / 4 = U >> 2\n0.213 approx. to .25      = U / 4 = U >> 2\n2.112 approx. to 2.125  = U + U + U >> 3 and so on..\n2.112 approx. to 2.125  = U + U + U >> 3 and so on..\nThis decreased FW conversion to ~ 1 second for 1920x720 resolution.\nThis decreased FW conversion to ~ 1 second for 1920x720 resolution.\nBut this was still huge latency in Store Frame test case.\nBut this was still huge latency in Store Frame test case.\nHence, a HW solution was developed to accelerate color map conversion and make it \nperformed online.\nHence, a HW solution was developed to accelerate color map conversion and make it \nperformed online.\nThe HW solution is deployed in \"castle_v_vid_in_axi4s_v1_00_a\" video core.\nThe HW solution is deployed in \"castle_v_vid_in_axi4s_v1_00_a\" video core.\nColor map conversion is performed online on a pixel basis.\nColor map conversion is performed online on a pixel basis.\nWhere every pixel is converted from YUV to RGB after being received from \ndeserializer and prior to saving in Video In FIFO.\nWhere every pixel is converted from YUV to RGB after being received from \ndeserializer and prior to saving in Video In FIFO.\nThis removed the conversion latency in FW and CTE Java layers.\nThis removed the conversion latency in FW and CTE Java layers.\nValidation Results :Following frames were obtained from the three conversion manners\n(Java, FW, HW) :\nValidation Results :\nFollowing frames were obtained from the three conversion manners (Java, FW, HW) :\nFollowing frames were obtained from the three conversion manners (Java, FW, HW) :\nJava :\nJava :\nFW :\nFW :\nFW :\nHW :\nHW :\nHW :\nAll of the three results are visually accepted.Java version is the most accurate one\nfor sure, but this comes at the price of performance.The HW solution is an \napproximated version, but it presents the best performance of the three.\nAll of the three results are visually accepted.\nAll of the three results are visually accepted.\nJava version is the most accurate one for sure, but this comes at the price of \nperformance.\nJava version is the most accurate one for sure, but this comes at the price of \nperformance.\nThe HW solution is an approximated version, but it presents the best performance of \nthe three.\nThe HW solution is an approximated version, but it presents the best performance of \nthe three.", "type": "Document"}}