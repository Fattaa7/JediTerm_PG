{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "general-topics_mipi-csi-2_mipi-protocols_mipi-csi-2.txt"}, "page_content": "MIPI CSI-2 (1 of 2)\nOverview of MIPI CSI-2 (Camera Serial Interface)\nThe MIPI Alliance\u2019s Camera Specifications define the interface between the camera or\nmultiple cameras and the application processor or image signal processor (ISP) in a \nmobile device.It defines standard data transmission and control interfaces between \ntransmitter (Image / Video Provider) and receiver (Image / Video Sink).Data \ntransmission interface (referred as CSI-2) is unidirectional differential serial \ninterface with data and clock signals;The physical layer of this interface is the \nMIPI Alliance Specification for D-PHY.The following figure illustrates connections \nbetween CSI-2 transmitter and receiver, which typically are a camera module and a \nreceiver module:\nThe MIPI Alliance\u2019s Camera Specifications define the interface between the camera or\nmultiple cameras and the application processor or image signal processor (ISP) in a \nmobile device.\nThe MIPI Alliance\u2019s Camera Specifications define the interface between the camera or\nmultiple cameras and the application processor or image signal processor (ISP) in a \nmobile device.\nIt defines standard data transmission and control interfaces between transmitter \n(Image / Video Provider) and receiver (Image / Video Sink).\nIt defines standard data transmission and control interfaces between transmitter \n(Image / Video Provider) and receiver (Image / Video Sink).\nData transmission interface (referred as CSI-2) is unidirectional differential \nserial interface with data and clock signals;\nData transmission interface (referred as CSI-2) is unidirectional differential \nserial interface with data and clock signals;\nThe physical layer of this interface is the MIPI Alliance Specification for D-PHY.\nThe physical layer of this interface is the MIPI Alliance Specification for D-PHY.\nThe following figure illustrates connections between CSI-2 transmitter and receiver,\nwhich typically are a camera module and a receiver module:\nThe following figure illustrates connections between CSI-2 transmitter and receiver,\nwhich typically are a camera module and a receiver module:\nThe control interface (referred as CCI) is a bi-directional control interface \ncompatible with I2C standard.\nThe control interface (referred as CCI) is a bi-directional control interface \ncompatible with I2C standard.\nThe control interface (referred as CCI) is a bi-directional control interface \ncompatible with I2C standard.\nThe control interface (referred as CCI) is a bi-directional control interface \ncompatible with I2C standard.\nCSI-2 Layer Definitions\nThe following figure defines the conceptual layer structure used in CSI-2:\nThe following figure defines the conceptual layer structure used in CSI-2:\nThe following figure defines the conceptual layer structure used in CSI-2:\nThe layers can be characterized as follows:\nThe layers can be characterized as follows:\nThe layers can be characterized as follows:\n1  PHY Layer:\nThe PHY Layer specifies the transmission medium (electrical conductors), the \ninput/output circuitry and the clocking mechanism that captures \u201cones\u201d and \u201czeroes\u201d \nfrom the serial bit stream.This part of the specification documents the \ncharacteristics of the transmission medium, electrical parameters for signaling and \nthe timing relationship between clock and data Lanes.\nThe PHY Layer specifies the transmission medium (electrical conductors), the \ninput/output circuitry and the clocking mechanism that captures \u201cones\u201d and \u201czeroes\u201d \nfrom the serial bit stream.\nThe PHY Layer specifies the transmission medium (electrical conductors), the \ninput/output circuitry and the clocking mechanism that captures \u201cones\u201d and \u201czeroes\u201d \nfrom the serial bit stream.\nThis part of the specification documents the characteristics of the transmission \nmedium, electrical parameters for signaling and the timing relationship between \nclock and data Lanes.\nThis part of the specification documents the characteristics of the transmission \nmedium, electrical parameters for signaling and the timing relationship between \nclock and data Lanes.\nThe physical layer for a CSI-2 implementation is composed of between one and four \nunidirectional data Lanes and one clock Lane.All CSI-2 transmitters and receivers \nshall support continuous clock behavior on the Clock Lane, and optionally may \nsupport non-continuous clock behavior.For continuous clock behavior the Clock Lane \nremains in high-speed mode generating active clock signals between the transmission \nof data packets.For non-continuous clock behavior the Clock Lane enters the LP-11 \nstate between the transmission of data packets.The minimum physical layer \nrequirement for a CSI-2 transmitter isData Lane Module: Unidirectional master, \nHS-TX, LP-TX and a CIL-MFEN functionClock Lane Module: Unidirectional master, HS-TX,\nLP-TX and a CIL-MCNN functionThe minimum physical layer requirement for a CSI-2 \nreceiver isData Lane Module: Unidirectional slave, HS-RX, LP-RX, and a CIL-SFEN \nfunctionClock Lane Module: Unidirectional slave, HS-RX, LP-RX, and a CIL-SCNN \nfunction\nThe physical layer for a CSI-2 implementation is composed of between one and four \nunidirectional data Lanes and one clock Lane.\nAll CSI-2 transmitters and receivers shall support continuous clock behavior on the \nClock Lane, and optionally may support non-continuous clock behavior.\nAll CSI-2 transmitters and receivers shall support continuous clock behavior on the \nClock Lane, and optionally may support non-continuous clock behavior.\nFor continuous clock behavior the Clock Lane remains in high-speed mode generating \nactive clock signals between the transmission of data packets.\nFor continuous clock behavior the Clock Lane remains in high-speed mode generating \nactive clock signals between the transmission of data packets.\nFor non-continuous clock behavior the Clock Lane enters the LP-11 state between the \ntransmission of data packets.\nFor non-continuous clock behavior the Clock Lane enters the LP-11 state between the \ntransmission of data packets.\nThe minimum physical layer requirement for a CSI-2 transmitter isData Lane Module: \nUnidirectional master, HS-TX, LP-TX and a CIL-MFEN functionClock Lane Module: \nUnidirectional master, HS-TX, LP-TX and a CIL-MCNN function\nThe minimum physical layer requirement for a CSI-2 transmitter is\nData Lane Module: Unidirectional master, HS-TX, LP-TX and a CIL-MFEN function\nData Lane Module: Unidirectional master, HS-TX, LP-TX and a CIL-MFEN function\nClock Lane Module: Unidirectional master, HS-TX, LP-TX and a CIL-MCNN function\nClock Lane Module: Unidirectional master, HS-TX, LP-TX and a CIL-MCNN function\nThe minimum physical layer requirement for a CSI-2 receiver isData Lane Module: \nUnidirectional slave, HS-RX, LP-RX, and a CIL-SFEN functionClock Lane Module: \nUnidirectional slave, HS-RX, LP-RX, and a CIL-SCNN function\nThe minimum physical layer requirement for a CSI-2 receiver is\nData Lane Module: Unidirectional slave, HS-RX, LP-RX, and a CIL-SFEN function\nData Lane Module: Unidirectional slave, HS-RX, LP-RX, and a CIL-SFEN function\nClock Lane Module: Unidirectional slave, HS-RX, LP-RX, and a CIL-SCNN function\nClock Lane Module: Unidirectional slave, HS-RX, LP-RX, and a CIL-SCNN function\n2   Protocol Layers:\nThe Protocol layer is composed of several layers, each with distinct \nresponsibilities.The CSI-2 protocol enables multiple data streams using a single \ninterface on the host processor.The Protocol layer specifies how multiple data \nstreams may be tagged and interleaved so each data stream can be properly \nreconstructed.\nThe Protocol layer is composed of several layers, each with distinct \nresponsibilities.\nThe Protocol layer is composed of several layers, each with distinct \nresponsibilities.\nThe CSI-2 protocol enables multiple data streams using a single interface on the \nhost processor.\nThe CSI-2 protocol enables multiple data streams using a single interface on the \nhost processor.\nThe Protocol layer specifies how multiple data streams may be tagged and interleaved\nso each data stream can be properly reconstructed.\nThe Protocol layer specifies how multiple data streams may be tagged and interleaved\nso each data stream can be properly reconstructed.\n2.1   Pixel/Byte Packing/Unpacking Layer:\nThe CSI-2 supports image applications with varying pixel formats from six to \ntwenty-four bits per pixels.In the transmitter this layer packs pixels from the \nApplication layer into bytes before sending the data to the Low Level Protocol \nlayer.In the receiver this layer unpacks bytes from the Low Level Protocol layer \ninto pixels before sending the data to the Application layer.Eight bits per pixel \ndata is transferred unchanged by this layer.\nThe CSI-2 supports image applications with varying pixel formats from six to \ntwenty-four bits per pixels.\nThe CSI-2 supports image applications with varying pixel formats from six to \ntwenty-four bits per pixels.\nIn the transmitter this layer packs pixels from the Application layer into bytes \nbefore sending the data to the Low Level Protocol layer.\nIn the transmitter this layer packs pixels from the Application layer into bytes \nbefore sending the data to the Low Level Protocol layer.\nIn the receiver this layer unpacks bytes from the Low Level Protocol layer into \npixels before sending the data to the Application layer.\nIn the receiver this layer unpacks bytes from the Low Level Protocol layer into \npixels before sending the data to the Application layer.\nEight bits per pixel data is transferred unchanged by this layer.\nEight bits per pixel data is transferred unchanged by this layer.\n2.2   Low Level Protocol:\nThe Low Level Protocol (LLP) includes the means of establishing bit level and \nbyte-level synchronization for serial data transferred between SoT (Start of \nTransmission) and EoT (End of Transmission) events and for passing data to the next \nlayer.The minimum data granularity of the LLP is one byte.The LLP also includes \nassignment of bit-value interpretation within the byte, i.e. the \u201cEndian\u201d \nassignment.\nThe Low Level Protocol (LLP) includes the means of establishing bit level and \nbyte-level synchronization for serial data transferred between SoT (Start of \nTransmission) and EoT (End of Transmission) events and for passing data to the next \nlayer.\nThe Low Level Protocol (LLP) includes the means of establishing bit level and \nbyte-level synchronization for serial data transferred between SoT (Start of \nTransmission) and EoT (End of Transmission) events and for passing data to the next \nlayer.\nThe minimum data granularity of the LLP is one byte.\nThe minimum data granularity of the LLP is one byte.\nThe LLP also includes assignment of bit-value interpretation within the byte, i.e. \nthe \u201cEndian\u201d assignment.\nThe LLP also includes assignment of bit-value interpretation within the byte, i.e. \nthe \u201cEndian\u201d assignment.\n2.3   Lane Management:\nCSI-2 is Lane-scalable for increased performance.The number of data Lanes may be \none, two, three or four depending on the bandwidth requirements of the \napplication.The transmitting side of the interface distributes (\u201cdistributor\u201d \nfunction) the outgoing data stream to one or more Lanes.On the receiving side, the \ninterface collects bytes from the Lanes and merges (\u201cmerger\u201d function) them together\ninto a recombined data stream that restores the original stream sequence.\nCSI-2 is Lane-scalable for increased performance.\nCSI-2 is Lane-scalable for increased performance.\nThe number of data Lanes may be one, two, three or four depending on the bandwidth \nrequirements of the application.\nThe number of data Lanes may be one, two, three or four depending on the bandwidth \nrequirements of the application.\nThe transmitting side of the interface distributes (\u201cdistributor\u201d function) the \noutgoing data stream to one or more Lanes.\nThe transmitting side of the interface distributes (\u201cdistributor\u201d function) the \noutgoing data stream to one or more Lanes.\nOn the receiving side, the interface collects bytes from the Lanes and merges \n(\u201cmerger\u201d function) them together into a recombined data stream that restores the \noriginal stream sequence.\nOn the receiving side, the interface collects bytes from the Lanes and merges \n(\u201cmerger\u201d function) them together into a recombined data stream that restores the \noriginal stream sequence.\n2.3.1   Multi-Lane Distribution and Merging\nCSI-2 is a Lane-scalable specification.Applications requiring more bandwidth than \nthat provided by one data Lane, or those trying to avoid high clock rates, can \nexpand the data path to two, three, or four Lanes wide and obtain approximately \nlinear increases in peak bus bandwidth.The mapping between data at higher layers and\nthe serial bit stream is explicitly defined to ensure compatibility between host \nprocessors and peripherals that make use of multiple data Lanes.Conceptually, \nbetween the PHY and higher functional layers is a layer that handles multi-Lane \nconfigurations.In the transmitter, the layer distributes a sequence of packet bytes \nacross N Lanes, where each Lane is an independent unit of physical-layer logic \n(serializers, etc.) and transmission circuitry.\nCSI-2 is a Lane-scalable specification.\nCSI-2 is a Lane-scalable specification.\nApplications requiring more bandwidth than that provided by one data Lane, or those \ntrying to avoid high clock rates, can expand the data path to two, three, or four \nLanes wide and obtain approximately linear increases in peak bus bandwidth.\nApplications requiring more bandwidth than that provided by one data Lane, or those \ntrying to avoid high clock rates, can expand the data path to two, three, or four \nLanes wide and obtain approximately linear increases in peak bus bandwidth.\nThe mapping between data at higher layers and the serial bit stream is explicitly \ndefined to ensure compatibility between host processors and peripherals that make \nuse of multiple data Lanes.\nThe mapping between data at higher layers and the serial bit stream is explicitly \ndefined to ensure compatibility between host processors and peripherals that make \nuse of multiple data Lanes.\nConceptually, between the PHY and higher functional layers is a layer that handles \nmulti-Lane configurations.\nConceptually, between the PHY and higher functional layers is a layer that handles \nmulti-Lane configurations.\nIn the transmitter, the layer distributes a sequence of packet bytes across N Lanes,\nwhere each Lane is an independent unit of physical-layer logic (serializers, etc.) \nand transmission circuitry.\nIn the transmitter, the layer distributes a sequence of packet bytes across N Lanes,\nwhere each Lane is an independent unit of physical-layer logic (serializers, etc.) \nand transmission circuitry.\nIn the receiver, it collects incoming bytes from N Lanes and consolidates (merges) \nthem into complete packets to pass into the packet decomposer.\nIn the receiver, it collects incoming bytes from N Lanes and consolidates (merges) \nthem into complete packets to pass into the packet decomposer.\nIn the receiver, it collects incoming bytes from N Lanes and consolidates (merges) \nthem into complete packets to pass into the packet decomposer.\nThe Lane distributor takes a transmission of arbitrary byte length, buffers up N \nbytes (where N = number of Lanes), and then sends groups of N bytes in parallel \nacross N Lanes.\nThe Lane distributor takes a transmission of arbitrary byte length, buffers up N \nbytes (where N = number of Lanes), and then sends groups of N bytes in parallel \nacross N Lanes.\nThe Lane distributor takes a transmission of arbitrary byte length, buffers up N \nbytes (where N = number of Lanes), and then sends groups of N bytes in parallel \nacross N Lanes.\nBefore sending data, all Lanes perform the SoT sequence in parallel to indicate to \ntheir corresponding receiving units that the first byte of a packet is \nbeginning.After SoT, the Lanes send groups of successive bytes from the first packet\nin parallel, following a round-robin process.Each D-PHY data Lane operates \nautonomously.Although multiple Lanes all start simultaneously with parallel \u201cstart \npacket\u201d codes, they may complete the transaction at different times, sending \u201cend \npacket\u201d codes one cycle (byte) apart.The N PHYs on the receiving end of the link \ncollect bytes in parallel, and feed them into the Lane-merging layer.This \nreconstitutes the original sequence of bytes in the transmission, which can then be \npartitioned into individual packets for the packet decoder layer\nBefore sending data, all Lanes perform the SoT sequence in parallel to indicate to \ntheir corresponding receiving units that the first byte of a packet is beginning.\nAfter SoT, the Lanes send groups of successive bytes from the first packet in \nparallel, following a round-robin process.\nAfter SoT, the Lanes send groups of successive bytes from the first packet in \nparallel, following a round-robin process.\nEach D-PHY data Lane operates autonomously.\nEach D-PHY data Lane operates autonomously.\nAlthough multiple Lanes all start simultaneously with parallel \u201cstart packet\u201d codes,\nthey may complete the transaction at different times, sending \u201cend packet\u201d codes one\ncycle (byte) apart.\nAlthough multiple Lanes all start simultaneously with parallel \u201cstart packet\u201d codes,\nthey may complete the transaction at different times, sending \u201cend packet\u201d codes one\ncycle (byte) apart.\nThe N PHYs on the receiving end of the link collect bytes in parallel, and feed them\ninto the Lane-merging layer.\nThe N PHYs on the receiving end of the link collect bytes in parallel, and feed them\ninto the Lane-merging layer.\nThis reconstitutes the original sequence of bytes in the transmission, which can \nthen be partitioned into individual packets for the packet decoder layer\nThis reconstitutes the original sequence of bytes in the transmission, which can \nthen be partitioned into individual packets for the packet decoder layer\n2.3.2  Multi-Lane Interoperability\nThe Lane distribution and merging layers shall be reconfigurable via the Camera \nControl Interface when more than one data Lane is used.An \"N\" data Lane receiver \nshall be connected with an \"M\" data Lane transmitter, by CCI configuration of the \nLane distribution and merging layers within the CSI-2 transmitter and receiver when \nmore than one data Lane is used.Thus, a receiver with four data Lanes shall work \nwith transmitters with one, two, three or four data Lanes.Likewise, a transmitter \nwith four data Lanes shall work with receivers with four or fewer data \nLanes.Transmitter Lanes 1 to M shall be connected to the receiver Lanes 1 to M.If \nM<=N then there is no loss of performance \u2013 the receiver has sufficient data Lanes \nto match the transmitter.If M> N then there may be a loss of performance (e.g. frame\nrate) as the receiver has fewer data Lanes than the transmitter.One Lane Transmitter\nand Four Lane Receiver Example:\nThe Lane distribution and merging layers shall be reconfigurable via the Camera \nControl Interface when more than one data Lane is used.\nThe Lane distribution and merging layers shall be reconfigurable via the Camera \nControl Interface when more than one data Lane is used.\nAn \"N\" data Lane receiver shall be connected with an \"M\" data Lane transmitter, by \nCCI configuration of the Lane distribution and merging layers within the CSI-2 \ntransmitter and receiver when more than one data Lane is used.\nAn \"N\" data Lane receiver shall be connected with an \"M\" data Lane transmitter, by \nCCI configuration of the Lane distribution and merging layers within the CSI-2 \ntransmitter and receiver when more than one data Lane is used.\nThus, a receiver with four data Lanes shall work with transmitters with one, two, \nthree or four data Lanes.\nThus, a receiver with four data Lanes shall work with transmitters with one, two, \nthree or four data Lanes.\nLikewise, a transmitter with four data Lanes shall work with receivers with four or \nfewer data Lanes.\nLikewise, a transmitter with four data Lanes shall work with receivers with four or \nfewer data Lanes.\nTransmitter Lanes 1 to M shall be connected to the receiver Lanes 1 to M.\nTransmitter Lanes 1 to M shall be connected to the receiver Lanes 1 to M.\nIf M<=N then there is no loss of performance \u2013 the receiver has sufficient data \nLanes to match the transmitter.\nIf M<=N then there is no loss of performance \u2013 the receiver has sufficient data \nLanes to match the transmitter.\nIf M> N then there may be a loss of performance (e.g. frame rate) as the receiver \nhas fewer data Lanes than the transmitter.\nIf M> N then there may be a loss of performance (e.g. frame rate) as the receiver \nhas fewer data Lanes than the transmitter.\nOne Lane Transmitter and Four Lane Receiver Example:\nOne Lane Transmitter and Four Lane Receiver Example:\n7 Four Lane Transmitter and One Lane Receiver example\n7 Four Lane Transmitter and One Lane Receiver example\n7 Four Lane Transmitter and One Lane Receiver example\nData within the Protocol layer is organized as packets.The transmitting side of the \ninterface appends header and optional error-checking information on to data to be \ntransmitted at the Low Level Protocol layer.On the receiving side, the header is \nstripped off at the Low Level Protocol layer and interpreted by corresponding logic \nin the receiver.Error-checking information may be used to test the integrity of \nincoming data.\nData within the Protocol layer is organized as packets.\nData within the Protocol layer is organized as packets.\nThe transmitting side of the interface appends header and optional error-checking \ninformation on to data to be transmitted at the Low Level Protocol layer.\nThe transmitting side of the interface appends header and optional error-checking \ninformation on to data to be transmitted at the Low Level Protocol layer.\nOn the receiving side, the header is stripped off at the Low Level Protocol layer \nand interpreted by corresponding logic in the receiver.\nOn the receiving side, the header is stripped off at the Low Level Protocol layer \nand interpreted by corresponding logic in the receiver.\nError-checking information may be used to test the integrity of incoming data.\nError-checking information may be used to test the integrity of incoming data.\n3  Application Layer:\nThis layer describes higher-level encoding and interpretation of data contained in \nthe data stream.The CSI-2 specification describes the mapping of pixel values to \nbytes\nThis layer describes higher-level encoding and interpretation of data contained in \nthe data stream.\nThis layer describes higher-level encoding and interpretation of data contained in \nthe data stream.\nThe CSI-2 specification describes the mapping of pixel values to bytes\nThe CSI-2 specification describes the mapping of pixel values to bytes", "type": "Document"}}