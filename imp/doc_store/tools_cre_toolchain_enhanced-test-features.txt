{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "tools_cre_toolchain_enhanced-test-features.txt"}, "page_content": "Enhanced Test Features\nStartingcre version 2.10\nThe below features are supported\nPromise result for afc() calls\nPromise result for afc() calls\n@OnEvent (Direct Mode)\n@OnEvent (Direct Mode)\n@OnEventHil (Hil Mode - Tasklets)\n@OnEventHil (Hil Mode - Tasklets)\n@OnMessage\n@OnMessage\nPromise for asynchronous calls\nPreviously afc calls were void methods with no return result. Currently, afc calls \nwhich are associated with return messages in sfc mode return Promise \nofIModuleMessagetype. Athen()method could be invoked on the afc call and it will be \nexecuted (in direct mode) whenever the firmware replies with the corresponding \nwithout blocking the execution unlike sfc calls\nFor instance\nThe next command afcInputReaderOff is executed normally after objState.afcGet(), and\nthe then thread will be executed whenever the return message has been processed\nOnEvent\nWhen the mentioned event is triggered, the annotated method is invoked in direct \nmode.evtparameter is passed (event path). This constant could be retrieved \nfromModXX_Events(newly generated interface in config)\nNote: Method invoked with a delay of ~ 40 after event triggering in direct mode\nOnEventHil\nWhen the mentioned event is triggered, the annotated method is invoked inHILmode(as \na tasklet)\nNoting that the tasklet was already downloaded to module before READY status\nOptionally, we can setidparameter to @OnEventHil (e.g.id=\"myHandler\"). Afterwards, \nwe can disable the event handler by callingexu.onEventHilEnable(id, false).Ifidis \nnot set, then it's assigned to the method name itself.\nOnMessage\nWhen the mentionedmessage is received, the annotated method is invoked in direct \nmode (equivalent toMessageTranslateHandler)\nmsgparameter is passed(messagepath). This constant could be retrieved \nfromModXX_Messagesinterface\nIn this example, we have a message in the firmware calledlinkIsUp. This message \ncontains three parameters:Data,Number1, andNumber2. On the Java side, we need to \nextract the values of these parameters when the message is received. To achieve \nthis, we use the@OnMessageannotation, as demonstrated in the following example.\nPauseUntilEvent With Runnable\nProblem is the race condition, that can exist when calling a function that triggers \nan event, and i want to pauseUntilEvent onto this event.\nExample:doing diag in direct-mode on a CAN bus, the \"responseReceived\" event might \ncome within a fraction of a millisecond.The delay between the diag.afcSend and the \nexu.pauseUntilEvent might be too big to guarantee the event is not missed.\ndiag.afcSend(\"10 03\");// event might already happen before next line is \nexecutedexu.pauseUntilEvent( diag.evtResponseReceived(), 1000 );\nAPI below combines the AFC call and the pauseUntilEvent:\nexu.pauseUntilEvent( () -> diag.afcSend(\"10 03\"), diag.evtResponseReceived(), 1000 \n);", "type": "Document"}}