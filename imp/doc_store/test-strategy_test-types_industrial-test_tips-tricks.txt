{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "test-strategy_test-types_industrial-test_tips-tricks.txt"}, "page_content": "20.Dec 2024: Beeing informed about progress using CoreALM tickets\nIn case you are pening with your test project or EOL setup on implemnetation and \ntasks that are allocated to multiple teams and different persons there is an easy \nway to be auto informed on technical level about the progress.The bell in CoreALM\n04.Dec2024:Deploying changes (EOL Test/ TOOLS) from Gerrit to EOL machines \nHowToBeInformed\nIn scenarios where quick updates of test system software or EOL tests are expected \nto be tested it iskey to have source code managment on the target machinesrunnig the\nEOL tests.\nGood process pratice for feploymnet of changes is process whise a 2 steps approach:\n1) Run EOL test over night in a loopas far as possible using the target environment\n2) Deploy change to plant machine-> exact activation time has to be decided by \nIndstrial Engineer located at the plant (as porduction schedule is normally only \nlocally known - he/she also has to enter this in machinery history\nImportant:Apart form the actual deployment stepsevery change in a running series \nproduction requires an [artifact] as well as approval from 4M comitee\nUpdate procedure shall not exceed 15 min time per machine slot - given all tools and\ndatabase access is already configured on the target machine.Roll back can be done by\nresetting to the previous version.\nHere a sample of how to deploy a change for test if the developer provided just a \nlink/url pointing to it\n16.Oct2024: IndustrialIT Infrastructure - VLANS, SCADA, switches, STD hardware etc\nIndustrial Control Systems, IS & IT requirements for all industrial ICS \nsystems-Instructions for IS & IT-\nhttps://docs.google.com/document/d/1aQMxzqqDBix4Vl3hrJAnBdR7i_w51MKajIWlfGmswNs/edit\n#heading=h.i3nf00mgk53h\n26.Sept2024:Tagging versions in the browser  & understanding which revisions you are\nusing and which state is linked to which DUT software release\nIt is highly recommended to tag (mark) versions that you are using for your test \nusing Git. This allows you and others to easily find the version that u are using an\neven more important: Allow others to understand where you are and what has been for \nexample already industrialized.\nOn industrial side it is best practice to have the first 7 characters such as \n\"E123456\" of the partnumber part of this tag.Spaces are not allowed - multiple tags \nat same revision can be done as well.\nTagging versions can be done in the browser:\non RnD  side the git tag names are normally following strict naming conventions as \nperSiPH\nA sample would be: \"R500.RS1\" normally only releases with RS (Release onSystem \nlevel) are relevant for the production as only System level releases of DUT software\nare potentially as well released to the production.\nResult ay look like this (here 2 part numbers (EE08574 andEE08575are using same \nrevsion):\nPLEASE do not use any special characters! lenght is limited as well and sall be \nnormally not longer than 7 chars\n20.June 2023: Castle User Project - CMD Options to be used in the Production CRE \n2.15+Especially older EOLT setups are suffering from potential incompatibilities \nwhen using multiple Castle User Projects where potentially each is using an own \nfirmware revision of theSCLOCKand or theRACKMANAGER(that became lately part of \ntheCRE-CastleRuntimeEnvironment)\nIn order to minimize these issues the deployment of the following cmd line args \ntogether with at least CRE 2.15 shall be mandatory\nat ULS ECU EOLT:--sc.force --sc.timeout.relax -embedded\nat ULS ECU EOLT:--sc.force --sc.timeout.relax -embedded\nat RAD EOLT:--sc.force\nat RAD EOLT:--sc.force\nat ZLRE EOLT:--sc.force --sc.timeout.relax -embedded\nat ZLRE EOLT:--sc.force --sc.timeout.relax -embedded\n-embeddedwill cause that the CRE (and rackmanager) will run as sub process of the \nCTE and are getting therefore closed once the CTE is commanded to be closed. Meaning\nthere can be no fragments of a new project left that are potentially influencing the\nold ones without CRE\n--sc.forcewill cause that there isno automatic trialto skip the availability of the \nhardware clock in the Castle Rack and run in \"CastleNote mode\"in case if the \ncommunication towards the s-clock is instable\n--sc.timeout.relaxwill cause that a temporaryloss of UDP communicationbetween the \nrack manager and the s-clock (and therefore a potential time drift between the \nlogging timestamps in c5r and the time of the HOST PC) willnot immediately lead to a\nlog with fatal severity and test abort. Instead the system enters a warning state \nand tries for 2 seconds to recover\nRemarks:\nRAD EOLT uses MQTT for measurement distribution to the upper software layer (NI \nTestStand) (however old cte prot for control)  - therefore the \"embedded\" option \nmust not be used here because at this point in time (20.06.2023) this would \nautomatically prohibit mqtt communication.\nRAD EOLT uses MQTT for measurement distribution to the upper software layer (NI \nTestStand) (however old cte prot for control)  - therefore the \"embedded\" option \nmust not be used here because at this point in time (20.06.2023) this would \nautomatically prohibit mqtt communication.\n30.May2023:Castle User Project Stand Alone in SCADA/Production Network\nMachines in the production are normally part of a specially secured production \nnetwork (SCADA) and do not have access to entire VNET domain.Where SCADA stands \nforSupervisory Control and Data Acquisition.\nThe only servers that are accessible for Software Change Managment (SCM) are:\nhttps://forge.vnet.valeo.com/and its mirrows\nhttps://forge.vnet.valeo.com/and its mirrows\nhttps://forge-nexus.vnet.valeo.com/\nhttps://forge-nexus.vnet.valeo.com/\nThis causes a problem when trying to compile a Castle User Project on one of such \nmachines due to the gradle runtime gets normally downloaded from:\nhttps://services.gradle.org/distributions/\nhttps://services.gradle.org/distributions/\nIf this can not be done then there is the option to push the matching gradle \ndristribution as a zip into the GIT repository and configure the gradle-wrapper.jar \nto use that instead of the distribution URL. However more recent distributions \nexceed the 100M file size limit within Git.\nA workaround for this can be to split the zip into multiple parts and have abash \nscriptthat merges them together again in order for the Wrapper to take it:\n17.Jan 2022: Standard Library Component  Version Compatibility\nThis build scripts (build.gradle) file of recent projects contain entries similar to\nthis one:\nNotice that the mayor and minor version of the CRE and the standard library have the\nsame major and minor version  - this guarantees compatibility in between the \ncomponents.\nWhile an entry of 2.+ would potentially risk incompatibility.In example CRE 2.11 \nwould not work together with STD lib 2.0.4.\nAccording to maven versioning schema backward compatibility is only given as long as\nminor versionnumber is not changed.\n13.Nov 2022: RAISE Standard for Serial \nNumbershttps://sites.google.com/a/valeo.com/dus-process-standards-wemding/generic/sn\n-model?authuser=0", "type": "Document"}}